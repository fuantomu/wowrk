local party = {"None", "None", "None", "None", "None"}
local partySize = 0
local aTimer = ""

gameRunning = false
currentTurn = 0
alivePlayers = {}
loadDone = false
function init(self)
	msg.post(".", "acquire_input_focus")
	gameRunning = true


	math.random()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if(gameRunning) then
		--print(tickTimer.." game")
		if(tickTimer <= 0) then
			if(loadDone) then
				for k, v in pairs(party) do
					local pClass = getPlayerClass(v)
					if(pClass == "Warrior") then
						local pRes = getPlayerStat(v, "resCurrent")
						applyResource(v, pRes + 1)
						msg.post("/GUI#gameViewGUI", hash("setRES"), {id=k, player=v, val=hash("set"), res = (pRes + 1)})
					end
				end
				currentTurn = currentTurn + 1
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("back")) then
		msg.post("main:/game#loader", "gotoLobby")

		
	elseif(message_id == hash("5action")) then
		--local wpnDmg = getDamage(self.playerWeapon[message.player]["damage"])
		--wpnDmg["phy"] =  wpnDmg["phy"]* (1-(self.bossStats["armor"] / (self.bossStats["armor"] + 400 + 85 * self.bossStats["level"])))
		--local damageDone = wpnDmg["phy"] + wpnDmg["fire"] + wpnDmg["frost"] + wpnDmg["arcane"] + wpnDmg["nature"] + wpnDmg["shadow"] + wpnDmg["holy"]
		if(message.type == "Attack") then
			msg.post("game#calculationMain", hash("getAttackResult"), {enemy={id="testEnemy",type="mob"}, player={id="testCharacter",type="player"}, source="AutoAttack", type="133", position="Front"})
			--damageDone = damageDone + (self.playerStats[message.player]["ap"] / 14)
			--damageDone = math.floor(0.5 + damageDone)
			msg.post("/spritePlayer#spriteP".. message.player, "play_animation", { id = hash("attack") })
			--print("Player "..message.player.." hit: "..damageDone.."["..wpnDmg["phy"]..","..wpnDmg["fire"]..","..wpnDmg["frost"]..","..wpnDmg["arcane"]..","..wpnDmg["nature"]..","..wpnDmg["shadow"]..","..wpnDmg["holy"].."]")
		elseif(message.type == "Ability") then
			if(self.playerWeapon[message.player]["wtype"] == "2") then
				damageDone = damageDone + (1.7 * (self.playerStats[message.player]["ap"] / 14))
			else
				damageDone = damageDone + (2.4 * (self.playerStats[message.player]["ap"] / 14))
			end
			damageDone = math.floor(0.5 + damageDone)
			msg.post("/spritePlayer#spriteP".. message.player, "play_animation", { id = hash("attack") })
			if(self.playerAttack[message.player]["name"] == "Heroic Strike") then
				damageDone = damageDone + math.random(self.playerAttack[message.player]["basedmg"]["min"],self.playerAttack[message.player]["basedmg"]["max"])
			end
			print("Player "..message.player..","..self.playerStats[message.player][string.lower(self.playerAttack[message.player]["attr"])].." "..self.playerAttack[message.player]["name"].."["..message.id..","..self.playerAttack[message.player]["attr"]..","..self.playerAttack[message.player]["mult"].."] for "..damageDone.." damage")
		end

		
		self.bossStats["hpcurr"] = self.bossStats["hpcurr"] - damageDone
		local newBossHP = (self.bossStats["hpcurr"] / self.bossStats["hpmax"]) * 100
		msg.post("/GUI#gameViewGUI", hash("updateLabel"), {player="Boss", dmg=damageDone})
		msg.post("/GUI#gameViewGUI", hash("setHP"), {player="boss", hp=newBossHP, val=hash("set")})

		
	elseif(message_id == hash("5getProperties")) then
		if(message.type == "Weapon") then
			print("Player "..message.player.." attacking with "..message.values["name"]..","..message.values["lore"])
			self.playerAttack[message.player] = message.values
			msg.post("/GUI#gameViewGUI", hash("startCast"), {player=message.player, cast=message.values["aspeed"], type="Attack"})
		elseif(message.type == "Ability") then
			for i = 1, 3 do
				msg.post("main:/game#main", hash("getEffect"), {id=message.values["eids"]["eid"..i],player=message.player})
			end
			print("Player "..message.player.." using "..message.values["name"]..","..message.values["type"]..","..message.values["element"]..","..message.values["elemtype"].."  Casttime:"..message.values["cast"]..", Multiplier="..message.values["mult"]..","..message.values["attr"])
			self.playerAttack[message.player] = message.values
		end
	elseif(message_id == hash("5getEffect")) then
		table.insert(self.pAbilityEffects, message.values)
		if(#self.pAbilityEffects == 3) then
			local cast = self.playerAttack[message.player]["cast"]
			local addedDamage = {}
			for i = 1, #self.pAbilityEffects do
				if(self.pAbilityEffects[i]["func"] == "Skip") then
				elseif(self.pAbilityEffects[i]["func"] == "SetCast") then
					if(self.pAbilityEffects[i]["val"] == "Attackspeed") then
						cast = self.playerWeapon[message.player]["aspeed"]
					end
				end
			end
			table.insert(self.pAddedDamage, {id=message.player,addedDamage=addedDamage})
			msg.post("/GUI#gameViewGUI", hash("startCast"), {player=message.player, cast=cast, type="Ability"})
			self.pAbilityEffects = {}
		end


	
	elseif(message_id == hash("sendGameData")) then
		tprint(message)
		partySize = message.partySize
		
		party = message.party
		for k, v in pairs(party) do
			local pHp = getCharacterStat(v, "hpCurrent")
			print(pHp)
			if(pHp > 0) then
				table.insert(alivePlayers, k)
			end
		end

		if(#alivePlayers >= partySize) then
			local classesAltRes ={}
			local spellIds = {}
			for k, v in pairs(party) do
				local pClass = getCharacterClass(v)
				if(pClass == "Warrior") then
					table.insert(classesAltRes, k)
				end
				local pLoadout = getCharacterLoadout(v)
				local pWeapons = getCharacterWeapons(v)
				
				table.insert(spellIds, {attackid=pWeapons["weaponMH"]["id"],rangeid=pWeapons["weaponRanged"]["id"],idSp1=pLoadout["spell1"],idSp2=pLoadout["spell2"]})
			end
			msg.post("/GUI#gameViewGUI", hash("maxPlayers"), {val=#alivePlayers,size=partySize, altRes=classesAltRes, ids=spellIds})
		end
		msg.post("/game#boss", hash("loadBoss"), {id=1})
		
	elseif(message_id == hash("gameDataDone")) then
		for k, v in pairs(party) do
			local pHpCurr = getCharacterStat(v, "hpCurrent")
			local pHpMax = getCharacterStat(v, "hpMax")
			msg.post("/GUI#gameViewGUI", hash("setHP"), {hp=(pHpCurr/pHpMax)*100,val=hash("set"), player=k})
		end
		loadDone = true


		
	elseif(message_id == hash("death")) then
		setCharacterBattleStatus(party[message.player], "dead", true)
		print("Player "..message.player.." died")
		for i = 1, #alivePlayers do
			if(alivePlayers[i] == message.player) then
				table.remove(alivePlayers, i)
				break
			end
		end
		msg.post("/spritePlayer#spriteP".. message.player, "play_animation", { id = hash("death") })
		
	elseif(message_id == hash("animation_done")) then
		local player = string.sub(tostring(sender), -2, -2)
		if(message.id == hash("death")) then
			sprite.play_flipbook("/spritePlayer#spriteP".. player, hash("dead"))
		elseif(message.id == hash("attack")) then
			sprite.play_flipbook("/spritePlayer#spriteP".. player, hash("idle_stand"))
			msg.post("/GUI#gameViewGUI", hash("animDone"))
			msg.post("/game#boss", hash("animDone"))
		end
	elseif(message_id == hash("doAction")) then
			if not(message.player == "boss") then
				local character = party[message.player]
				local characterType = "player"
				local enemy = bossData["id"]
				local enemyType = "mob"
			else
				local character = bossData["id"]
				local characterType = "mob"
				local enemy = party[message.player]
				local enemyType = "player"
			end
			if(message.type == "AutoAttack") then
				--msg.post("main:/game#main", hash("getProperties"), {type="Weapon", id=self.playerEquipment[message.player]["mainhand"]["id"], player=message.player})
				local result = generateCombatResult({id=character,type=characterType}, {id=enemy,type=enemyType}, message.source, message.type, "Front", false)
				msg.post("/spritePlayer#spriteP".. message.player, "play_animation", { id = hash("attack") })
				tprint(result)
			elseif(message.type == "Ability") then
				--msg.post("main:/game#main", hash("getProperties"), {type=message.type, id=self.playerStats[message.player]["sp"..message.slot.."id"], player=message.player})
			end
		
	elseif(message_id == hash("bossDamage")) then
		local i = 1
		if(message.type == "ALL") then
			for i = 1, #message.targets do
				if(message.targets[i] >  partySize) then message.targets[i] = alivePlayers[math.random(#alivePlayers)] end
				if(not getCharacterBattleStatus(party[message.targets[i]], "dead")) then
					local dmgDone = message.dmg + (math.floor(math.random() * (message.dmg/10))*100)/100
					local pHpCur = getCharacterStat(party[message.targets[i]], "hpCurrent")
					local pHpMax = getCharacterStat(party[message.targets[i]], "hpMax")
					setCharacterStat(party[message.targets[i]], "hpCurrent", pHpCur - dmgDone)
					
					local newPlayerHP = (( pHpCur - dmgDone) / pHpMax) * 100
					msg.post("/GUI#gameViewGUI", hash("updateLabel"), {player=message.targets[i], dmg=dmgDone})
					msg.post("/GUI#gameViewGUI", hash("setHP"), {player=message.targets[i], hp=newPlayerHP, val=hash("set")})
					print("Boss hitting player "..message.targets[i].." for "..dmgDone)
				end
			end
		else
			aTimer = delay.repeating(0.2, function(self, id)
				if(#alivePlayers <= 0) then delay.cancel(id) end
				if(message.targets[i] > partySize) then message.targets[i] = alivePlayers[math.random(#alivePlayers)] end
				if(not getCharacterBattleStatus(party[message.targets[i]], "dead")) then
					local dmgDone = message.dmg + (math.floor(math.random() * (message.dmg/10))*100)/100
					local pHpCur = getCharacterStat(party[message.targets[i]], "hpCurrent")
					local pHpMax = getCharacterStat(party[message.targets[i]], "hpMax")
					setCharacterStat(party[message.targets[i]], "hpCurrent", pHpCur - dmgDone)

					local newPlayerHP = (( pHpCur - dmgDone) / pHpMax) * 100
					msg.post("/GUI#gameViewGUI", hash("updateLabel"), {player=message.targets[i], dmg=dmgDone})
					msg.post("/GUI#gameViewGUI", hash("setHP"), {player=message.targets[i], hp=newPlayerHP, val=hash("set")})
					print("Boss hitting player "..message.targets[i].." for "..dmgDone)
				else
					player = alivePlayers[math.random(#alivePlayers)]
					local dmgDone = message.dmg + (math.floor(math.random() * (message.dmg/10))*100)/100
					local pHpCur = getCharacterStat(party[message.targets[i]], "hpCurrent")
					local pHpMax = getCharacterStat(party[message.targets[i]], "hpMax")
					setCharacterStat(party[message.targets[i]], "hpCurrent", pHpCur - dmgDone)

					local newPlayerHP = (( pHpCur - dmgDone) / pHpMax) * 100
					msg.post("/GUI#gameViewGUI", hash("updateLabel"), {player=message.targets[i], dmg=dmgDone})
					msg.post("/GUI#gameViewGUI", hash("setHP"), {player=message.targets[i], hp=newPlayerHP, val=hash("set")})
					print("Boss hitting player "..message.targets[i].." for "..dmgDone)
				end
				i = i + 1
				if(i > #message.targets) then
					delay.cancel(id)
				end
			end)
		end
	elseif(message_id == hash("gameOver")) then
		print("GAMEOVER: "..message.result)
		delay.cancel(aTimer)
		gameRunning = false
	end
end



function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end

function on_input(self, action_id, action)
	
end