function init(self)
	mobData = {
		testEnemy = {
			name="Dummy",
			race="Mechanical",
			level=63,
			basehp=150,
			hpCurrent=150,
			hpMax=150,
			baseRes=0,
			resCurrent=0,
			resMax=100,
			attr={str=20, agi=0, sta=100, int=0, spr= 0},
			resist={fire=0,frost=250,arcane=200,nature=150,holy=100,shadow=999},
			armor=5000,
			ap=0,
			rAp=0,
			sAp=0,
			crit=5,
			sCrit=5,
			schools={phy={min=100,max=100},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},
			schoolsRanged={phy={min=100,max=100},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},
			avoidance={dodge=5,parry=5,block=5},
			blockValue = 50,
			hpRegen=0,
			mpRegen=0,
			icon="hws010",
			buffs={},
			debuffs={},
			battle={hitRecently=0}
		}
	}
end

function getEnemyData(enemy)
	return mobData[tostring(enemy)]
end

function getEnemyStat(enemy, stat)
	return mobData[tostring(enemy)][stat]
end

function setEnemyStat(enemy, stat, value)
	mobData[tostring(enemy)][stat] = value
end

function getEnemyLevel(enemy)
	return mobData[tostring(enemy)]["level"]
end

function getEnemyName(enemy)
	return mobData[tostring(enemy)]["name"]
end

function getEnemyRace(enemy)
	return mobData[tostring(enemy)]["race"]
end

function getEnemyHp(enemy)
	return {currentHp = mobData[tostring(enemy)]["hpCurrent"], maxHp = mobData[tostring(enemy)]["hpMax"]}
end

function getEnemyResource(enemy)
	return {currentRes = mobData[tostring(enemy)]["resCurrent"], maxRes = mobData[tostring(enemy)]["resMax"]}
end

function getEnemyAttribute(enemy)
	return mobData[tostring(enemy)]["attr"]
end

function getEnemyResistance(enemy)
	return mobData[tostring(enemy)]["resist"]
end

function getEnemyArmor(enemy)
	return mobData[tostring(enemy)]["armor"]
end

function getEnemyCrit(enemy)
	return mobData[tostring(enemy)]["crit"]
end

function getEnemySpellCrit(enemy)
	return mobData[tostring(enemy)]["sCrit"]
end

function getEnemySchool(enemy)
	return mobData[tostring(enemy)]["schools"]
end

function getEnemySchoolRanged(enemy)
	return mobData[tostring(enemy)]["schoolsRanged"]
end

function getEnemyAvoidance(enemy)
	return mobData[tostring(enemy)]["avoidance"]
end

function getEnemyBlock(enemy)
	return mobData[tostring(enemy)]["blockValue"]
end

function getEnemyBuffs(enemy)
	return mobData[enemy]["buffs"]
end

function addEnemyBuff(enemy, buff)
	table.insert(mobData[enemy]["buffs"], (#mobData[enemy]["buffs"]+1), buff)
end

function addEnemyDebuff(enemy, debuff)
	table.insert(mobData[enemy]["debuffs"], (#mobData[enemy]["debuffs"]+1), debuff)
end

function setEnemyBuffs(enemy, value)
	mobData[enemy]["buffs"] = value
end

function removeEnemyBuff(enemy, buff)
	table.remove(mobData[enemy]["buffs"], buff)
end

function getEnemyBuffType(enemy, buff)
	return mobData[enemy]["buffs"][buff]["type"]
end

function getEnemyBuffTick(enemy, buff)
	if not(mobData[enemy]["buffs"][buff]["tick"] == nil) then
		return mobData[enemy]["buffs"][buff]["tick"]
	end
	return -1
end

function getEnemyBuffName(enemy, buff)
	return mobData[enemy]["buffs"][buff]["name"]
end

function getEnemyBuffStatus(enemy, buff)
	return mobData[enemy]["buffs"][buff]["active"]
end

function setEnemyBuffStatus(enemy, buff, value)
	mobData[enemy]["buffs"][buff]["active"] = value
end

function getEnemyBuffDuration(enemy, buff)
	if not(mobData[enemy]["buffs"][buff]["duration"] == nil) then
		return mobData[enemy]["buffs"][buff]["duration"]
	end
	return -1
end

function setEnemyBuffDuration(enemy, buff, value)
	mobData[enemy]["buffs"][buff]["duration"] = value
end

function getEnemyDebuffs(enemy)
	return mobData[enemy]["debuffs"]
end

function setEnemyDebuffs(enemy, value)
	mobData[enemy]["debuffs"] = value
end

function removeEnemyDebuff(enemy, debuff)
	table.remove(mobData[enemy]["debuffs"], debuff)
end

function getEnemyDebuffType(enemy, debuff)
	--print(enemy,debuff)
	return mobData[enemy]["debuffs"][debuff]["type"]
end

function getEnemyDebuffTick(enemy, debuff)
	return mobData[enemy]["debuffs"][debuff]["tick"]
end

function getEnemyDebuffName(enemy, debuff)
	return mobData[enemy]["debuffs"][debuff]["name"]
end

function getEnemyDebuffStatus(enemy, debuff)
	return mobData[enemy]["debuffs"][debuff]["active"]
end

function setEnemyDebuffStatus(enemy, debuff, value)
	mobData[enemy]["debuffs"][debuff]["active"] = value
end

function getEnemyDebuffDuration(enemy, debuff)
	return mobData[enemy]["debuffs"][debuff]["duration"]
end

function setEnemyDebuffDuration(enemy, debuff, value)
	mobData[enemy]["debuffs"][debuff]["duration"] = value
end

function getEnemyDebuffSource(enemy, debuff)
	return mobData[enemy]["debuffs"][debuff]["source"]
end

function getEnemyBattleStatus(enemy, stat)
	return mobData[enemy]["battle"][stat]
end

function setEnemyBattleStatus(enemy, stat, value)
	mobData[enemy]["battle"][stat] = value
end


function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if(tickTimer <= 1) then
		for k, v in pairs(mobData) do
			updateAuras(k)
			applyAuraEffects(k)
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
