function init(self)
	characterData = {
		testCharacter = {
			stats={
				class="Warrior", 
				race="Human", 
				level=60, 
				basehp=0,
				hpCurrent=0,
				hpMax=0,
				baseRes=0,
				resCurrent=0,
				resMax=100,
				attr={str=0, agi=0, sta=0, int=0, spr=0},
				skill={OneHandedSword=300,OneHandedMace=300,OneHandedAxe=300,TwoHandedAxe=300,TwoHandedSword=300,TwoHandedMace=300,Polearm=300,Dagger=300,Fistweapon=300,Unarmed=300,Bow=300,Gun=300,Throwing=300,Defense=300},
				profession={engineering=0,herbalism=0},
				baseArmor=0,
				armor=0,
				baseAp=0,
				ap=0,
				baseRAp=0,
				rAp=0,
				baseSp=0,
				sp=0,
				resist={fire=0,frost=0,arcane=0,nature=0,holy=0,shadow=0},
				baseCrit=0,
				crit=0,
				baseSCrit=0,
				sCrit=0,
				hit=0,
				sHit=0,
				avoidance={dodge=0,parry=5,block=5},
				hpRegen=0,
				mpRegen=0,
				xp=0
			},
			buffs={
			},
			debuffs={
			},
			weaponMH={
				type="OneHandedSword",
				effectId={0,0,0},
				armor=0,
				attr={str=0,agi=0,sta=0,int=0,spr=0},
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				setid=0,
				schools={phy={min=100,max=100},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}}
			},
			weaponOH={
				type="Shield",
				effectId={0,0,0},
				armor=150,
				attr={str=0,agi=0,sta=0,int=0,spr=0},
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				setid=0,
				blockValue=50,
				schools={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}}
			},
			weaponRanged={
				type="Gun",
				effectId={0,0,0},
				armor=0,
				attr={str=0,agi=0,sta=0,int=0,spr=0},
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0}
			},
			helmet={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			necklace={
				type="Accessory",
				effectId={0,0,0},
				armor=0,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			shoulder={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			cloak={
				type="Cloth",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			chest={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			wrists={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			hands={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			waist={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			legs={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			feet={
				type="Plate",
				effectId={0,0,0},
				armor=50,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			ring1={
				type="Accessory",
				effectId={0,0,0},
				armor=0,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			ring2={
				type="Accessory",
				effectId={0,0,0},
				armor=0,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			trinket1={
				type="Accessory",
				effectId={0,0,0},
				armor=0,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			trinket2={
				type="Accessory",
				effectId={0,0,0},
				armor=0,
				resist={fire=0,frost=0,arcane=0,shadow=0,nature=0,holy=0},
				attr={str=0,agi=0,sta=0,int=0,spr=0}
			},
			battle={
				hitRecently=0
			}
		}
	}
end

function equipItem(character, type, slot, itemid)
	local pItem = {}
	if (type == "weapon") then
		pItem = getWeaponData(tostring(itemid))
		characterData[character][slot] = pItem
		characterData[character][slot]["slot"] = slot
	else
		pItem = getArmorData(tostring(itemid))
		characterData[character][slot] = pItem
		characterData[character][slot]["slot"] = slot
	end
end

function applyAura(character, auraId, source)
	local aEffect = effect[tostring(auraId)]
	local eCondition = getEffectCondition(tostring(auraId))
	local eName = getEffectName(tostring(auraId))
	local eTick = getEffectTick(tostring(auraId))
	local eDuration = getEffectDuration(tostring(auraId))
	local pBuffs = getCharacterBuffs(character)
	local pDebuffs = getCharacterBuffs(character)
	source = source or {id="None", type="None"}
	if(eCondition == "Buff" or eCondition == "AuraBuff") then
		table.insert(characterData[character]["buffs"], (#pBuffs+1), {id=auraId,name=eName,duration=eDuration,tick=eTick,type=eCondition,active=false,source=source})
	elseif(eCondition == "Debuff" or eCondition == "AuraDebuff") then
		table.insert(characterData[character]["debuffs"], (#pDebuffs+1), {id=auraId,name=eName,baseDuration=eDuration,duration=eDuration,tick=eTick,type=eCondition,active=false,source=source})
	end
end

function removeAura(character, auraId)
	local aEffect = effect[tostring(auraId)]
	local eCondition = getEffectCondition(tostring(auraId))
	local eType = getEffectType(tostring(auraId))
	local eStat = getEffectStat(tostring(auraId))
	local eValue = getEffectValue(tostring(auraId))
	local eName = getEffectName(tostring(auraId))
	local pBuffs = getCharacterBuffs(character)
	local pDebuffs = getCharacterDebuffs(character)
	if(eCondition == "Buff") then
		if not(pBuffs == nil) then
			for k, v in pairs(pBuffs) do
				if(pBuffs[k]["id"] == tostring(auraId)) then
					setCharacterBuffDuration(character, k, 0)
				end
			end
		end
	elseif(eCondition == "Debuff") then
		if not(pDebuffs == nil) then
			for k, v in pairs(pDebuffs) do
				if(pDebuffs[k]["id"] == tostring(auraId)) then
					setCharacterDebuffDuration(character, k, 0)
				end
			end
		end
	elseif(eCondition == "AuraBuff") then
		if not(pBuffs == nil) then
			for k, v in pairs(pBuffs) do
				if(pBuffs[k]["id"] == auraId) then
					local pBuffStatus = getCharacterBuffStatus(character, k)
					if(pBuffStatus == true) then
						setCharacterBuffStatus(character, k, 2)
					end
				end
			end
		end
	elseif(eCondition == "AuraDebuff") then
		if not(pDebuffs == nil) then
			for k, v in pairs(pDebuffs) do
				if(pDebuffs[k]["id"] == auraId) then
					if(pDebuffs["active"] == true) then
						setCharacterDebuffStatus(character, k, 2)
					end
				end
			end
		end
	end
end

function updateAuras(character)
	local pBuffs = getCharacterBuffs(character)
	local pDebuffs = getCharacterDebuffs(character)
	if not( pBuffs == nil) then
		for j,l in pairs(pBuffs) do
			--print(j,l,#characterData[k]["buffs"])
			local pBuffType = getCharacterBuffType(character, j)
			local pBuffDuration = getCharacterBuffDuration(character, j)
			local pBuffTick = getCharacterBuffTick(character, j)
			local pBuffStatus = getCharacterBuffStatus(character, j)
			local pBuffName = getCharacterBuffName(character, j)
			--print(pBuffType,pBuffDuration,pBuffTick,pBuffStatus,pBuffName)
			if not(pBuffType == "AuraBuff") then
				if(currentTick % pBuffTick == 0) then
					setCharacterBuffDuration(character, j, pBuffDuration - 1)
				end
				if(pBuffDuration <= 0) then
					print("Buff "..pBuffName.." fell off")
					if((#pBuffs < 1 or pBuffs == nil) and pBuffs[#pBuffs]["duration"] <= 0) then
						setCharacterBuffs(character, {})
					else
						removeCharacterBuff(character, j)
					end
				end
			else
				if(pBuffStatus == 3) then
					print("Buff "..pBuffName.." fell off")
					if((#pBuffs < 1 or pBuffs == nil) and pBuffs[#pBuffs]["duration"] <= 0) then
						setCharacterBuffs(character, {})
					else
						removeCharacterBuff(character, j)
					end
				end
			end
		end
	end
	if not(pDebuffs == nil) then
		for j,l in pairs(pDebuffs) do
			--print(j,l,#characterData[k]["buffs"])
			local pDebuffType = getCharacterDebuffType(character, j)
			local pDebuffDuration = getCharacterDebuffDuration(character, j)
			local pDebuffTick = getCharacterDebuffTick(character, j)
			local pDebuffStatus = getCharacterDebuffStatus(character, j)
			local pDebuffName = getCharacterDebuffName(character, j)
			if not(pDebuffType == "AuraDebuff") then
				if(currentTick % pDebuffTick == 0) then
					setCharacterDebuffDuration(character, j, pDebuffDuration - pDebuffTick)
				end
			end
			if(pDebuffDuration <= 0 or pDebuffStatus == 3) then
				print("Debuff "..pDebuffName.." fell off")
				if((#pDebuffs < 1 or pDebuffs == nil) and pDebuffs[#pDebuffs]["duration"] <= 0) then
					setCharacterDebuffs(character, {})
				else
					removeCharacterDebuff(character, j)
				end
			end
		end
	end
end

function setCharacterStat(character, stat, value)
	characterData[character]["stats"][stat] = value
end

function setCharacterEquipmentValue(character, slot, stat, value)
	characterData[character][slot][stat] = value
end

function setCharacterBattleStatus(character, stat, value)
	characterData[character]["battle"][stat] = value
end

function getCharacterData()
	return characterData
end

function getCharacterStat(character, stat)
	return characterData[character]["stats"][stat]
end

function getCharacterLevel(character)
	return characterData[character]["stats"]["level"]
end

function getCharacterSkill(character)
	return characterData[character]["stats"]["skill"]
end

function getCharacterSkillValue(character, skill)
	return characterData[character]["stats"]["skill"][skill]
end

function getCharacterHit(character)
	return characterData[character]["stats"]["hit"]
end

function getCharacterCrit(character)
	return characterData[character]["stats"]["crit"]
end

function getCharacterAttackpower(character)
	return characterData[character]["stats"]["ap"]
end

function getCharacterSpellHit(character)
	return characterData[character]["stats"]["sHit"]
end

function getCharacterSpellCrit(character)
	return characterData[character]["stats"]["sCrit"]
end

function getCharacterSpellpower(character)
	return characterData[character]["stats"]["sp"]
end

function getCharacterAttribute(character)
	return characterData[character]["stats"]["attr"]
end

function getCharacterAttributeValue(character, attribute)
	return characterData[character]["stats"]["attr"][attribute]
end

function getCharacterAvoidance(character)
	return characterData[character]["stats"]["avoidance"]
end

function getCharacterAvoidanceValue(character, skill)
	return characterData[character]["stats"]["avoidance"][skill]
end

function getCharacterArmor(character)
	return characterData[character]["stats"]["armor"]
end

function getCharacterResistance(character)
	return characterData[character]["stats"]["resist"]
end

function getCharacterResistanceValue(character, skill)
	return characterData[character]["stats"]["resist"][skill]
end

function getCharacterEquipmentSlot(character, slot)
	return characterData[character][slot]
end

function getCharacterWeapons(character)
	return {weaponMH = characterData[character]["weaponMH"], weaponOH = characterData[character]["weaponOH"], weaponRanged =characterData[character]["weaponRanged"]}
end

function getCharacterWeaponType(character, weapon)
	return characterData[character][weapon]["type"]
end

function getCharacterEquipmentValue(character, slot, stat)
	return characterData[character][slot][stat]
end

function getCharacterWeaponBlock(character)
	return characterData[character]["weaponOH"]["blockValue"]
end

function getCharacterBuffs(character)
	return characterData[character]["buffs"]
end

function setCharacterBuffs(character, value)
	characterData[character]["buffs"] = value
end

function removeCharacterBuff(character, buff)
	table.remove(characterData[character]["buffs"], buff)
end

function getCharacterBuffType(character, buff)
	return characterData[character]["buffs"][buff]["type"]
end

function getCharacterBuffTick(character, buff)
	if not(characterData[character]["buffs"][buff]["tick"] == nil) then
		return characterData[character]["buffs"][buff]["tick"]
	end
	return -1
end

function getCharacterBuffName(character, buff)
	return characterData[character]["buffs"][buff]["name"]
end

function getCharacterBuffStatus(character, buff)
	return characterData[character]["buffs"][buff]["active"]
end

function setCharacterBuffStatus(character, buff, value)
	characterData[character]["buffs"][buff]["active"] = value
end

function getCharacterBuffDuration(character, buff)
	if not(characterData[character]["buffs"][buff]["duration"] == nil) then
		return characterData[character]["buffs"][buff]["duration"]
	end
	return -1
end

function setCharacterBuffDuration(character, buff, value)
	characterData[character]["buffs"][buff]["duration"] = value
end

function getCharacterDebuffs(character)
	return characterData[character]["debuffs"]
end

function setCharacterDebuffs(character, value)
	characterData[character]["debuffs"] = value
end

function removeCharacterDebuff(character, debuff)
	table.remove(characterData[character]["debuffs"], debuff)
end

function getCharacterDebuffType(character, debuff)
	return characterData[character]["debuffs"][debuff]["type"]
end

function getCharacterDebuffTick(character, debuff)
	return characterData[character]["debuffs"][debuff]["tick"]
end

function getCharacterDebuffName(character, debuff)
	return characterData[character]["debuffs"][debuff]["name"]
end

function getCharacterDebuffStatus(character, debuff)
	return characterData[character]["debuffs"][debuff]["active"]
end

function setCharacterDebuffStatus(character, debuff, value)
	characterData[character]["debuffs"][debuff]["active"] = value
end

function getCharacterDebuffDuration(character, debuff)
	return characterData[character]["debuffs"][debuff]["duration"]
end

function setCharacterDebuffDuration(character, debuff, value)
	characterData[character]["debuffs"][debuff]["duration"] = value
end

function getCharacterDebuffSource(character, debuff)
	return characterData[character]["debuffs"][debuff]["source"]
end

function getCharacterBattleStatus(character, stat)
	return characterData[character]["battle"][stat]
end

function expToLevel(character)
	local currentLevel = getCharacterStat(character, "level")
	if(currentLevel < 60) then
		local currentExp = getCharacterStat(character, "xp")
		local expToNext = getExpToNextLevel(currentLevel)
		return (expToNext - currentExp)
	else
		return 0
	end
end

function final(self)
	
end

function update(self, dt)
	if(tickTimer <= 1) then
		for k, v in pairs(characterData) do
			if(currentTick % 2 == 0) then
				calculateRegeneration(k, 2)
			end
			if(currentTick % 5 == 0) then
				calculateRegeneration(k, 5)
			end
			local pHitRecently = getCharacterBattleStatus(k, "hitRecently")
			setCharacterBattleStatus(k, "hitRecently", math.max(0, pHitRecently-1))
			updateAuras(k)
			applyAuraEffects(k)
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
