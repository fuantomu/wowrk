local currentPlayer = -1
local currentSelection = 0
local nextPlayer = 0
local partySize = 5
local waitForAnimation = false
local playersAlive = partySize
local bossAlive = true
local target = "boss"

local actionQueue = {}

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.clock() * 1000)
	math.random()
	gui.set_color(gui.get_node("lblBoss"), vmath.vector4(0,0,0,0))
	for i = 1, 5 do
		gui.set_color(gui.get_node("lblP"..i), vmath.vector4(0,0,0,0))
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if(gameRunning) then
		if(loadDone) then
			for x = 1, partySize do
				if((not waitForAnimation) and bossAlive) then
					local gbar = gui.get_node("barsP".. x .."/gcdbar/gcdbar_fill")
					local cbar = gui.get_node("barsP".. x .."/cbar/cbar_fill")
					local gcdpos = gui.get_position(gbar)
					local cpos = gui.get_position(cbar)
					local ccolor = gui.get_color(cbar)
					if(not actionQueue[x]["dead"]) then
						if(ccolor.w == 0) then
							if(gcdpos.x >= 0) then
								gui.set_position(gbar, vmath.vector3(gcdpos.x-300, gcdpos.y, gcdpos.z))
								gui.set_color(gbar, vmath.vector4(1,1,1,1))
								gui.set_position(cbar, vmath.vector3(cpos.x+300, cpos.y, cpos.z))
								gui.set_color(cbar, vmath.vector4(1,1,1,0.5))
								msg.post(".", hash("gcdDone"), {player=x})
							elseif(gcdpos.x < 0) then
								gui.set_position(gbar, vmath.vector3(gcdpos.x+3, gcdpos.y, gcdpos.z))
							end
						elseif (ccolor.w > 0) then
							if(#actionQueue > 0) then
								if(actionQueue[x]["action"] == "Wait") then
									if(not(nextPlayer == -1)) then
										for i = (nextPlayer+1), partySize do
											if(actionQueue[i]["action"] == "Wait") then
												nextPlayer = i
												break
											else
												nextPlayer = x
												break
											end
										end
										if(currentSelection == 0 and nextPlayer == x) then
											print("Turn Player " .. x)
											currentSelection = 1
											currentPlayer = x
											local cSel = gui.get_node("currentSelection")
											local barPos = gui.get_position(gui.get_node("barGroup"))
											gui.set_position(cSel, vmath.vector3(barPos.x-22, barPos.y-(135*(x-1))+10, barPos.z))
											gui.set_color(cSel, vmath.vector4(1,1,1,1))
											gui.set_color(gui.get_node("attackButton"), vmath.vector4(1,1,1,1))
											gui.play_flipbook(gui.get_node("attackButton"), actionQueue[x]["attackicon"])
											gui.set_color(gui.get_node("spell1Button"), vmath.vector4(1,1,1,1))
											gui.play_flipbook(gui.get_node("spell1Button"), actionQueue[x]["spell1icon"])
											gui.set_color(gui.get_node("spell2Button"), vmath.vector4(1,1,1,1))
											gui.play_flipbook(gui.get_node("spell2Button"), actionQueue[x]["spell2icon"])
											gui.set_color(gui.get_node("barsP".. x .."/cbar/cbar_fill"), vmath.vector4(1,1,1,1))
										end
									else
										gui.set_color(gui.get_node("currentSelection"), vmath.vector4(0,0,0,0))
										gui.set_color(gui.get_node("attackButton"), vmath.vector4(0,0,0,0))
										gui.set_color(gui.get_node("spell1Button"), vmath.vector4(0,0,0,0))
										gui.set_color(gui.get_node("spell2Button"), vmath.vector4(0,0,0,0))
									end
								else
									if(cpos.x >= 0) then
										gui.set_position(cbar, vmath.vector3(cpos.x-300, cpos.y, cpos.z))
										gui.set_color(cbar, vmath.vector4(1,1,1,0))
										msg.post(".", hash("castDone"), {player=x})
									elseif(cpos.x < 0) then
										gui.set_position(cbar, vmath.vector3(cpos.x+((1.0/actionQueue[x]["casttime"])*3), cpos.y, cpos.z))
									end
								end
							end
							if (currentSelection == 0 or actionQueue[x]["dead"] or nextPlayer == -1) then
								gui.set_color(gui.get_node("currentSelection"), vmath.vector4(0,0,0,0))
								gui.set_color(gui.get_node("attackButton"), vmath.vector4(0,0,0,0))
								gui.set_color(gui.get_node("spell1Button"), vmath.vector4(0,0,0,0))
								gui.set_color(gui.get_node("spell2Button"), vmath.vector4(0,0,0,0))
							end
						end
					else
						gui.set_position(gbar, vmath.vector3(gcdpos.x-300, gcdpos.y, gcdpos.z))
						gui.set_color(gbar, vmath.vector4(0,0,0,0))
						gui.set_color(gui.get_node("barsP".. x .."/rbar/rbar_fill"), vmath.vector4(0,0,0,0))
						gui.set_position(cbar, vmath.vector3(cpos.x-300, cpos.y, cpos.z))
						gui.set_color(cbar, vmath.vector4(0,0,0,0))
					end
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("setHP")) then
		if(not (message.player == "boss")) then
			if(not actionQueue[message.player]["dead"]) then
				local hpbar = gui.get_node("barsP".. message.player .."/hbar/hbar_fill")
				local hppos = gui.get_position(hpbar)
				if(message.val == hash("add")) then
					gui.set_position(hpbar, vmath.vector3(hppos.x+message.hp*3, 0, 0))
				elseif(message.val == hash("set")) then
					gui.set_position(hpbar, vmath.vector3(-300+(message.hp*3), 0, 0))
				else
					gui.set_position(hpbar, vmath.vector3(hppos.x-message.hp*3, 0, 0))
				end
				local hppos = gui.get_position(hpbar)
				if(hppos.x <= -300) then
					actionQueue[message.player]["dead"] = true
					msg.post("/game#gameView", hash("death"), {player=message.player})
					gui.set_enabled(gui.get_node("barP"..message.player),false)
					if(currentPlayer == message.player) then
						currentSelection = 0
						currentPlayer = -1
						nextPlayer = (message.player + 1 ) % partySize
						for i = 1, partySize do
							if(not (actionQueue[i]["dead"])) then
								nextPlayer = tonumber(actionQueue[i]["player"])
							end
						end
						gui.set_color(gui.get_node("currentSelection"), vmath.vector4(0,0,0,0))
						gui.set_color(gui.get_node("attackButton"), vmath.vector4(0,0,0,0))	
						gui.set_color(gui.get_node("spell1Button"), vmath.vector4(0,0,0,0))
						gui.set_color(gui.get_node("spell2Button"), vmath.vector4(0,0,0,0))
					end
					alivePlayers = alivePlayers - 1
					if(alivePlayers == 0) then
						msg.post("/game#gameView", hash("gameOver"), {result="Loss"})
						--msg.post("/game#boss", hash("gameOver"), {result="Loss"})
						gameRunning = false
						print("party dead")
					end
				end
			end
		else
			local hpbar = gui.get_node("hbarBoss/hbar_fill")
			local hppos = gui.get_position(hpbar)
			if(message.val == hash("add")) then
				gui.set_position(hpbar, vmath.vector3(hppos.x+message.hp*3, 0, 0))
			elseif(message.val == hash("set")) then
				gui.set_position(hpbar, vmath.vector3(-300+(message.hp*3), 0, 0))
				local hppos = gui.get_position(hpbar)
				if(hppos.x <= -300) then
					bossAlive = false
					msg.post("/game#gameView", hash("gameOver"), {result="Victory"})
					--msg.post("/game#boss", hash("gameOver"), {result="Victory"})
					gameRunning = false
					print("boss dead")
				end
			else
				gui.set_position(hpbar, vmath.vector3(hppos.x-message.hp*3, 0, 0))
			end
		end
	elseif(message_id == hash("setRES")) then
		if(not actionQueue[message.player]["dead"]) then
			local rbar = gui.get_node("barsP".. message.player .."/rbar/rbar_fill")
			local rpos = gui.get_position(rbar)
			if(message.val == hash("add")) then
				gui.set_position(rbar, vmath.vector3(rpos.x+message.res*3, 0, 0))
			elseif(message.val == hash("set")) then
				gui.set_position(rbar, vmath.vector3(-300+(message.res*3), 0, 0))
			else
				gui.set_position(rbar, vmath.vector3(rpos.x-message.res*3, 0, 0))
			end
		end
	elseif(message_id == hash("gcdDone")) then
		print("Player " .. message.player .. " waiting")
		actionQueue[message.player]["action"] = "Wait"
		if(nextPlayer == -1) then
			nextPlayer = message.player
		end
	elseif(message_id == hash("bossCast")) then
		waitForAnimation = true
	elseif(message_id == hash("castDone")) then
		print("Player " .. message.player .. " done")
		msg.post("/game#gameView", hash("action"), {type=actionQueue[message.player]["action"],id=actionQueue[message.player]["attack"],player=message.player})
		waitForAnimation = true
		msg.post("/game#boss", hash("waitForAnimation"))
		actionQueue[message.player]["action"] = "None"
	elseif(message_id == hash("startCast")) then
		local cbar = gui.get_node("barsP".. message.player .."/cbar/cbar_fill")
		local cpos = gui.get_position(cbar)
		sprite.play_flipbook("/spritePlayer#spriteP".. message.player, hash("idle_cast"))
		gui.set_position(cbar, vmath.vector3(cpos.x-300, cpos.y, cpos.z))
		actionQueue[message.player]["action"] =  message.type
		actionQueue[message.player]["id"] = message.player
		actionQueue[message.player]["casttime"] = message.cast
	elseif(message_id == hash("animDone")) then
		waitForAnimation = false
	elseif(message_id == hash("bossDamage")) then
		local targets = {}
		if(type(message.targets) == "table") then
			for i = 1, #message.targets do
				table.insert(targets, message.targets[i])
			end
		elseif(message.targets == "ALL") then
			for i = 1, partySize do
				table.insert(targets, i)
			end
		else
			local rnd, number, ttargets = message.targets:match("(%u+):(%d+):%{(.-)%}")
			if(#ttargets > 0) then
				local rndtarget = {}
				for target in string.gmatch(ttargets, '([^,]+)') do
					table.insert(rndtarget, tonumber(target))
				end
				for i = 1, number do
					table.insert(targets, rndtarget[math.random(#rndtarget)])
				end
			else
				for i = 1, number do
					table.insert(targets, math.random(partySize))
				end
			end
		end
		
		msg.post("/game#gameView", hash("bossDamage"), {dmg=message.dmg, targets=targets, type=message.targets})
	elseif(message_id == hash("maxPlayers")) then
		partySize = message.val
		alivePlayers = message.val
		for i = 1, partySize do
			table.insert(actionQueue, {player=i, action="None", attack="Attack", attackid=message.ids[i]["attackid"],attackicon="",spell1id=message.ids[i]["idSp1"],spell1icon="", spell2id=message.ids[i]["idSp2"],spell2icon="", casttime=1.0, dead=false})

			tprint(message.ids)
			local attackIcon = getWeaponIcon(message.ids[i]["attackid"])
			local defenseIcon = getWeaponIcon(message.ids[i]["defenseid"])
			local spellIcon1 = getAbilityIcon(message.ids[i]["idSp1"])
			local spellIcon2 = getAbilityIcon(message.ids[i]["idSp2"])
			actionQueue[i]["attackicon"] = attackIcon
			actionQueue[i]["defenseicon"] = defenseIcon
			actionQueue[i]["spell1icon"] = spellIcon1
			actionQueue[i]["spell2icon"] = spellIcon2
			
			local hpbar = gui.get_node("barsP".. i .."/hbar/hbar_fill")
			gui.set_position(hpbar, vmath.vector3(0, 0, 0))
			local rbar = gui.get_node("barsP".. i .."/rbar/rbar_fill")
			for x = 1, #message.altRes do
				if(i == message.altRes[x]) then
					gui.set_position(rbar, vmath.vector3(-300, 0, 0))
					break
				else
					gui.set_position(rbar, vmath.vector3(0, 0, 0))
				end
			end
		end
		msg.post(sender, hash("gameDataDone"))
		msg.post(".", hash("updateUI"), {players=message.val})
	elseif(message_id == hash("updateUI")) then
		if(not message.val) then
			for i = 1, 5 do
				if(i>message.players) then
					msg.post("/spritePlayer#spriteP"..i, hash("disable"))
					gui.set_enabled(gui.get_node("barP"..i),false)
				end
			end
		end
	elseif(message_id == hash("updateLabel")) then
		if(message.player == "Boss") then
			gui.set_text(gui.get_node("lblBoss"), tostring(message.dmg))
			gui.set_color(gui.get_node("lblBoss"), vmath.vector4(1,1,1,1))
			delay.seconds(1, function(self, id)
				gui.set_color(gui.get_node("lblBoss"), vmath.vector4(0,0,0,0))
			end)
		else
			gui.set_text(gui.get_node("lblP"..message.player), tostring(message.dmg))
			gui.set_color(gui.get_node("lblP"..message.player), vmath.vector4(1,1,1,1))
			delay.seconds(1, function(self, id)
				gui.set_color(gui.get_node("lblP"..message.player), vmath.vector4(0,0,0,0))
			end)
		end	
		
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("backButton"), action.x, action.y)) then
			print("clicked exit")
			msg.post("/game#gameView", hash("back"))
		elseif(gui.pick_node(gui.get_node("attackButton"), action.x, action.y) and currentSelection > 0) then
			print("clicked Attack for P"..currentPlayer)
			actionQueue[currentPlayer]["attack"] = actionQueue[currentPlayer]["attackid"]
			msg.post("game#gameView", hash("doAction"), {type="AutoAttack",player=currentPlayer,target=target,source="Melee"})
			nextPlayer = (currentPlayer % partySize) + 1
			local playerWaiting = false
			for i = 1, partySize do
				if(not(i==currentPlayer)) then
					if(actionQueue[nextPlayer]["action"] == "Wait") then
						playerWaiting = true
						break
					elseif(actionQueue[i]["action"] == "Wait") then
						nextPlayer = i
						playerWaiting = true
						break
					end
				end
			end
			if(not playerWaiting) then
				nextPlayer = -1
			end
			currentPlayer = -1
			currentSelection = 0
		elseif(gui.pick_node(gui.get_node("spell1Button"), action.x, action.y) and currentSelection > 0) then
			print("clicked Spell1 for P"..currentPlayer)
			actionQueue[currentPlayer]["attack"] = actionQueue[currentPlayer]["spell1id"]
			msg.post("game#gameView", hash("doAction"), {type="Ability",slot=1,player=currentPlayer})
			nextPlayer = (currentPlayer % partySize) + 1
			local playerWaiting = false
			for i = 1, partySize do
				if(not(i==currentPlayer)) then
					if(actionQueue[nextPlayer]["action"] == "Wait") then
						playerWaiting = true
						break
					elseif(actionQueue[i]["action"] == "Wait") then
						nextPlayer = i
						playerWaiting = true
						break
					end
				end
			end
			if(not playerWaiting) then
				snextPlayer = -1
			end
			currentPlayer = -1
			currentSelection = 0
		elseif(gui.pick_node(gui.get_node("spell2Button"), action.x, action.y) and currentSelection > 0) then
			print("clicked Spell2 for P"..currentPlayer)
			actionQueue[currentPlayer]["attack"] = actionQueue[currentPlayer]["spell2id"]
			msg.post("game#gameView", hash("doAction"), {type="Ability",slot=2,player=currentPlayer})
			nextPlayer = (currentPlayer % partySize) + 1
			local playerWaiting = false
			for i = 1, partySize do
				if(not(i==currentPlayer)) then
					if(actionQueue[nextPlayer]["action"] == "Wait") then
						playerWaiting = true
						break
					elseif(actionQueue[i]["action"] == "Wait") then
						nextPlayer = i
						playerWaiting = true
						break
					end
				end
			end
			if(not playerWaiting) then
				nextPlayer = -1
			end
			currentPlayer = -1
			currentSelection = 0
		end
	end
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
