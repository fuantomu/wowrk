function init(self)
	math.randomseed(os.time())
	currentTick = 0
	tickTime = 1
	tickTimer = 60 * tickTime
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if(testRuns >= 1) then
		tickTimer = tickTimer - 1
		if(tickTimer <= 0) then
			currentTick = currentTick + 1 * tickTime
			tickTimer = 60 * tickTime
			--print("Tick "..currentTick)
		end
	end
end

function on_message(self, message_id, message, sender)
	math.random()
	if(message_id == hash("getAttackResult")) then
		--generateCombatResult(message.player, message.enemy, message.source, message.type, message.position)
		
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testEnemy",type="mob"}, "Melee", "AutoAttack", "Front")
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testCharacter",type="player"}, "Melee", "AutoAttack", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testCharacter",type="player"}, "Melee", "AutoAttack", "Front")
		generateCombatResult({id="Lexwin",type="player"}, {id="testEnemy",type="mob"}, "Melee", "AutoAttack", "Front")

		--generateCombatResult({id="testEnemy",type="mob"}, {id="testEnemy",type="mob"}, "Melee", "Ability", "Front")
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testCharacter",type="player"}, "Melee", "Ability", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testCharacter",type="player"}, "Melee", "Ability", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testEnemy",type="mob"}, "Melee", "Ability", "Front")

		--generateCombatResult({id="testEnemy",type="mob"}, {id="testEnemy",type="mob"}, "Ranged", "AutoAttack", "Front")
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testCharacter",type="player"}, "Ranged", "AutoAttack", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testCharacter",type="player"}, "Ranged", "AutoAttack", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testEnemy",type="mob"}, "Ranged", "AutoAttack", "Front")

		--generateCombatResult({id="testEnemy",type="mob"}, {id="testEnemy",type="mob"}, "Ranged", "Ability", "Front")
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testCharacter",type="player"}, "Ranged", "Ability", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testCharacter",type="player"}, "Ranged", "Ability", "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testEnemy",type="mob"}, "Ranged", "Ability", "Front")

		--generateCombatResult({id="testEnemy",type="mob"}, {id="testEnemy",type="mob"}, "Spell", 133, "Front")
		--generateCombatResult({id="testEnemy",type="mob"}, {id="testCharacter",type="player"}, "Spell", 133, "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testCharacter",type="player"}, "Spell", 133, "Front")
		--generateCombatResult({id="testCharacter",type="player"}, {id="testEnemy",type="mob"}, "Spell", 133, "Front")
		
	elseif(message_id == hash("getCombatStats")) then
		--removeAura(message.p, 465)
		--applyAura(message.p, 6, {id="testEnemy", type="mob"})
		if not(message.skip == true) then
			equipItem(message.p, "weapon", "weaponMH", 10837)
			equipItem(message.p, "weapon", "weaponOH", 12774)
			equipItem(message.p, "armor", "trinket1", 11815)
			equipItem(message.p, "armor", "shoulder", 16868)
			equipItem(message.p, "armor", "waist", 16864)
			equipItem(message.p, "armor", "hands", 16863)
			equipItem(message.p, "weapon", "weaponRanged", 9412)
			--applyAura(message.p, 19740)
			--applyAura(message.p, 6, "testEnemy")
			--applyAura(message.p, 465)


			calculateBaseStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateEquipmentStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateCombatStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateRacials(message.p)

			--tprint(getCharacterData(message.p))
			--tprint(characterData[message.p])
		end
		msg.post(sender, hash("returnCombatStats"), {p=message.p})
	end
end

function generateCombatResult(attacker, target, source, type, position, secondAttack)
	local pStats = {level=1,weaponSkill={MH=0,OH=0,RANGED=0},defenseSkill=0,weaponType={MH="Unarmed",OH="Unarmed",RANGED="None"},weaponSchools={MH={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},OH={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},RANGED={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},SPELL={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}}},crit=0,spellcrit=0,hit=0,spellhit=0,ap=0,rangedAp=0,spellpower=0,avoidance={dodge=0,parry=0,block=0},armor=0,resistance={fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0},attribute={str=0,agi=0,sta=0,int=0,spr=0},block=0,class="None",race="None"}
	local eStats = {level=1,weaponSkill={MH=0,OH=0,RANGED=0},defenseSkill=0,weaponType={MH="Unarmed",OH="Unarmed",RANGED="None"},weaponSchools={MH={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},OH={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},RANGED={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},SPELL={phy={min=0,max=0},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}}},crit=0,spellcrit=0,hit=0,spellhit=0,ap=0,rangedAp=0,spellpower=0,avoidance={dodge=0,parry=0,block=0},armor=0,resistance={fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0},attribute={str=0,agi=0,sta=0,int=0,spr=0},block=0,class="None",race="None"}

	local dualWield = false
	local playerIsMob = false
	local enemyIsPlayer = false
	local enemyCanBlock = false
	local parryEnabled = false
	local blockEnabled = false
	secondAttack = secondAttack or false
	local character = attacker["id"]
	local enemy = target["id"]


	if(attacker["type"] == "player") then
		pStats["level"] = getCharacterLevel(character)
		local pWeapons = getCharacterWeapons(character)
		if not (pWeapons["weaponMH"] == nil) then
			pStats["weaponType"]["MH"] = getCharacterWeaponType(character, "weaponMH")
			pStats["weaponSkill"]["MH"] = getCharacterSkillValue(character , pStats["weaponType"]["MH"])
		end
		if not (pWeapons["weaponOH"] == nil) then
			pStats["weaponType"]["OH"] = getCharacterWeaponType(character, "weaponOH")
			if not(pStats["weaponType"]["OH"] == nil or pStats["weaponType"]["OH"] == "Shield") and source == "Melee" then
				dualWield = true
				pStats["weaponSkill"]["OH"] = getCharacterSkillValue(character , pStats["weaponType"]["OH"])
			end
		end
		if not (pWeapons["weaponRanged"] == nil) then
			pStats["weaponType"]["RANGED"] = getCharacterWeaponType(character, "weaponRanged")
			pStats["weaponSkill"]["RANGED"] = getCharacterSkillValue(character , pStats["weaponType"]["RANGED"])
		end
		pStats["defenseSkill"] = getCharacterSkillValue(character, "Defense")
		pStats["weaponSchools"]["MH"] = pWeapons["weaponMH"]["schools"]
		pStats["weaponSchools"]["OH"] = pWeapons["weaponOH"]["schools"]
		pStats["weaponSchools"]["RANGED"] = pWeapons["weaponRanged"]["schools"]
		if not( type == "AutoAttack" or type == "Ability") then
			pStats["weaponSchools"]["SPELL"] = getAbilitySchool(type)
		end
		pStats["crit"] = getCharacterCrit(character)
		pStats["spellcrit"] = getCharacterSpellCrit(character)
		pStats["hit"] = getCharacterHit(character)
		pStats["spellhit"] = getCharacterSpellHit(character)
		pStats["ap"] = getCharacterAttackpower(character)
		pStats["rangedAp"] = getCharacterRangedAttackpower(character)
		pStats["spellpower"] = getCharacterSpellpower(character)
		pStats["avoidance"] = getCharacterAvoidance(character)
		pStats["armor"] = getCharacterArmor(character)
		pStats["resistance"] = getCharacterResistance(character)
		pStats["attribute"] = getCharacterAttribute(character)
		pStats["block"] = getCharacterWeaponBlock(character)
		pStats["class"] = getCharacterClass(character)
		pStats["race"] = getCharacterRace(character)
	else
		pStats["level"] = getEnemyLevel(character)
		pStats["weaponSkill"]["MH"] = pStats["level"] * 5
		pStats["weaponSkill"]["OH"] = pStats["level"] * 5
		pStats["weaponSkill"]["RANGED"] = pStats["level"] * 5
		pStats["defenseSkill"] = pStats["level"] * 5
		pStats["weaponSchools"]["MH"] = getEnemySchool(character)
		pStats["weaponSchools"]["OH"] = pStats["weaponSchools"]["MH"]
		pStats["weaponSchools"]["RANGED"] = getEnemySchoolRanged(character)
		pStats["crit"] = getEnemyCrit(character)
		pStats["spellcrit"] = getEnemySpellCrit(character)
		pStats["avoidance"] = getEnemyAvoidance(character)
		pStats["armor"] = getEnemyArmor(character)
		pStats["resistance"] = getEnemyResistance(character)
		pStats["attribute"] = getEnemyAttribute(character)
		pStats["block"] = getEnemyBlock(character)
		pStats["race"] = getEnemyRace(character)
		playerIsMob = true
	end
	if(target["type"] == "mob") then
		eStats["level"] = getEnemyLevel(enemy)
		eStats["weaponSkill"]["MH"] = eStats["level"] * 5
		eStats["weaponSkill"]["OH"] = eStats["level"] * 5
		eStats["weaponSkill"]["RANGED"] = eStats["level"] * 5
		eStats["defenseSkill"] = eStats["level"] * 5
		eStats["weaponSchools"]["MH"] = getEnemySchool(enemy)
		eStats["weaponSchools"]["OH"] = eStats["weaponSchools"]["MH"]
		eStats["weaponSchools"]["RANGED"] = getEnemySchoolRanged(enemy)
		eStats["crit"] = getEnemyCrit(enemy)
		eStats["avoidance"] = getEnemyAvoidance(enemy)
		eStats["armor"] = getEnemyArmor(enemy)
		eStats["resistance"] = getEnemyResistance(enemy)
		eStats["attribute"] = getEnemyAttribute(enemy)
		eStats["block"] = getEnemyBlock(enemy)
		eStats["race"] = getEnemyRace(enemy)
		if(eStats["block"] > 0) then
			enemyCanBlock = true
		end
	else
		eStats["level"] = getCharacterLevel(enemy)
		local pWeapons = getCharacterWeapons(enemy)
		if not (pWeapons["weaponMH"] == nil) then
			eStats["weaponType"]["MH"] = getCharacterWeaponType(enemy, "weaponMH")
			eStats["weaponSkill"]["MH"] = getCharacterSkillValue(enemy , eStats["weaponType"]["MH"])
		end
		if not (pWeapons["weaponOH"] == nil) then
			eStats["weaponType"]["OH"] = getCharacterWeaponType(enemy, "weaponOH")
			if not(eStats["weaponType"]["OH"] == nil or eStats["weaponType"]["OH"] == "Shield") and source == "Melee" then
				dualWield = true
				eStats["weaponSkill"]["OH"] = getCharacterSkillValue(enemy , eStats["weaponType"]["OH"])
			elseif(pWeaponTypeOH == "Shield") then
				enemyCanBlock = true
			end
		end
		if not (pWeapons["weaponRanged"] == nil) then
			eStats["weaponType"]["RANGED"] = getCharacterWeaponType(enemy, "weaponRanged")
			eStats["weaponSkill"]["RANGED"] = getCharacterSkillValue(enemy , eStats["weaponType"]["RANGED"])
		end
		eStats["defenseSkill"] = getCharacterSkillValue(enemy, "Defense")
		eStats["weaponSchools"]["MH"] = pWeapons["weaponMH"]["schools"]
		eStats["weaponSchools"]["OH"] = pWeapons["weaponOH"]["schools"]
		eStats["weaponSchools"]["RANGED"] = pWeapons["weaponRanged"]["schools"]
		if not( type == "AutoAttack" or type == "Ability") then
			eStats["weaponSchools"]["SPELL"] = getAbilitySchool(type)
		end
		eStats["crit"] = getCharacterCrit(enemy)
		eStats["spellcrit"] = getCharacterSpellCrit(enemy)
		eStats["hit"] = getCharacterHit(enemy)
		eStats["spellhit"] = getCharacterSpellHit(enemy)
		eStats["ap"] = getCharacterAttackpower(enemy)
		eStats["rangedAp"] = getCharacterRangedAttackpower(enemy)
		eStats["spellpower"] = getCharacterSpellpower(enemy)
		eStats["avoidance"] = getCharacterAvoidance(enemy)
		eStats["armor"] = getCharacterArmor(enemy)
		eStats["resistance"] = getCharacterResistance(enemy)
		eStats["attribute"] = getCharacterAttribute(enemy)
		eStats["block"] = getCharacterWeaponBlock(enemy)
		eStats["class"] = getCharacterClass(enemy)
		eStats["race"] = getCharacterRace(enemy)
		enemyIsPlayer = true
		--tprint(eStats)
	end

	if(position == "Front" and source == "Melee") then
		parryEnabled = true
		if(enemyCanBlock == true) then
			blockEnabled = true
		end
	end


	local combatHitChance = 0
	local combatAttackTable = {}
	local combatAttackResult = "Evaded"
	local combatDamageRolls = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local combatDamageMultiplier = 0
	local combatDamageReduction = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local combatDamageDone = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local combatBlockDamage = {dmg=0,blocked=0}
	local combatResult = 0
	local combatProcResult = {damage={phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0},blocked=0}
	local combatProcDamage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local combatProcBlocked = 0
	local combatWeapon = "None"
	--tprint(pStats)
	if(source == "Melee") then
		combatWeapon = "weaponMH"
		if(type == "AutoAttack") then
			local attackWeapon = "MH"
			if(secondAttack == true) then
				attackWeapon = "OH"
				combatWeapon = "weaponOH"
			end
			combatHitChance = calculateHitChance(pStats["weaponSkill"][attackWeapon], pStats["hit"], eStats["defenseSkill"], pStats["level"], eStats["level"], dualWield, "Attack")
			combatAttackTable = generateAttackTable(pStats["level"],pStats["weaponSkill"][attackWeapon], pStats["defenseSkill"], combatHitChance, pStats["crit"], eStats["level"], eStats["weaponSkill"][attackWeapon], eStats["defenseSkill"], eStats["avoidance"], "Attack", false, parryEnabled, blockEnabled, playerIsMob, pStats["class"])
			combatAttackResult = getAttackResult(combatAttackTable, "Attack", pStats["crit"])
			if not(combatAttackResult == "miss" or combatAttackResult == "dodge" or combatAttackResult == "Evaded" or combatAttackResult == "parry") then
				combatDamageRolls = getRandomDamage(pStats["weaponSchools"][attackWeapon])
				if(combatAttackResult == "glancingBlow") then
					combatDamageMultiplier = calculateGlancingBlowMult(pStats["weaponSkill"][attackWeapon], eStats["defenseSkill"])
				elseif(combatAttackResult == "crit") then
					combatDamageMultiplier = 2.0
				elseif(combatAttackResult == "crushingBlow") then
					combatDamageMultiplier = 1.5
				else
					combatDamageMultiplier = 1.0
				end
				if(secondAttack == true) then
					combatDamageMultiplier = combatDamageMultiplier * 0.5
				end
				combatDamageReduction = calculateDamageReduction(pStats["level"], eStats["armor"], eStats["resistance"], eStats["level"])
				combatDamageDone = calculateDamage(combatDamageRolls, pStats["ap"], combatDamageReduction)
				if(combatAttackResult == "block") then
					combatBlockDamage = calculateBlock(combatDamageDone["phy"], eStats["attribute"]["str"], eStats["block"])
					combatDamageDone["phy"] = combatBlockDamage["dmg"]
				end
				for k, v in pairs(combatDamageDone) do
					if(combatAttackResult == "glancingBlow") then
						if(k == "phy") then
							combatResult = combatResult + v * combatDamageMultiplier
						else
							combatResult = combatResult + v
						end
					else
						combatResult = combatResult + v * combatDamageMultiplier
					end
				end
				if(playerIsMob == false) then
					combatProcResult = calculateProcs(character, type, combatWeapon, combatAttackTable, pStats["crit"], combatDamageReduction, eStats["attribute"], eStats["block"], eStats["defenseSkill"])
					combatProcDamage = combatProcResult["damage"]
					combatProcBlocked = combatProcResult["blocked"]
				end
			end
		elseif(type == "Ability") then
			combatHitChance = calculateHitChance(pStats["weaponSkill"]["MH"], pStats["hit"], eStats["defenseSkill"], pStats["level"], eStats["level"], dualWield, "Ability")
			combatAttackTable = generateAttackTable(pStats["level"],pStats["weaponSkill"]["MH"], pStats["defenseSkill"], combatHitChance, pStats["crit"], eStats["level"], eStats["weaponSkill"]["MH"], eStats["defenseSkill"], eStats["avoidance"], "Ability", false, parryEnabled, blockEnabled, playerIsMob, pStats["class"])
			combatAttackResult = getAttackResult(combatAttackTable, "Ability", pStats["crit"])
			if not(combatAttackResult == "miss" or combatAttackResult == "dodge" or combatAttackResult == "Evaded" or combatAttackResult == "parry") then
				combatDamageRolls = getRandomDamage(pStats["weaponSchools"]["MH"])
				if(combatAttackResult == "crit") then
					combatDamageMultiplier = 2.0
				elseif(combatAttackResult == "crushingBlow") then
					combatDamageMultiplier = 1.5
				else
					combatDamageMultiplier = 1.0
				end
				combatDamageReduction = calculateDamageReduction(pStats["level"], eStats["armor"], eStats["resistance"], eStats["level"])
				combatDamageDone = calculateDamage(combatDamageRolls, pStats["ap"], combatDamageReduction)
				if(combatAttackResult == "block") then
					combatBlockDamage = calculateBlock(combatDamageDone["phy"], eStats["attribute"]["str"], eStats["block"])
					combatDamageDone["phy"] = combatBlockDamage["dmg"]
				elseif(combatAttackResult == "critBlock") then
					combatBlockDamage = calculateBlock(combatDamageDone["phy"] * combatDamageMultiplier, eStats["attribute"]["str"], eStats["block"])
					combatDamageDone["phy"] = combatBlockDamage["dmg"]
				end
				for k, v in pairs(combatDamageDone) do
					combatResult = combatResult + v * combatDamageMultiplier
				end
				if(playerIsMob == false) then
					combatProcResult = calculateProcs(character, type, "weaponMH", combatAttackTable, pStats["crit"], combatDamageReduction, eStats["attribute"], eStats["block"], eStats["defenseSkill"])
					combatProcDamage = combatProcResult["damage"]
					combatProcBlocked = combatProcResult["blocked"]
				end
			end
		end
	elseif(source == "Ranged") then
		combatWeapon = "weaponRanged"
		if(type == "AutoAttack") then
			combatHitChance = calculateHitChance(pStats["weaponSkill"]["RANGED"], pStats["hit"], eStats["defenseSkill"], pStats["level"], eStats["level"], false, "Attack")
			combatAttackTable = generateAttackTable(pStats["level"],pStats["weaponSkill"]["RANGED"], pStats["defenseSkill"], combatHitChance, pStats["crit"], eStats["level"], eStats["weaponSkill"]["MH"], eStats["defenseSkill"], eStats["avoidance"], "Attack", true, parryEnabled, blockEnabled, playerIsMob, pStats["class"])
			combatAttackResult = getAttackResult(combatAttackTable, "Attack", pStats["crit"])
			if not(combatAttackResult == "miss" or combatAttackResult == "Evaded") then
				combatDamageRolls = getRandomDamage(pStats["weaponSchools"]["RANGED"])
				if(combatAttackResult == "crit") then
					combatDamageMultiplier = 2.0
				elseif(combatAttackResult == "crushingBlow") then
					combatDamageMultiplier = 1.5
				else
					combatDamageMultiplier = 1.0
				end
				combatDamageReduction = calculateDamageReduction(pStats["level"], eStats["armor"], eStats["resistance"], eStats["level"])
				combatDamageDone = calculateDamage(combatDamageRolls, pStats["rangedAp"], combatDamageReduction)
				for k, v in pairs(combatDamageDone) do
					combatResult = combatResult + v * combatDamageMultiplier
				end
				if(playerIsMob == false) then
					combatProcResult = calculateProcs(character, type, combatWeapon, combatAttackTable, pStats["crit"], combatDamageReduction, eStats["attribute"], eStats["block"], eStats["defenseSkill"])
					combatProcDamage = combatProcResult["damage"]
				end
			end
		elseif(type == "Ability") then
			combatHitChance = calculateHitChance(pStats["weaponSkill"]["RANGED"], pStats["hit"], eStats["defenseSkill"], pStats["level"], eStats["level"], false, "Ability")
			combatAttackTable = generateAttackTable(pStats["level"],pStats["weaponSkill"]["RANGED"], pStats["defenseSkill"], combatHitChance, pStats["crit"], eStats["level"], eStats["weaponSkill"]["RANGED"], eStats["defenseSkill"], eStats["avoidance"], "Ability", true, parryEnabled, blockEnabled, playerIsMob, pStats["class"])
			combatAttackResult = getAttackResult(combatAttackTable, "Ability", pStats["crit"])
			if not(combatAttackResult == "miss" or combatAttackResult == "Evaded") then
				combatDamageRolls = getRandomDamage(pStats["weaponSchools"]["RANGED"])
				if(combatAttackResult == "crit") then
					combatDamageMultiplier = 2.0
				elseif(combatAttackResult == "crushingBlow") then
					combatDamageMultiplier = 1.5
				else
					combatDamageMultiplier = 1.0
				end
				combatDamageReduction = calculateDamageReduction(pStats["level"], eStats["armor"], eStats["resistance"], eStats["level"])
				combatDamageDone = calculateDamage(combatDamageRolls, pStats["rangedAp"], combatDamageReduction)
				for k, v in pairs(combatDamageDone) do
					combatResult = combatResult + v * combatDamageMultiplier
				end
				if(playerIsMob == false) then
					combatProcResult = calculateProcs(character, type, combatWeapon, combatAttackTable, pStats["crit"], combatDamageReduction, eStats["attribute"], eStats["block"], eStats["defenseSkill"])
					combatProcDamage = combatProcResult["damage"]
				end
			end
		end
	elseif(source == "Spell") then
		combatWeapon = type
		combatHitChance = calculateHitChance(0, pStats["spellhit"], eStats["defenseSkill"], pStats["level"], eStats["level"], false, "Spell")
		combatAttackTable = generateAttackTable(pStats["level"],0, pStats["defenseSkill"], combatHitChance, pStats["spellcrit"], eStats["level"], 0, eStats["defenseSkill"], eStats["avoidance"], "Spell", true, parryEnabled, blockEnabled, playerIsMob, pStats["class"])
		combatAttackResult = getAttackResult(combatAttackTable, "Spell", pStats["sCrit"])
		if not(combatAttackResult == "miss" or combatAttackResult == "Evaded") then
			combatDamageRolls = getRandomDamage(pStats["weaponSchools"]["SPELL"])
			if(combatAttackResult == "crit") then
				combatDamageMultiplier = 1.5
			else
				combatDamageMultiplier = 1.0
			end
			combatDamageReduction = calculateDamageReduction(pStats["level"], eStats["armor"], eStats["resistance"], eStats["level"])
			combatDamageDone = calculateDamage(combatDamageRolls, pStats["spellpower"], combatDamageReduction)
			for k, v in pairs(combatDamageDone) do
				combatResult = combatResult + v * combatDamageMultiplier
			end
			if(playerIsMob == false) then
				combatProcResult = calculateProcs(character, type, source, combatAttackTable, pStats["spellcrit"], combatDamageReduction, eStats["attribute"], eStats["block"], eStats["defenseSkill"])
				combatProcDamage = combatProcResult["damage"]
			end
			--applySpellEffects(type, enemy, character)
		end
	end

	print("===================Combat Result")
	if(source ~= "Spell") then
		print("source: "..source.."["..type.."] from "..character.." with "..getCharacterWeaponName(character, combatWeapon).." against "..enemy)
	else
		print("source: "..source.."["..type.."] from "..character.." with "..getAbilityName(character, combatWeapon).." against "..enemy)
	end
	tprint(combatAttackTable)
	print("hit: "..combatHitChance)
	print("result: "..combatAttackResult.." ["..combatBlockDamage["blocked"].."/"..combatBlockDamage["dmg"].." blocked]")
	print("multiplier: "..combatDamageMultiplier..", reduction: "..combatDamageReduction["phy"])
	print("damage before mitigation: "..combatDamageRolls["phy"]..", after: "..combatResult)
	print("proc result: "..combatProcResult["damage"]["phy"].." ["..combatProcBlocked.." blocked]")
	print("===================")
	if(dualWield == true and secondAttack == false and source == "Melee" and type == "AutoAttack") then
		generateCombatResult(attacker, target, source, type, position, true)
	end
	return {hitChance= combatHitChance,
	attackTable = combatAttackTable,
	attackResult = combatAttackResult,
	damageRolls = combatDamageRolls,
	damageMult = combatDamageMultiplier,
	damageReduction = combatDamageReduction,
	damageDone = combatDamageDone,
	damageBlocked = combatBlockDamage,
	combatResult = combatResult,
	procResult = combatProcResult,
	procDamage = combatProcDamage,
	procBlocked = combatProcBlocked}
end

function calculateRegeneration(character, type)
	local pHp = getCharacterStat(character,"hpCurrent")
	local pHpMax = getCharacterStat(character,"hpMax")
	local pRes = getCharacterStat(character,"resCurrent")
	local pResMax = getCharacterStat(character,"resMax")
	local pHpRegen = getCharacterStat(character,"hpRegen")
	local pMpRegen = getCharacterStat(character,"mpRegen")

	local pClass = getCharacterStat(character, "class")
	local pRace = getCharacterStat(character, "race")

	local pBattle = getCharacterBattleStatus(character, "hitRecently")

	if(type == 2) then
		if(pBattle == 0) then
			applyHeal(character, math.min(pHpMax, pHp + pHpRegen))
			--characterData[character]["stats"]["hpCurrent"] = math.min(pHpMax, pHp + pHpRegen)
		elseif(pBattle >= 1 and pRace == "Troll") then
			applyHeal(character, math.min(pHpMax, pHp + (pHpRegen * 0.1)))
			--characterData[character]["stats"]["hpCurrent"] = math.min(pHpMax, pHp + (pHpRegen * 0.1))
		end
		if(pClass == "Rogue") then
			applyResource(character, math.min(pResMax, pRes + 20))
			--characterData[character]["stats"]["resCurrent"] = math.min(pResMax, pRes + 20)
		end
	elseif(type == 5) then
		if not(pClass == "Warrior" or pClass == "Rogue") then
			applyResource(character, math.min(pResMax, pRes + pMpRegen))
			--characterData[character]["stats"]["resCurrent"] = math.min(pResMax, pRes + pMpRegen)
		end
	end
end

function applyDamage(character, value)
	local pHp = getStat(character, "hpCurrent")

	setStat(character, "hpCurrent", math.max(0, pHp - value))
	setBattleStatus(character, "hitRecently", 5)
	
	print(character .. " was dealt "..value)
end

function applyHeal(character, value)
	--local pHp = getCharacterStat(character,"hpCurrent")
	local pHpMax = getStat(character,"hpMax")

	setStat(character, "hpCurrent", math.min(pHpMax, value))
end

function applyResource(character, value)
	local pResMax = getStat(character,"resMax")
	
	setStat(character, "resCurrent", math.min(pResMax, value))
end

function applyAuraEffects(character)
	--print(v["stats"]["hpCurrent"], v["stats"]["hpMax"])
	local pBuffs = getBuffs(character)
	local pDebuffs = getDebuffs(character)
	--tprint(pDebuffs)
	if not( pBuffs == nil) then
		for j,l in pairs(pBuffs) do
			aEffect = effect[tostring(l["id"])]
			local eCondition = getEffectCondition(tostring(l["id"]))
			local eType = getEffectType(tostring(l["id"]))
			local eStat = getEffectStat(tostring(l["id"]))
			local eValue = getEffectValue(tostring(l["id"]))
			local eName = getEffectName(tostring(l["id"]))
			local pBuffType = getBuffType(character, j)
			local pBuffDuration = getBuffDuration(character, j)
			local pBuffTick = getBuffTick(character, j)
			local pBuffStatus = getBuffStatus(character, j)
			local pBuffName = getBuffName(character, j)
			
			if(pBuffStatus == false) then
				setBuffStatus(character, j, true)
				if(eCondition == "Buff") then
					if(eType == "IncreaseStat") then
						local pStat = getStat(character, eStat)
						setStat(character, eStat, ( pStat + eValue))
						print("Buff "..eName.." on player "..character..": Increase "..eStat.." by "..eValue)
					end
				elseif(eCondition == "AuraBuff") then
					if(eType == "IncreaseStat") then
						local pStat = getStat(character, eStat)
						setStat(character, eStat, ( pStat + eValue))
						print("Buff Aura "..eName.." on player "..character..": Increase "..eStat.." by "..eValue)
					end
				end
			else
				if not(eCondition == "AuraBuff") then
					if(pBuffDuration <= 1) then
						if(eType == "IncreaseStat") then
							local pStat = getStat(character, eStat)
							setStat(character, eStat, math.max(0, ( pStat - eValue)))
							print("Buff gone "..eName.." on player "..character..": Removed "..eStat.." by "..eValue)
							setBuffStatus(character, j, 3)
						end
					end
				else
					if(pBuffStatus == 2) then
						if(eType == "IncreaseStat") then
							local pStat = getStat(character, eStat)
							setStat(character, eStat, math.max(0, ( pStat - eValue)))
							print("Buff Aura gone "..eName.." on player "..character..": Removed "..eStat.." by "..eValue)
							setBuffStatus(character, j, 3)
						end
					end
				end
			end
		end
	end
	if not( pDebuffs == nil) then
		for j,l in pairs(pDebuffs) do
			aEffect = effect[tostring(l["id"])]
			local eCondition = getEffectCondition(tostring(l["id"]))
			local eType = getEffectType(tostring(l["id"]))
			local eStat = getEffectStat(tostring(l["id"]))
			local eValue = getEffectValue(tostring(l["id"]))
			local eName = getEffectName(tostring(l["id"]))
			local eDuration = getEffectDuration(tostring(l["id"]))
			local eTick = getEffectTick(tostring(l["id"]))
			local pDebuffType = getDebuffType(character, j)
			local pDebuffDuration = getDebuffDuration(character, j)
			local pDebuffTick = getDebuffTick(character, j)
			local pDebuffStatus = getDebuffStatus(character, j)
			local pDebuffName = getDebuffName(character, j)
			local pDebuffSource = getDebuffSource(character, j)

			if(pDebuffStatus == false) then
				setDebuffStatus(character, j, true)
				if(eCondition == "Debuff") then
					if(eType == "DoT") then
						print("Debuff "..eName.." on player "..character..": "..eType.." "..eStat.." over "..eDuration.." for "..eTick)
					end
				elseif(eCondition == "AuraDebuff") then
					if(eType == "DecreaseStat") then
						local pStat = getStat(character, eStat)
						setStat(character, eStat, math.max(0, (pStat - eValue)))
						print("Debuff Aura "..eName.." on player "..character..": Decrease "..eStat.." by "..eValue)
					end
				end
			elseif not(pDebuffStatus == 3) then
				if not(eCondition == "AuraDebuff") then
					local enemyLevel = 0
					enemyLevel = getLevel(pDebuffSource)
					local pLevel = getLevel(character)
					local pArmor = getArmor(character)
					local pResist = getResistance(character)
					local eSchools = getEffectSchool(l["id"])
					if (pDebuffDuration >= (1 / pDebuffTick))then
						--print(characterData[k]["debuffs"][j]["duration"])
						if(eType == "DoT") then
							if not(pDebuffSource == "None") then
								
								dDmgReduction = calculateDamageReduction(enemyLevel, pArmor, pResist, pLevel)
								dDmg = getRandomDamage(eSchools)
								dDmgRaw = calculateDamage(dDmg, 0, dDmgReduction)
								dDmgDone = (dDmgRaw["phy"] + dDmgRaw["fire"] + dDmgRaw["frost"] + dDmgRaw["arcane"] + dDmgRaw["nature"] + dDmgRaw["holy"] + dDmgRaw["shadow"]) / eDuration
								applyDamage(character, dDmgDone)
							end
						end
					else
						if(eCondition == "Debuff") then
							if(eType == "DoT") then
								if not(pDebuffSource == "None") then
									dDmgReduction = calculateDamageReduction(enemyLevel, pArmor, pResist, pLevel)
									dDmg = getRandomDamage(eSchools)
									dDmgRaw = calculateDamage(dDmg, 0, dDmgReduction)
									dDmgDone = (dDmgRaw["phy"] + dDmgRaw["fire"] + dDmgRaw["frost"] + dDmgRaw["arcane"] + dDmgRaw["nature"] + dDmgRaw["holy"] + dDmgRaw["shadow"]) / eDuration
									applyDamage(character, dDmgDone)
									print("Debuff gone "..eName.." on player "..character..": "..eType.." "..eStat.." over "..eDuration.." every "..eTick)
									setDebuffStatus(character, j, 3)
								end
							end
						end
					end
				else
					if(pDebuffStatus == 2) then
						if(eType == "DecreaseStat") then
							local pStat = getStat(character, eStat)
							setStat(character, eStat, math.max(0, ( pStat + eValue)))
							print("Debuff Aura gone "..eName.." on player "..character..": Increased "..eStat.." by "..eValue)
							setDebuffStatus(character, j, 3)
						end
					end
				end
			end
		end
	end
end

function applySpellEffects(spell, target, source)
	--pAbility = ability[tostring(spell)]
	for i = 1, 3 do
		local aEffect = getAbilityEffect(spell)
		if not(aEffect[i] == 0) then
			local eCondition = getEffectCondition(aEffect[i])
			local eChance = getEffectChance(aEffect[i])
			--pEffect = effect[tostring(pAbility["effectId"][i])]
			if(eCondition == "Debuff") then
				local procChance = math.random()*100
				if(procChance <= eChance) then
					applyAura(target, tostring(aEffect[i]), source)
				end
			end
		end
	end
end

function calculateBaseStats(character)
	local pRace = getCharacterStat(character, "race")
	local pClass = getCharacterStat(character, "class")
	local pLevel = getCharacterStat(character,"level")

	local pBaseValues = getLevelStats(pLevel, pRace, pClass)

	setCharacterStat(character, "attr", pBaseValues["levelStats"])
	setCharacterStat(character, "basehp", pBaseValues["baseStats"]["basehp"])
	setCharacterStat(character, "baseRes", pBaseValues["baseStats"]["baseRes"])

end

function calculateGlancingBlowMult(pWpnSkill, eDefSkill)
	return math.max(0.40,1 - math.abs(math.min(0,5 + pWpnSkill - eDefSkill) * 0.03))
end

function calculateEquipmentStats(character)
	local pEquipmentStats = {rap=0,ap=0, armor=0, attr={str=0,agi=0,sta=0,int=0,spr=0},crit=0,hit=0, dodge=0, block=0, blockValue=0,parry=0, resist={fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}, skill={Defense=0}}
	local pSetPieces = {}
	local equipmentSlots = {"weaponMH","weaponOH","weaponRanged","head","necklace","shoulder","back","chest","wrists","hands","waist","legs","feet","ring1","ring2","trinket1","trinket2"}
	for i = 1, #equipmentSlots do
		pCurrentEquipment = getCharacterEquipmentSlot(character, equipmentSlots[i])
		if not (pCurrentEquipment["type"] == "None") then
			pEquipmentStats["armor"] = pEquipmentStats["armor"] + pCurrentEquipment["armor"]
			
			pEquipmentStats["attr"]["str"] = pEquipmentStats["attr"]["str"] + pCurrentEquipment["attr"]["str"]
			pEquipmentStats["attr"]["agi"] = pEquipmentStats["attr"]["agi"] + pCurrentEquipment["attr"]["agi"]
			pEquipmentStats["attr"]["sta"] = pEquipmentStats["attr"]["sta"] + pCurrentEquipment["attr"]["sta"]
			pEquipmentStats["attr"]["int"] = pEquipmentStats["attr"]["int"] + pCurrentEquipment["attr"]["int"]
			pEquipmentStats["attr"]["spr"] = pEquipmentStats["attr"]["spr"] + pCurrentEquipment["attr"]["spr"]
			pEquipmentStats["resist"]["fire"] = pEquipmentStats["resist"]["fire"] + pCurrentEquipment["resist"]["fire"]
			pEquipmentStats["resist"]["shadow"] = pEquipmentStats["resist"]["shadow"] + pCurrentEquipment["resist"]["shadow"]
			pEquipmentStats["resist"]["frost"] = pEquipmentStats["resist"]["frost"] + pCurrentEquipment["resist"]["frost"]
			pEquipmentStats["resist"]["arcane"] = pEquipmentStats["resist"]["arcane"] + pCurrentEquipment["resist"]["arcane"]
			pEquipmentStats["resist"]["nature"] = pEquipmentStats["resist"]["nature"] + pCurrentEquipment["resist"]["nature"]
			pEquipmentStats["resist"]["holy"] = pEquipmentStats["resist"]["holy"] + pCurrentEquipment["resist"]["holy"]
			for k = 1, 3 do
				if not(pCurrentEquipment["effectId"][k] == 0) then
					local eqEffect = effect[tostring(pCurrentEquipment["effectId"][k])]
					local eqStat = tostring(eqEffect["stat"])
					if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
						pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
					elseif(eqEffect["type"] == "IncreaseSkill" and eqEffect["condition"] == "Equip") then
						pEquipmentStats["skill"][eqStat] = pEquipmentStats["skill"][eqStat] + eqEffect["value"]
					end	
				end
			end
			if not(pCurrentEquipment["setid"] == 0 or pCurrentEquipment["setid"] == nil) then
				local eqSet = set[tostring(pCurrentEquipment["setid"])]
				if(pSetPieces[pCurrentEquipment["setid"]] == nil) then
					table.insert(pSetPieces, pCurrentEquipment["setid"], 1)
				end
				pSetPieces[pCurrentEquipment["setid"]] = pSetPieces[pCurrentEquipment["setid"]] + 1
				for k, v in pairs(eqSet["bonus"]) do
					if(pSetPieces[pCurrentEquipment["setid"]] == tonumber(k)) then
						local eqEffect = effect[tostring(v)]
						local eqStat = tostring(eqEffect["stat"])
						if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
							pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
						end
					end
				end
			end
		end
	end
	
	local pAttr = getCharacterStat(character, "attr")
	pAttr["str"] = pAttr["str"] + pEquipmentStats["attr"]["str"]
	pAttr["agi"] = pAttr["agi"] + pEquipmentStats["attr"]["agi"]
	pAttr["sta"] = pAttr["sta"] + pEquipmentStats["attr"]["sta"]
	pAttr["int"] = pAttr["int"] + pEquipmentStats["attr"]["int"]
	pAttr["spr"] = pAttr["spr"] + pEquipmentStats["attr"]["spr"]
	setCharacterStat(character, "attr", pAttr)

	local pCrit = getCharacterStat(character, "crit")
	pCrit = pCrit + pEquipmentStats["crit"]
	setCharacterStat(character, "crit", pCrit)

	local pHit = getCharacterStat(character, "hit")
	pHit = pHit + pEquipmentStats["hit"]
	setCharacterStat(character, "hit", pHit)

	local pAp = getCharacterStat(character, "ap")
	local pRap = getCharacterStat(character, "rAp")
	pAp = pAp + pEquipmentStats["ap"]
	pRap = pRap + pEquipmentStats["ap"] + pEquipmentStats["rap"]
	setCharacterStat(character, "ap", pAp)
	setCharacterStat(character, "rAp", pRap)

	local pResist = getCharacterStat(character, "resist")
	pResist["fire"] = pResist["fire"] + pEquipmentStats["resist"]["fire"]
	pResist["frost"] = pResist["frost"] + pEquipmentStats["resist"]["frost"]
	pResist["nature"] = pResist["nature"] + pEquipmentStats["resist"]["nature"]
	pResist["arcane"] = pResist["arcane"] + pEquipmentStats["resist"]["arcane"]
	pResist["holy"] = pResist["holy"] + pEquipmentStats["resist"]["holy"]
	pResist["shadow"] = pResist["shadow"] + pEquipmentStats["resist"]["shadow"]
	setCharacterStat(character, "resist", pResist)

	local pSkill = getCharacterStat(character, "skill")
	pSkill["Defense"] = pSkill["Defense"] + pEquipmentStats["skill"]["Defense"]
	setCharacterStat(character, "skill", pSkill)

	local pArmor = getCharacterStat(character, "armor")
	pArmor = pArmor + pEquipmentStats["armor"]
	setCharacterStat(character, "armor", pArmor)

	local pAvoidance = getCharacterStat(character, "avoidance")
	pAvoidance["block"] = pAvoidance["block"] + pEquipmentStats["block"]
	pAvoidance["dodge"] = pAvoidance["dodge"] + pEquipmentStats["dodge"]
	pAvoidance["parry"] = pAvoidance["parry"] + pEquipmentStats["parry"]
	setCharacterStat(character, "avoidance", pAvoidance)
	
	--tprint(pEquipmentStats)
	local pBlockValue = getCharacterEquipmentValue(character, "weaponOH", "blockValue")
	pBlockValue = pBlockValue + pEquipmentStats["blockValue"]
	setCharacterEquipmentValue(character, "weaponOH", "blockValue", pBlockValue)
end

function calculateCombatStats(character)
	local pClass = getCharacterStat(character, "class")
	local pAttr = getCharacterStat(character, "attr")
	local pAvoidance = getCharacterStat(character, "avoidance")
	local pBaseAp = getCharacterStat(character, "baseAp")
	local pBaseRAp = getCharacterStat(character, "baseRAp")
	
	-- Strength
	if(pClass == "Warrior" or pClass == "Shaman" or pClass == "Paladin" or pClass == "Druid") then
		pBaseAp = 2 * pAttr["str"]
	else
		pBaseAp = 1 * pAttr["str"]
	end
	-- Agility
		-- Melee Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Druid") then
		pBaseAp = pBaseAp + 1 * pAttr["agi"]
		
	end
		-- Range Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Hunter") then
		pBaseRAp = pBaseRAp + 1 * pAttr["agi"]
	end
	setCharacterStat(character, "baseAp", pBaseAp)
	setCharacterStat(character, "baseRAp", pBaseRAp)
	local pAp = getCharacterStat(character, "ap")
	setCharacterStat(character, "ap", (pAp + pBaseAp))
	setCharacterStat(character, "rAp", (pAp + pBaseRAp))

	local pBaseCrit = getCharacterStat(character, "baseCrit")
		-- Crit
	if(pClass == "Warrior" or pClass == "Paladin" or pClass == "Shaman" or pClass == "Warlock") then
		pBaseCrit = 1 * ( pAttr["agi"] / 20)
	elseif(pClass == "Rogue") then
		pBaseCrit = 1 * ( pAttr["agi"] / 29)
	elseif(pClass == "Hunter") then
		pBaseCrit = 1 * ( pAttr["agi"] / 53)
	end
	setCharacterStat(character, "baseCrit", pBaseCrit)
	local pCrit = getCharacterStat(character, "crit")
	setCharacterStat(character, "crit", (pBaseCrit + pCrit))
	
		-- Dodge
	if(pClass == "Rogue") then
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 14.5)
	elseif(pClass == "Hunter") then
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 26)
	else
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 20)
	end
	setCharacterStat(character, "avoidance", pAvoidance)

	local pBaseArmor = getCharacterStat(character, "baseArmor")
		-- Armor
	pBaseArmor = 2 * pAttr["agi"]
	local pArmor = getCharacterStat(character, "armor")
	setCharacterStat(character, "armor", (pBaseArmor + pArmor))

	-- Stamina
		-- HP
	local pRace = getCharacterStat(character, "race")
	local pMaxHp = getCharacterStat(character, "hpMax")
	local pBaseHp = getCharacterStat(character, "basehp")
	if(pRace == "Tauren") then
		pMaxHp = pBaseHp + math.min(pAttr["sta"], 20) + 10.5 * math.max(0, (pAttr["sta"]-20))
	else
		pMaxHp = pBaseHp + math.min(pAttr["sta"], 20) + 10 * math.max(0, (pAttr["sta"]-20))
	end
	setCharacterStat(character, "hpMax", pMaxHp)

	-- Intelligence
		-- Mana
	local pMaxRes = getCharacterStat(character, "resMax")
	local pBaseRes = getCharacterStat(character, "baseRes")
	if not(pClass == "Warrior" or pClass == "Rogue") then
		pMaxRes = pBaseRes + 15 * pAttr["int"]
	end
	setCharacterStat(character, "resMax", pMaxRes)
		-- Spellcrit
	local pBaseSCrit = getCharacterStat(character, "baseSCrit")
	local pSCrit = getCharacterStat(character, "sCrit")
	if (pClass == "Paladin") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 54)
	elseif (pClass == "Shaman") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 59.2)
	elseif (pClass == "Mage" or pClass == "Priest") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 59.5)
	elseif (pClass == "Druid") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 60)
	elseif (pClass == "Warlock") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 60.6)
	end
	setCharacterStat(character, "sCrit", pSCrit)

	-- Spirit
		-- HP & MP regeneration
	local pHpRegen = getCharacterStat(character, "hpRegen")
	local pMpRegen = getCharacterStat(character, "mpRegen")
	if(pClass == "Druid") then
		pHpRegen = (pAttr["spr"] * 0.09) + 6.5
		pMpRegen = (pAttr["spr"] / 4.5) + 15
	elseif(pClass == "Paladin" or pClass == "Hunter") then
		pHpRegen = (pAttr["spr"] * 0.25) + 6
		pMpRegen = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Warlock") then
		pHpRegen = (pAttr["spr"] * 0.07) + 6
		pMpRegen = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Shaman") then
		pHpRegen = (pAttr["spr"] * 0.11) + 7
		pMpRegen = (pAttr["spr"] / 5) + 17
	elseif(pClass == "Mage" or pClass == "Priest") then
		pHpRegen = (pAttr["spr"] * 0.1) + 5
		pMpRegen = (pAttr["spr"] / 4) + 12.5
	elseif(pClass == "Warrior") then
		pHpRegen = (pAttr["spr"] * 0.8) + 6
	elseif(pClass == "Rogue") then
		pHpRegen = (pAttr["spr"] * 0.5) + 2
	end
	setCharacterStat(character, "hpRegen", pHpRegen)
	setCharacterStat(character, "mpRegen", pMpRegen)
end

function calculateRacials(character)
	local pRace = getCharacterStat(character, "race")
	local pAttr = getCharacterStat(character, "attr")
	local pSkill = getCharacterStat(character, "skill")
	local pResistance = getCharacterStat(character, "resist")
	local pProfession = getCharacterStat(character, "profession")
	local pAvoidance = getCharacterStat(character, "avoidance")
	local pHpRegen = getCharacterStat(character, "hpRegen")
	if(pRace == "Human") then
		pAttr["spr"] = math.floor(pAttr["spr"] + pAttr["spr"] * 0.05)
		pSkill["OneHandedSword"] = pSkill["OneHandedSword"] + 5
		pSkill["OneHandedMace"] = pSkill["OneHandedMace"] + 5
		pSkill["TwoHandedSword"] = pSkill["TwoHandedSword"] + 5
		pSkill["TwoHandedMace"] = pSkill["TwoHandedMace"] + 5
	elseif(pRace == "Dwarf") then
		pResistance["frost"] = pResistance["frost"] + 10
		pSkill["Gun"]["Gun"] = pSkill["Gun"] + 5
	elseif(pRace == "Gnome") then
		pResistance["arcane"] = pResistance["arcane"] + 10
		pProfession["engineering"] = pProfession["engineering"] + 15
		pAttr["int"] = math.floor(pAttr["int"] + pAttr["int"] * 0.05)
	elseif(pRace == "Nightelf") then
		pResistance["nature"] = pResistance["nature"] + 10
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1
	elseif(pRace == "Orc") then
		pSkill["OneHandedAxe"] = pSkill["OneHandedAxe"] + 5
		pSkill["TwoHandedAxe"] = pSkill["TwoHandedAxe"] + 5
	elseif(pRace == "Tauren") then
		pResistance["nature"] = pResistance["nature"] + 10
		pProfession["herbalism"] = pProfession["herbalism"] + 15
	elseif(pRace == "Undead") then
		pResistance["shadow"] = pResistance["shadow"] + 10
	elseif(pRace == "Troll") then
		pSkill["Throwing"] = pSkill["Throwing"] + 5
		pSkill["Bow"] = pSkill["Bow"] + 5
		pHpRegen = pHpRegen + pHpRegen * 0.10
	end
	setCharacterStat(character, "attr", pAttr)
	setCharacterStat(character, "skill", pSkill)
	setCharacterStat(character, "resist", pResistance)
	setCharacterStat(character, "profession", pProfession)
	setCharacterStat(character, "avoidance", pAvoidance)
	setCharacterStat(character, "hpRegen", pHpRegen)
end

function calculateHitChance(pWpnSkill, pHitBonus, eDefSkill, pLevel, eLevel, dualWield, special)
	local rHitChance = 100
	local baseMiss = 5
	if not(special == "Spell") then
		if (special == "Attack") then
			local baseMissP = math.max(0,baseMiss - (eDefSkill - pWpnSkill) * 0.04)
			local baseMissE = math.max(0,baseMiss + (pWpnSkill - eDefSkill) * 0.02)
			baseMiss = (baseMissP + baseMissE) / 2
		end
		if(dualWield == true and special == "Attack") then
			baseMiss = baseMiss + 19
		end
		if(eDefSkill - pWpnSkill > 10) then
			rHitChance = math.max(0,100 - ((baseMiss + 2) + (eDefSkill - pWpnSkill - 10) * 0.4) + pHitBonus)
		else
			rHitChance = math.max(0,100 - (baseMiss + (eDefSkill - pWpnSkill) * 0.1) + pHitBonus)
		end
	else
		rHitChance = 99
		baseMiss = 1
		if(pLevel == eLevel) then
			baseMiss = baseMiss + 3
		elseif(pLevel == (eLevel - 1)) then
			baseMiss = baseMiss + 4
		elseif(pLevel == (eLevel - 2)) then
			baseMiss = baseMiss + 5
		elseif(pLevel <= (eLevel - 3)) then
			baseMiss = baseMiss + 5 + 11 * (eLevel - pLevel - 2)
		end
		rHitChance = math.max(1, math.min(99,rHitChance - baseMiss + pHitBonus))
	end
	--print(rHitChance)
	return rHitChance
end

function calculateProcs(character, source, pWeapon, pAttackTable, pCrit, eDmgReduction, eAttr, eBlockValue, eDefSkill)
	local eqChance = {"weaponMH","weaponOH","weaponRanged","trinket1","trinket2"}
	local procDamage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local procs = {}
	local blockDamage = 0
	for i = 1, #eqChance do
		for k = 1, 3 do
			local pEquipmentStats = getCharacterEquipmentValue(character, eqChance[i], "effectId")
			if not(pEquipmentStats[k] == 0) then
				local eType = getEffectType(pEquipmentStats[k])
				local eChance = getEffectChance(pEquipmentStats[k])
				local eCondition = getEffectCondition(pEquipmentStats[k])
				local eSchools = getEffectSchool(pEquipmentStats[k])
				local eStat = getEffectStat(pEquipmentStats[k])
				local eValue = getEffectValue(pEquipmentStats[k])
				local eName = getEffectName(pEquipmentStats[k])
				--print(eName)
				if((eqChance[i] == "trinket1" or eqChance[i] == "trinket2") or eqChance[i] == pWeapon) then
					--print(eqChance[i],eqEffect["stat"],eqEffect["condition"])
					--print(eCondition,source,eType,eStat)
					if(eCondition == "OnHitAttack" and source == "AutoAttack") then
						if(eType == "DirectDamage") then
							local procChance = math.random()*100
							if(procChance <= eChance) then
								local critChance = math.random()*100
								local phyMult = 1
								local eleMult = 1
								if(critChance <= pCrit) then
									phyMult = 2
									eleMult = 1.5
								end
								table.insert(procs, #procs, {source=eName,id=tostring(pEquipmentStats[k]),schools=eSchools, phyMult=phyMult,eleMult=eleMult,blocked=0,ap=0})
							end
						elseif(eType == "ExtraAttack") then
							if(eStat == "Melee" and not (pWeapon == "weaponRanged") and not (pWeapon == "Spell")) then 
								local procChance = math.random()*100
								if(procChance <= eChance) then
									for runs = 1, eValue do
										local pExtraHit = 0
										pExtraHit = getAttackResult(pAttackTable, false, pCrit)
										if not(pExtraHit == "miss" or pExtraHit == "dodge" or pExtraHit == "parry") then
											local pWeaponSchools = getCharacterEquipmentValue(character, pWeapon, "schools")
											local pWeaponType = getCharacterEquipmentValue(character, pWeapon, "type")
											local pSkill = getCharacterStat(character, "skill")
											local pAp = getCharacterStat(character, "ap")
											local pExtraHitDamage = {min=pWeaponSchools["phy"]["min"],max=pWeaponSchools["phy"]["max"],blocked=0}
											local pExtraHitMult = 1
											if(pExtraHit == "crit") then
												pExtraHitMult = 2
											elseif(pExtraHit == "glancingBlow") then
												pExtraHitMult = calculateGlancingBlowMult(pSkill[pWeaponType], eDefSkill)
											elseif(pExtraHit == "block") then
												local blockDamageMin = calculateBlock(pExtraHitDamage["min"], eAttr["str"], eBlockValue)
												local blockDamageMax = calculateBlock(pExtraHitDamage["max"], eAttr["str"], eBlockValue)
												pExtraHitDamage["min"] = blockDamageMin["dmg"]
												pExtraHitDamage["max"] = blockDamageMax["dmg"]
												pExtraHitDamage["blocked"] = (blockDamageMin["blocked"] + blockDamageMax["blocked"]) / 2 
											end
											table.insert(procs, #procs, {source=eName,id=tostring(pEquipmentStats[k]),ap=pAp,schools={phy={min=pExtraHitDamage["min"],max=pExtraHitDamage["max"]},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},phyMult=pExtraHitMult,eleMult=1,blocked=pExtraHitDamage["blocked"]})
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	for k, v in pairs(procs) do
		local proc = getRandomDamage(procs[k]["schools"])
		for j, l in pairs(proc) do
			if(j == "phy") then
				l = l * procs[k]["phyMult"]
			else
				l = l * procs[k]["eleMult"]
			end
		end
		local procDamageSchools = calculateDamage(proc, procs[k]["ap"], eDmgReduction)
		--tprint(proc)
		print(procs[k]["source"].."["..procs[k]["id"].."] proc with "..procDamageSchools["phy"].."["..procDamage["phy"].."] phy ("..procs[k]["blocked"].." blocked) and +"..procs[k]["ap"].."ap")
		procDamage["phy"] = procDamage["phy"] + procDamageSchools["phy"]
		procDamage["fire"] = procDamage["fire"] + procDamageSchools["fire"]
		procDamage["frost"] = procDamage["frost"] + procDamageSchools["frost"]
		procDamage["arcane"] = procDamage["arcane"] + procDamageSchools["arcane"]
		procDamage["nature"] = procDamage["nature"] + procDamageSchools["nature"]
		procDamage["shadow"] = procDamage["shadow"] + procDamageSchools["shadow"]
		procDamage["holy"] = procDamage["holy"] + procDamageSchools["holy"]
		blockDamage = blockDamage + procs[k]["blocked"]
	end
	return {damage=procDamage,blocked=blockDamage}
end

function generateAttackTable(pLevel, pWpnSkill, pDefSkill, pHitChance, pCritChance, eLevel, eWpnSkill, eDefSkill, eAvoidance, special, ranged, parryEnabled, blockEnabled, playerIsMob, pClass)
	local rollTable = {miss=0,dodge=0,parry=0,glancingBlow=0,block=0,crushingBlow=0,crit=0,hit=0}
	local pSkillDifference = math.min(eDefSkill - pWpnSkill,300)
	if(special == "Ability") then
		rollTable = {miss=0,dodge=0,parry=0,block=0,hit=0}
	elseif(special == "Spell") then
		rollTable = {miss=0,crit=0,hit=0}
	end
	local remainingRolls = math.max(0, pHitChance)
	local tempVar = 100
	rollTable["miss"] = math.max(0, tempVar - remainingRolls)
	tempVar = remainingRolls
	if(ranged == false and not (special == "Spell")) then
		local eDodge = eAvoidance["dodge"]
		eDodge = math.max(0, eAvoidance["dodge"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eDodge)
		rollTable["dodge"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(parryEnabled == true and ranged == false and not (special == "Spell")) then
		local eParry = eAvoidance["parry"]
		eParry = math.max(0, eAvoidance["parry"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eParry)
		rollTable["parry"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(playerIsMob == false and special == "Attack" and ranged == false) then 
		if(pClass == "Mage" or pClass == "Priest" or pClass == "Warlock") then
			if(pLevel > 30) then
				remainingRolls = math.max(0, remainingRolls - 60)
			else
				remainingRolls = math.max(0, remainingRolls - (pLevel - 10) * 3)
			end
		else
			remainingRolls = math.max(0, remainingRolls - math.max(0, 10 + (eDefSkill - math.min(pWpnSkill, 300)) * 2))
		end
		rollTable["glancingBlow"] = (tempVar - remainingRolls)
		tempVar = remainingRolls
	end
	if(blockEnabled == true and not (special == "Spell") and ranged == false) then
		local eBlock = eAvoidance["block"]
		eBlock = math.max(0, eAvoidance["block"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eBlock)
		rollTable["block"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(remainingRolls > 0) then
		if(special == "Attack") then
			pCritChance = math.max(0, pCritChance - pSkillDifference * 0.04)
			remainingRolls = math.max(0, remainingRolls - ((pHitChance + rollTable["miss"]) * (pCritChance/100))) 
			rollTable["crit"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		if(playerIsMob == true and (pLevel - eLevel >= 3) and special == "Attack") then
			remainingRolls = math.max(0, remainingRolls - (((pWpnSkill - math.min(eDefSkill,300)) * 2) - 15))
			rollTable["crushingBlow"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		rollTable["hit"] = math.max(0, remainingRolls)
	end
	return rollTable
end

function getAttackResult(attackTable, special, pCrit)
	local rngRanges = math.random()*100
	local critRng = math.random()*100
	local weight = 0
	local critWeight = 0
	local result = "Evaded"
	local tableOrder = {"miss","dodge","parry","glancingBlow","block","crit","crushingBlow","hit"}
	if(special == "Ability") then
		tableOrder = {"miss","dodge","parry","block","hit"}
	elseif(special == "Spell") then
		tableOrder = {"miss","crit","hit"}
	end
	for i = 1, #tableOrder do
		weight = weight + attackTable[tableOrder[i]]
		if(rngRanges <= weight) then
			result = tableOrder[i]
			if(tableOrder[i] == "block" and special == "Ability") then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "critBlock"
				end
			elseif(tableOrder[i] == "hit" and special == "Ability") then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "crit"
				end
			end
			return result
		end
	end
end

function calculateDamage(pDmgSchools, pAp, pDmgReduction)
	local pDmgDone = {phy=(pAp / 14),fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pDmgSchools["phy"] > 0) then
		pDmgDone["phy"] = (pDmgDone["phy"] + pDmgSchools["phy"]) * (1-pDmgReduction["phy"])
	else
		pDmgDone["phy"] = pDmgSchools["phy"] * (1-pDmgReduction["phy"])
	end
	pDmgDone["phy"] = math.floor(0.5 + pDmgDone["phy"] ) 
	
	local resistanceTable = {
		{["0"]=100,["25"]=0,["50"]=0,["75"]=0,["100"]=0},
		{["0"]=97,["25"]=2,["50"]=1,["75"]=0,["100"]=0},
		{["0"]=94,["25"]=4,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=90,["25"]=8,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=87,["25"]=10,["50"]=3,["75"]=0,["100"]=0},
		{["0"]=84,["25"]=12,["50"]=4,["75"]=0,["100"]=0}, --5%
		{["0"]=82,["25"]=13,["50"]=4,["75"]=1,["100"]=0},
		{["0"]=79,["25"]=15,["50"]=5,["75"]=1,["100"]=0},
		{["0"]=76,["25"]=17,["50"]=6,["75"]=1,["100"]=0},
		{["0"]=73,["25"]=19,["50"]=7,["75"]=1,["100"]=0},
		{["0"]=69,["25"]=23,["50"]=7,["75"]=1,["100"]=0}, --10%
		{["0"]=66,["25"]=25,["50"]=8,["75"]=1,["100"]=0},
		{["0"]=63,["25"]=27,["50"]=9,["75"]=1,["100"]=0},
		{["0"]=60,["25"]=29,["50"]=10,["75"]=1,["100"]=0},
		{["0"]=58,["25"]=30,["50"]=10,["75"]=2,["100"]=0},
		{["0"]=54,["25"]=33,["50"]=11,["75"]=2,["100"]=0}, --15%
		{["0"]=51,["25"]=36,["50"]=11,["75"]=2,["100"]=0},
		{["0"]=48,["25"]=38,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=44,["25"]=42,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=41,["25"]=44,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=37,["25"]=48,["50"]=13,["75"]=2,["100"]=0}, --20%
		{["0"]=34,["25"]=50,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=31,["25"]=52,["50"]=14,["75"]=2,["100"]=0},
		{["0"]=30,["25"]=52,["50"]=15,["75"]=2,["100"]=1},
		{["0"]=28,["25"]=53,["50"]=15,["75"]=3,["100"]=1},
		{["0"]=25,["25"]=55,["50"]=16,["75"]=3,["100"]=1}, --25%
		{["0"]=24,["25"]=54,["50"]=17,["75"]=4,["100"]=1},
		{["0"]=23,["25"]=53,["50"]=18,["75"]=5,["100"]=1},
		{["0"]=22,["25"]=51,["50"]=21,["75"]=5,["100"]=1},
		{["0"]=21,["25"]=50,["50"]=22,["75"]=6,["100"]=1},
		{["0"]=20,["25"]=49,["50"]=24,["75"]=6,["100"]=1}, --30%
		{["0"]=19,["25"]=47,["50"]=26,["75"]=7,["100"]=1},
		{["0"]=18,["25"]=46,["50"]=27,["75"]=8,["100"]=1},
		{["0"]=17,["25"]=44,["50"]=30,["75"]=8,["100"]=1},
		{["0"]=16,["25"]=43,["50"]=31,["75"]=9,["100"]=1},
		{["0"]=15,["25"]=42,["50"]=32,["75"]=10,["100"]=1}, --35%
		{["0"]=14,["25"]=41,["50"]=33,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=39,["50"]=36,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=36,["50"]=38,["75"]=12,["100"]=1},
		{["0"]=12,["25"]=35,["50"]=39,["75"]=13,["100"]=1},
		{["0"]=11,["25"]=34,["50"]=40,["75"]=14,["100"]=1}, --40%
		{["0"]=10,["25"]=33,["50"]=41,["75"]=15,["100"]=1},
		{["0"]=9,["25"]=31,["50"]=44,["75"]=15,["100"]=1},
		{["0"]=8,["25"]=30,["50"]=45,["75"]=16,["100"]=1},
		{["0"]=8,["25"]=27,["50"]=47,["75"]=17,["100"]=1},
		{["0"]=7,["25"]=26,["50"]=48,["75"]=18,["100"]=1}, --45%
		{["0"]=6,["25"]=25,["50"]=49,["75"]=19,["100"]=1},
		{["0"]=6,["25"]=23,["50"]=50,["75"]=19,["100"]=2},
		{["0"]=5,["25"]=22,["50"]=51,["75"]=20,["100"]=2},
		{["0"]=3,["25"]=22,["50"]=53,["75"]=20,["100"]=2},
		{["0"]=2,["25"]=21,["50"]=54,["75"]=21,["100"]=2}, -- 50%
		{["0"]=2,["25"]=20,["50"]=53,["75"]=22,["100"]=3},
		{["0"]=2,["25"]=20,["50"]=51,["75"]=22,["100"]=5},
		{["0"]=2,["25"]=19,["50"]=50,["75"]=23,["100"]=6},
		{["0"]=1,["25"]=19,["50"]=49,["75"]=25,["100"]=6},
		{["0"]=1,["25"]=18,["50"]=48,["75"]=26,["100"]=7}, -- 55%
		{["0"]=1,["25"]=17,["50"]=47,["75"]=27,["100"]=8},
		{["0"]=1,["25"]=16,["50"]=45,["75"]=30,["100"]=8},
		{["0"]=1,["25"]=15,["50"]=44,["75"]=31,["100"]=9},
		{["0"]=1,["25"]=15,["50"]=41,["75"]=33,["100"]=10},
		{["0"]=1,["25"]=14,["50"]=40,["75"]=34,["100"]=11}, --60%
		{["0"]=1,["25"]=13,["50"]=39,["75"]=35,["100"]=12},
		{["0"]=1,["25"]=12,["50"]=38,["75"]=36,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=36,["75"]=39,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=33,["75"]=41,["100"]=14},
		{["0"]=1,["25"]=10,["50"]=32,["75"]=42,["100"]=15}, --65%
		{["0"]=1,["25"]=9,["50"]=31,["75"]=43,["100"]=16},
		{["0"]=1,["25"]=8,["50"]=30,["75"]=44,["100"]=17},
		{["0"]=1,["25"]=8,["50"]=27,["75"]=46,["100"]=18},
		{["0"]=1,["25"]=7,["50"]=26,["75"]=47,["100"]=19},
		{["0"]=1,["25"]=6,["50"]=24,["75"]=49,["100"]=20}, --70%
		{["0"]=1,["25"]=6,["50"]=22,["75"]=50,["100"]=21},
		{["0"]=1,["25"]=5,["50"]=21,["75"]=51,["100"]=22},
		{["0"]=1,["25"]=5,["50"]=18,["75"]=53,["100"]=23},
		{["0"]=1,["25"]=4,["50"]=17,["75"]=54,["100"]=24},
		{["0"]=1,["25"]=3,["50"]=16,["75"]=55,["100"]=25}, --75%
		-- Normal cap 
		{["0"]=1,["25"]=3,["50"]=15,["75"]=53,["100"]=28},
		{["0"]=1,["25"]=2,["50"]=15,["75"]=52,["100"]=30},
		{["0"]=0,["25"]=2,["50"]=15,["75"]=52,["100"]=31},
		{["0"]=0,["25"]=2,["50"]=14,["75"]=50,["100"]=34},
		{["0"]=0,["25"]=2,["50"]=13,["75"]=48,["100"]=37}, --80%
		{["0"]=0,["25"]=2,["50"]=13,["75"]=44,["100"]=41},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=42,["100"]=44},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=38,["100"]=48},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=36,["100"]=51},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=33,["100"]=54}, --85%
		{["0"]=0,["25"]=2,["50"]=10,["75"]=30,["100"]=58},
		{["0"]=0,["25"]=1,["50"]=10,["75"]=29,["100"]=60},
		{["0"]=0,["25"]=1,["50"]=9,["75"]=27,["100"]=63},
		{["0"]=0,["25"]=1,["50"]=8,["75"]=25,["100"]=66},
		{["0"]=0,["25"]=1,["50"]=7,["75"]=23,["100"]=69}, --90%
		{["0"]=0,["25"]=1,["50"]=7,["75"]=19,["100"]=73},
		{["0"]=0,["25"]=1,["50"]=6,["75"]=17,["100"]=76},
		{["0"]=0,["25"]=1,["50"]=5,["75"]=15,["100"]=79},
		{["0"]=0,["25"]=1,["50"]=4,["75"]=13,["100"]=82},
		{["0"]=0,["25"]=0,["50"]=4,["75"]=12,["100"]=84}, --95%
		{["0"]=0,["25"]=0,["50"]=3,["75"]=10,["100"]=87},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=8,["100"]=90},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=4,["100"]=94},
		{["0"]=0,["25"]=0,["50"]=1,["75"]=2,["100"]=97},
		{["0"]=0,["25"]=0,["50"]=0,["75"]=0,["100"]=100} --100%
	}
		
	local elementOrder = {"fire","frost","arcane","nature","shadow","holy"}
	local elemRange = 0
	local elemAbsorb = 1
	local weight = 0
	for i = 1, #elementOrder do
		elemRange = math.random()*100
		weight = 0
		if(pDmgReduction[elementOrder[i]] == 1) then
			goto continue
		end
		if(pDmgReduction[elementOrder[i]] > 1) then
			elemAbsorb = -pDmgReduction[elementOrder[i]]
			pDmgReduction[elementOrder[i]] = 0
		end
		elemResist = math.floor(pDmgReduction[elementOrder[i]] * 100) + 1
		resistOrder = {"0","25","50","75","100"}
		for k = 1, #resistOrder do
			weight = weight + resistanceTable[elemResist][resistOrder[k]]
			if elemRange <= weight then
				pDmgDone[elementOrder[i]] = (pDmgSchools[elementOrder[i]] - (pDmgSchools[elementOrder[i]] * (tonumber(resistOrder[k]) / 100))) * elemAbsorb
				break
			end
		end
		::continue::
	end
	
	return pDmgDone
end

function calculateDamageReduction(pLevel, eArmor, eRes, eLevel)
	local reductionPercentage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pLevel < 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * eLevel), 0.75)
	elseif(pLevel >= 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * ( eLevel + 4.5 * ( eLevel - 60))) , 0.75)
	end
	local schools = {"fire","frost","arcane","holy","shadow","nature"}
	for i = 1, (#schools)-1 do
		if(eRes[schools[i]] >= 9999) then
			reductionPercentage[schools[i]] = 1
		elseif(eRes[schools[i]] >= 1000 and eRes[schools[i]] < 9999) then
			reductionPercentage[schools[i]] = eRes[schools[i]] / 1000
		else
			reductionPercentage[schools[i]] = math.min(0.75,(eRes[schools[i]] / (pLevel * 5)) * 0.75)
		end
	end
	return reductionPercentage
end

function calculateBlock(pDmg, eAttr, eBlockValue)
	local blockedDmg = math.max(0, pDmg - (eBlockValue + eAttr / 2))
	return {dmg=blockedDmg, blocked=math.min(pDmg, eBlockValue + eAttr / 2)}
end


function getRandomDamage(source)
	local damage={phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local schools = {"phy","fire","frost","arcane","holy","shadow","nature"}
	for i = 1, #schools do
		damage[schools[i]] = math.random(source[schools[i]]["min"] , source[schools[i]]["max"])
	end
	return damage
end

function addBuff(character, buff)
	if (isPlayer(character))then
		return addCharacterBuff(character, buff)
	else
		return addEnemyBuff(character,buff)
	end
end

function addDebuff(character, buff)
	if (isPlayer(character))then
		return addCharacterDebuff(character, buff)
	else
		return addEnemyDebuff(character,buff)
	end
end

function getBuffs(character)
	--print(isPlayer(character), character)
	if (isPlayer(character))then
		return getCharacterBuffs(character)
	else
		return getEnemyBuffs(character)
	end
end

function getDebuffs(character)
	if (isPlayer(character))then
		return getCharacterDebuffs(character)
	else
		return getEnemyDebuffs(character)
	end
end

function setBuffs(character, buff)
	if (isPlayer(character))then
		return setCharacterBuffs(character, buff)
	else
		return setEnemyBuffs(character, buff)
	end
end

function setDebuffs(character, buff)
	if (isPlayer(character))then
		return setCharacterDebuffs(character, buff)
	else
		return setEnemyDebuffs(character, buff)
	end
end

function removeBuff(character, buff)
	if (isPlayer(character))then
		return removeCharacterBuff(character, buff)
	else
		return removeEnemyBuff(character, buff)
	end
end

function removeDebuff(character, buff)
	if (isPlayer(character))then
		return removeCharacterDebuff(character, buff)
	else
		return removeEnemyDebuff(character, buff)
	end
end

function getDebuffSource(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffSource(character, buff)
	else
		return getEnemyDebuffSource(character, buff)
	end
end
function getBuffType(character, buff)
	if (isPlayer(character))then
		return getCharacterBuffType(character, buff)
	else
		return getEnemyBuffType(character, buff)
	end
end

function getBuffDuration(character, buff)
	if (isPlayer(character))then
		return getCharacterBuffDuration(character, buff)
	else
		return getEnemyBuffDuration(character, buff)
	end
end

function getDebuffType(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffType(character, buff)
	else
		return getEnemyDebuffType(character, buff)
	end
end

function getDebuffDuration(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffDuration(character, buff)
	else
		return getEnemyDebuffDuration(character, buff)
	end
end

function setBuffDuration(character, buff, value)
	if (isPlayer(character))then
		return setCharacterBuffDuration(character, buff, value)
	else
		return setEnemyBuffDuration(character, buff, value)
	end
end

function setDebuffDuration(character, buff, value)
	if (isPlayer(character))then
		return setCharacterDebuffDuration(character, buff, value)
	else
		return setEnemyDebuffDuration(character, buff, value)
	end
end

function getBuffStatus(character, buff)
	if (isPlayer(character))then
		return getCharacterBuffStatus(character, buff)
	else
		return getEnemyBuffStatus(character, buff)
	end
end

function setBuffStatus(character, buff, value)
	if (isPlayer(character))then
		return setCharacterBuffStatus(character, buff, value)
	else
		return setEnemyBuffStatus(character, buff, value)
	end
end

function getDebuffStatus(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffStatus(character, buff)
	else
		return getEnemyDebuffStatus(character, buff)
	end
end

function setDebuffStatus(character, buff, value)
	if (isPlayer(character))then
		return setCharacterDebuffStatus(character, buff, value)
	else
		return setEnemyDebuffStatus(character, buff, value)
	end
end

function getBuffTick(character, buff)
	if (isPlayer(character))then
		return getCharacterBuffTick(character, buff)
	else
		return getEnemyBuffTick(character, buff)
	end
end

function getBuffName(character, buff)
	if (isPlayer(character))then
		return getCharacterBuffName(character, buff)
	else
		return getEnemyBuffName(character, buff)
	end
end

function getDebuffTick(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffTick(character, buff)
	else
		return getEnemyDebuffTick(character, buff)
	end
end

function getDebuffName(character, buff)
	if (isPlayer(character))then
		return getCharacterDebuffName(character, buff)
	else
		return getEnemyDebuffName(character, buff)
	end
end

function getStat(character, stat)
	if (isPlayer(character))then
		return getCharacterStat(character, stat)
	else
		return getEnemyStat(character, stat)
	end
end

function setStat(character, stat, value)
	if (isPlayer(character))then
		return setCharacterStat(character, stat, value)
	else
		return setEnemyStat(character, stat,value)
	end
end

function getLevel (character)
	if (isPlayer(character))then
		return getCharacterLevel(character)
	else
		return getEnemyLevel(character)
	end
end

function getArmor (character)
	if (isPlayer(character))then
		return getCharacterArmor(character)
	else
		return getEnemyArmor(character)
	end
end

function getResistance(character)
	if (isPlayer(character))then
		return getCharacterResistance(character)
	else
		return getEnemyResistance(character)
	end
end

function getBattleStatus(character)
	if (isPlayer(character))then
		return getCharacterBattleStatus(character)
	else
		return getEnemyBattleStatus(character)
	end
end

function setBattleStatus(character, stat, value)
	if (isPlayer(character))then
		return setCharacterBattleStatus(character, stat, value)
	else
		return setEnemyBattleStatus(character, stat, value)
	end
end


function applyAura(character, auraId, source)
	local aEffect = effect[tostring(auraId)]
	local eCondition = getEffectCondition(tostring(auraId))
	local eName = getEffectName(tostring(auraId))
	local eTick = getEffectTick(tostring(auraId))
	local eDuration = getEffectDuration(tostring(auraId))
	local pBuffs = getBuffs(character)
	local pDebuffs = getDebuffs(character)
	source = source or {id="None", type="None"}
	if(eCondition == "Buff" or eCondition == "AuraBuff") then
		addBuff(character, {id=auraId,name=eName,duration=eDuration,tick=eTick,type=eCondition,active=false,source=source})
	elseif(eCondition == "Debuff" or eCondition == "AuraDebuff") then
		addDebuff(character, {id=auraId,name=eName,baseDuration=eDuration,duration=eDuration,tick=eTick,type=eCondition,active=false,source=source})
	end
end

function removeAura(character, auraId)
	local aEffect = effect[tostring(auraId)]
	local eCondition = getEffectCondition(tostring(auraId))
	local eType = getEffectType(tostring(auraId))
	local eStat = getEffectStat(tostring(auraId))
	local eValue = getEffectValue(tostring(auraId))
	local eName = getEffectName(tostring(auraId))
	local pBuffs = getBuffs(character)
	local pDebuffs = getDebuffs(character)
	if(eCondition == "Buff") then
		if not(pBuffs == nil) then
			for k, v in pairs(pBuffs) do
				if(pBuffs[k]["id"] == tostring(auraId)) then
					setBuffDuration(character, k, 0)
				end
			end
		end
	elseif(eCondition == "Debuff") then
		if not(pDebuffs == nil) then
			for k, v in pairs(pDebuffs) do
				if(pDebuffs[k]["id"] == tostring(auraId)) then
					setDebuffDuration(character, k, 0)
				end
			end
		end
	elseif(eCondition == "AuraBuff") then
		if not(pBuffs == nil) then
			for k, v in pairs(pBuffs) do
				if(pBuffs[k]["id"] == auraId) then
					local pBuffStatus = getBuffStatus(character, k)
					if(pBuffStatus == true) then
						setBuffStatus(character, k, 2)
					end
				end
			end
		end
	elseif(eCondition == "AuraDebuff") then
		if not(pDebuffs == nil) then
			for k, v in pairs(pDebuffs) do
				if(pDebuffs[k]["id"] == auraId) then
					if(pDebuffs["active"] == true) then
						setDebuffStatus(character, k, 2)
					end
				end
			end
		end
	end
end

function updateAuras(character)
	local pBuffs = getBuffs(character)
	local pDebuffs = getDebuffs(character)
	if not( pBuffs == nil) then
		for j,l in pairs(pBuffs) do
			--print(j,l,#characterData[k]["buffs"])
			local pBuffType = getBuffType(character, j)
			local pBuffDuration = getBuffDuration(character, j)
			local pBuffTick = getBuffTick(character, j)
			local pBuffStatus = getBuffStatus(character, j)
			local pBuffName = getBuffName(character, j)
			--print(pBuffType,pBuffDuration,pBuffTick,pBuffStatus,pBuffName)
			if not(pBuffType == "AuraBuff") then
				if(currentTick % pBuffTick == 0) then
					setBuffDuration(character, j, pBuffDuration - 1)
				end
				if(pBuffDuration <= 0) then
					print("Buff "..pBuffName.." fell off")
					if((#pBuffs < 1 or pBuffs == nil) and pBuffs[#pBuffs]["duration"] <= 0) then
						setBuffs(character, {})
					else
						removeBuff(character, j)
					end
				end
			else
				if(pBuffStatus == 3) then
					print("Buff "..pBuffName.." fell off")
					if((#pBuffs < 1 or pBuffs == nil) and pBuffs[#pBuffs]["duration"] <= 0) then
						setBuffs(character, {})
					else
						removeBuff(character, j)
					end
				end
			end
		end
	end
	if not(pDebuffs == nil) then
		--tprint(pDebuffs)
		for j,l in pairs(pDebuffs) do
			--print(j,l,#characterData[k]["buffs"])
			local pDebuffType = getDebuffType(character, j)
			local pDebuffDuration = getDebuffDuration(character, j)
			local pDebuffTick = getDebuffTick(character, j)
			local pDebuffStatus = getDebuffStatus(character, j)
			local pDebuffName = getDebuffName(character, j)
			if not(pDebuffType == "AuraDebuff") then
				if(currentTick % pDebuffTick == 0) then
					setDebuffDuration(character, j, pDebuffDuration - pDebuffTick)
				end
			end
			if(pDebuffDuration <= 0 or pDebuffStatus == 3) then
				print("Debuff "..pDebuffName.." fell off")
				if((#pDebuffs < 1 or pDebuffs == nil) and pDebuffs[#pDebuffs]["duration"] <= 0) then
					setDebuffs(character, {})
				else
					removeDebuff(character, j)
				end
			end
		end
	end
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end