function init(self)
	math.randomseed(os.time())
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	math.random()
	if(message_id == hash("getAttackResult")) then
		local eDefSkill = mobData[message.e]["level"] * 5
		local eWpnSkill = eDefSkill
		local eAvoidance = mobData[message.e]["avoidance"]
		local eArmor = mobData[message.e]["armor"]
		local pLevel = characterData[message.p]["stats"]["level"]
		local eLevel = mobData[message.e]["level"]
		local eResistance = mobData[message.e]["resist"]
		local eAttr = mobData[message.e]["attr"]
		local eBlockValue = mobData[message.e]["blockValue"]
		local pWpnSkill = characterData[message.p]["stats"]["skill"][characterData[message.p]["weaponMH"]["type"]]
		local pDefSkill = characterData[message.p]["stats"]["skill"]["Defense"]
		local pCritChance = characterData[message.p]["stats"]["crit"]
		local pHitBonus = characterData[message.p]["stats"]["hit"]
		local pAp = characterData[message.p]["stats"]["ap"]
		local pAttr = characterData[message.p]["stats"]["attr"]
		local pBlockValue = 0
		if(characterData[message.p]["weaponOH"]["type"] == "Shield") then
			pBlockValue = characterData[message.p]["weaponOH"]["blockValue"]
		end
		local isMob = false
		if(message.attacker == "mob") then
			pWpnSkill = eWpnSkill
			pDefSkill = eDefSkill
			eDefSkill = characterData[message.p]["stats"]["skill"]["Defense"]
			eWpnSkill = characterData[message.p]["stats"]["skill"][characterData[message.p]["weaponMH"]["type"]]
			eAvoidance = characterData[message.p]["stats"]["avoidance"]
			pCritChance = mobData[message.e]["crit"]
			pLevel = eLevel
			eLevel = characterData[message.p]["stats"]["level"]
			pAttr = eAttr
			eAttr = characterData[message.p]["stats"]["attr"]
			pBlockValue = eBlockValue
			eBlockValue = 0
			if(characterData[message.p]["weaponOH"]["type"] == "Shield") then
				eBlockValue = characterData[message.p]["shield"]["blockValue"]
			end
			message.e["level"] = characterData[message.p]["stats"]["level"]
			isMob = true
		end
		
		--print(eDefSkill, pWpnSkill)
		local pHitChance = calculateHitChance(pWpnSkill, pHitBonus, eDefSkill, message.dw, message.special)
		--print(pHitChance)
		local pAttackTable = generateAttackTable(pLevel,pWpnSkill, pDefSkill, pHitChance, pCritChance, eLevel, eWpnSkill, eDefSkill, eAvoidance, message.special, message.ranged, message.front,message.block, isMob)
		--tprint(pAttackTable)
		local pAttackResult = getAttackResult(pAttackTable, message.special, pCritChance)
		--print(pAttackResult)
		local pDmgDone = 0

		local damageMult = 1
		local damageRolls = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
		if(isMob == true) then
			damageRolls = mobData[message.e]["damage"]
		else
			damageRolls = getRandomDamage(characterData[message.p]["weaponMH"])
		end
		if(pAttackResult == "glancingBlow") then
			damageMult =  calculateGlancingBlowMult(pWpnSkill, eDefSkill)--math.max(0.40,1 - math.abs(math.min(0,5 + pWpnSkill - eDefSkill) * 0.03))
		elseif(pAttackResult == "crit") then
			damageMult = 2
		end
		
		if (pAttackResult == "miss" or pAttackResult == "dodge" or pAttackResult == "parry") then
			damageRolls["phy"] = 0
		end

		local pDmgReduction = calculateDamageReduction(pLevel, eArmor, eResistance, eLevel)
		pDmgDone = calculateDamage(damageRolls, pAp, pDmgReduction)

		local blockDamage = {dmg=pDmgDone["phy"],blocked=0}
		if (pAttackResult == "block") then
			blockDamage = calculateBlock(pDmgDone["phy"], eAttr["str"], eBlockValue)
			--print(blockDamage["dmg"], blockDamage["blocked"])
			pDmgDone["phy"] = blockDamage["dmg"]
		elseif (pAttackResult == "critBlock") then
			blockDamage = calculateBlock(pDmgDone["phy"] * damageMult, eAttr["str"], eBlockValue)
			--print(blockDamage["dmg"], blockDamage["blocked"])
			pDmgDone["phy"] = blockDamage["dmg"]
		end
		
		local pDmgResult = 0
		if(pAttackResult == "glancingBlow") then
			pDmgResult = pDmgResult + pDmgDone["phy"] * damageMult + pDmgDone["fire"] + pDmgDone["frost"] + pDmgDone["arcane"] + pDmgDone["nature"] + pDmgDone["shadow"] + pDmgDone["holy"]
		else
			for k, v in pairs(pDmgDone) do
				pDmgResult = pDmgResult + v * damageMult
			end
		end

		local pProcDamage = {phy=0}
		local pProcBlocked = {phy=0}
		if not(pAttackResult == "parry" or pAttackResult == "dodge" or pAttackResult == "miss") then
			pProcResult = calculateProcs(characterData[message.p],pAttackTable, pCritChance, pDmgReduction, eAttr, eBlockValue, eDefSkill)
			pProcDamage = pProcResult["damage"]
			pProcBlocked["phy"] = pProcResult["blocked"]
		end
		
		msg.post(sender, hash("returnAttackResult"), {result=pAttackResult, damageTable=pDmgDone, damageResult= pDmgResult, blockedDamage = (blockDamage["blocked"]+pProcBlocked["phy"]), rawDamage= damageRolls, reducedDamage=pDmgReduction, procDamage=pProcDamage})
	elseif(message_id == hash("getCombatStats")) then
		if not(message.skip == true) then
			equipItem(message.p, "weapon", "weaponMH", 12583)
			equipItem(message.p, "armor", "trinket1", 11815)
			equipItem(message.p, "armor", "shoulder", 16868)
			equipItem(message.p, "armor", "waist", 16864)
			equipItem(message.p, "armor", "hands", 16863)
			calculateBaseStats(characterData[message.p])
			--tprint(characterData[message.p]["stats"])
			calculateEquipmentStats(characterData[message.p])
			--tprint(characterData[message.p]["stats"])
			calculateCombatStats(characterData[message.p])
			--tprint(characterData[message.p]["stats"])
			calculateRacials(characterData[message.p])
			tprint(characterData[message.p])
		end
		msg.post(sender, hash("returnCombatStats"), {p=message.p})
	end
end

function applyRegeneration(pStats, type)
	local pHp = pStats["stats"]["hpCurrent"]
	local pHpMax = pStats["stats"]["hpMax"]
	local pRes = pStats["stats"]["resCurrent"]
	local pResMax = pStats["stats"]["resMax"]
	local pHpRegen = pStats["stats"]["hpregen"]
	local pMpRegen = pStats["stats"]["mpregen"]

	if(type == 2) then
		if(pStats["battle"]["hitRecently"] == false) then
			pStats["stats"]["hpCurrent"] = math.min(pHpMax, pHp + pHpRegen)
		elseif(pStats["battle"]["hitRecently"] == true and pStats["stats"]["race"] == "Troll") then
			pStats["stats"]["hpCurrent"] = math.min(pHpMax, pHp + (pHpRegen * 0.1))
		elseif(pStats["stats"]["class"] == "Rogue") then
			pStats["stats"]["resCurrent"] = math.min(pResMax, pRes + 20)
		end
	elseif(type == 5) then
		if not(pStats["stats"]["class"] == "Warrior" or pStats["stats"]["class"] == "Rogue") then
			pStats["stats"]["resCurrent"] = math.min(pResMax, pRes + pMpRegen)
		end
	end
end

function calculateBaseStats(pStats)
	local pRace = pStats["stats"]["race"]
	local pClass = pStats["stats"]["class"]

	if(pRace == "Human") then
		pStats["stats"]["attr"] = {str=20,agi=20,sta=20,int=20,spr=20}
	elseif(pRace == "Dwarf") then
		pStats["stats"]["attr"] = {str=22,agi=16,sta=23,int=19,spr=19}
	elseif(pRace == "Gnome") then
		pStats["stats"]["attr"] = {str=15,agi=23,sta=19,int=23,spr=20}
	elseif(pRace == "Nightelf") then
		pStats["stats"]["attr"] = {str=17,agi=25,sta=19,int=20,spr=20}
	elseif(pRace == "Orc") then
		pStats["stats"]["attr"] = {str=23,agi=17,sta=22,int=17,spr=23}
	elseif(pRace == "Undead") then
		pStats["stats"]["attr"] = {str=19,agi=18,sta=21,int=18,spr=25}
	elseif(pRace == "Tauren") then
		pStats["stats"]["attr"] = {str=25,agi=15,sta=22,int=15,spr=22}
	elseif(pRace == "Troll") then
		pStats["stats"]["attr"] = {str=21,agi=22,sta=21,int=16,spr=21}
	end

	if(pClass == "Warrior") then
		pStats["stats"]["attr"]["str"] = pStats["stats"]["attr"]["str"] + 3
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 2
		pStats["stats"]["basehp"] = 20
		pStats["stats"]["baseRes"] = 100
	elseif(pClass == "Rogue") then
		pStats["stats"]["attr"]["str"] = pStats["stats"]["attr"]["str"] + 1
		pStats["stats"]["attr"]["agi"] = pStats["stats"]["attr"]["agi"] + 3
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 1
		pStats["stats"]["basehp"] = 25
		pStats["stats"]["baseRes"] = 100
	elseif(pClass == "Paladin") then
		pStats["stats"]["attr"]["str"] = pStats["stats"]["attr"]["str"] + 2
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 2
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 1
		pStats["stats"]["basehp"] = 28
		pStats["stats"]["baseRes"] = 59
	elseif(pClass == "Shaman") then
		pStats["stats"]["attr"]["str"] = pStats["stats"]["attr"]["str"] + 1
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 1
		pStats["stats"]["attr"]["int"] = pStats["stats"]["attr"]["int"] + 1
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 2
		pStats["stats"]["basehp"] = 29
		pStats["stats"]["baseRes"] = 55
	elseif(pClass == "Warlock") then
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 1
		pStats["stats"]["attr"]["int"] = pStats["stats"]["attr"]["int"] + 2
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 2
		pStats["stats"]["basehp"] = 33
		pStats["stats"]["baseRes"] = 90
	elseif(pClass == "Hunter") then
		pStats["stats"]["attr"]["agi"] = pStats["stats"]["attr"]["agi"] + 3
		pStats["stats"]["attr"]["sta"] = pStats["stats"]["attr"]["sta"] + 1
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 1
		pStats["stats"]["basehp"] = 26
		pStats["stats"]["baseRes"] = 63
	elseif(pClass == "Druid") then
		pStats["stats"]["attr"]["str"] = pStats["stats"]["attr"]["str"] + 1
		pStats["stats"]["attr"]["int"] = pStats["stats"]["attr"]["int"] + 2
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 2
		pStats["stats"]["basehp"] = 34
		pStats["stats"]["baseRes"] = 50
	elseif(pClass == "Mage") then
		pStats["stats"]["attr"]["int"] = pStats["stats"]["attr"]["int"] + 3
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 2
		pStats["stats"]["basehp"] = 32
		pStats["stats"]["baseRes"] = 100
	elseif(pClass == "Priest") then
		pStats["stats"]["attr"]["int"] = pStats["stats"]["attr"]["int"] + 2
		pStats["stats"]["attr"]["spr"] = pStats["stats"]["attr"]["spr"] + 3
		pStats["stats"]["basehp"] = 32
		pStats["stats"]["baseRes"] = 110
	end
end

function calculateGlancingBlowMult(pWpnSkill, eDefSkill)
	return math.max(0.40,1 - math.abs(math.min(0,5 + pWpnSkill - eDefSkill) * 0.03))
end

function calculateEquipmentStats(pStats)
	local pEquipmentStats = {ap=0, armor=0, attr={str=0,agi=0,sta=0,int=0,spr=0},crit=0,hit=0, dodge=0, block=0, blockValue=0,parry=0, resist={fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}, skill={Defense=0}}
	local pAttr = pStats["stats"]["attr"]
	local pSetPieces = {}
	local equipmentSlots = {"weaponMH","weaponOH","weaponRanged","helmet","necklace","shoulder","cloak","chest","wrists","hands","waist","legs","feet","ring1","ring2","trinket1","trinket2"}
	for i = 1, #equipmentSlots do
		if not (pStats[equipmentSlots[i]]["type"] == "None") then
			pEquipmentStats["armor"] = pEquipmentStats["armor"] + pStats[equipmentSlots[i]]["armor"]
			
			pEquipmentStats["attr"]["str"] = pEquipmentStats["attr"]["str"] + pStats[equipmentSlots[i]]["attr"]["str"]
			pEquipmentStats["attr"]["agi"] = pEquipmentStats["attr"]["agi"] + pStats[equipmentSlots[i]]["attr"]["agi"]
			pEquipmentStats["attr"]["sta"] = pEquipmentStats["attr"]["sta"] + pStats[equipmentSlots[i]]["attr"]["sta"]
			pEquipmentStats["attr"]["int"] = pEquipmentStats["attr"]["int"] + pStats[equipmentSlots[i]]["attr"]["int"]
			pEquipmentStats["attr"]["spr"] = pEquipmentStats["attr"]["spr"] + pStats[equipmentSlots[i]]["attr"]["spr"]
			pEquipmentStats["resist"]["fire"] = pEquipmentStats["resist"]["fire"] + pStats[equipmentSlots[i]]["resist"]["fire"]
			pEquipmentStats["resist"]["shadow"] = pEquipmentStats["resist"]["shadow"] + pStats[equipmentSlots[i]]["resist"]["shadow"]
			pEquipmentStats["resist"]["frost"] = pEquipmentStats["resist"]["frost"] + pStats[equipmentSlots[i]]["resist"]["frost"]
			pEquipmentStats["resist"]["arcane"] = pEquipmentStats["resist"]["arcane"] + pStats[equipmentSlots[i]]["resist"]["arcane"]
			pEquipmentStats["resist"]["nature"] = pEquipmentStats["resist"]["nature"] + pStats[equipmentSlots[i]]["resist"]["nature"]
			pEquipmentStats["resist"]["holy"] = pEquipmentStats["resist"]["holy"] + pStats[equipmentSlots[i]]["resist"]["holy"]
			for k = 1, 3 do
				if not(pStats[equipmentSlots[i]]["effectId"][k] == 0) then
					local eqEffect = effect[tostring(pStats[equipmentSlots[i]]["effectId"][k])]
					local eqStat = tostring(eqEffect["stat"])
					if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
						pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
					elseif(eqEffect["type"] == "IncreaseSkill" and eqEffect["condition"] == "Equip") then
						pEquipmentStats["skill"][eqStat] = pEquipmentStats["skill"][eqStat] + eqEffect["value"]
					end	
				end
			end
			if not(pStats[equipmentSlots[i]]["setid"] == 0 or pStats[equipmentSlots[i]]["setid"] == nil) then
				local eqSet = set[tostring(pStats[equipmentSlots[i]]["setid"])]
				if(pSetPieces[pStats[equipmentSlots[i]]["setid"]] == nil) then
					table.insert(pSetPieces, pStats[equipmentSlots[i]]["setid"], 1)
				end
				pSetPieces[pStats[equipmentSlots[i]]["setid"]] = pSetPieces[pStats[equipmentSlots[i]]["setid"]] + 1
				for k, v in pairs(eqSet["bonus"]) do
					if(pSetPieces[pStats[equipmentSlots[i]]["setid"]] == tonumber(k)) then
						local eqEffect = effect[tostring(v)]
						local eqStat = tostring(eqEffect["stat"])
						if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
							pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
						end
					end
				end
			end
		end
	end
	pStats["stats"]["attr"]["str"] = pAttr["str"] + pEquipmentStats["attr"]["str"]
	pStats["stats"]["attr"]["agi"] = pAttr["agi"] + pEquipmentStats["attr"]["agi"]
	pStats["stats"]["attr"]["sta"] = pAttr["sta"] + pEquipmentStats["attr"]["sta"]
	pStats["stats"]["attr"]["int"] = pAttr["int"] + pEquipmentStats["attr"]["int"]
	pStats["stats"]["attr"]["spr"] = pAttr["spr"] + pEquipmentStats["attr"]["spr"]
	pStats["stats"]["crit"] = pStats["stats"]["crit"] + pEquipmentStats["crit"]
	pStats["stats"]["hit"] = pStats["stats"]["hit"] + pEquipmentStats["hit"]
	pStats["stats"]["ap"] = pStats["stats"]["ap"] + pEquipmentStats["ap"]
	pStats["stats"]["rAp"] = pStats["stats"]["rAp"] + pEquipmentStats["ap"]
	pStats["stats"]["resist"]["fire"] = pStats["stats"]["resist"]["fire"] + pEquipmentStats["resist"]["fire"]
	pStats["stats"]["resist"]["frost"] = pStats["stats"]["resist"]["frost"] + pEquipmentStats["resist"]["frost"]
	pStats["stats"]["resist"]["nature"] = pStats["stats"]["resist"]["nature"] + pEquipmentStats["resist"]["nature"]
	pStats["stats"]["resist"]["arcane"] = pStats["stats"]["resist"]["arcane"] + pEquipmentStats["resist"]["arcane"]
	pStats["stats"]["resist"]["holy"] = pStats["stats"]["resist"]["holy"] + pEquipmentStats["resist"]["holy"]
	pStats["stats"]["resist"]["shadow"] = pStats["stats"]["resist"]["shadow"] + pEquipmentStats["resist"]["shadow"]
	pStats["stats"]["skill"]["Defense"] = pStats["stats"]["skill"]["Defense"] + pEquipmentStats["skill"]["Defense"]
	pStats["stats"]["armor"] = pStats["stats"]["armor"] + pEquipmentStats["armor"]
	pStats["stats"]["avoidance"]["block"] = pStats["stats"]["avoidance"]["block"] + pEquipmentStats["block"]
	pStats["stats"]["avoidance"]["dodge"] = pStats["stats"]["avoidance"]["dodge"] + pEquipmentStats["dodge"]
	pStats["stats"]["avoidance"]["parry"] = pStats["stats"]["avoidance"]["parry"] + pEquipmentStats["parry"]
	--tprint(pEquipmentStats)
	pStats["weaponOH"]["blockValue"] = pStats["weaponOH"]["blockValue"] + pEquipmentStats["blockValue"]
end

function calculateCombatStats(pStats)
	local pClass = pStats["stats"]["class"]
	local pAttr = pStats["stats"]["attr"]
	local pAvoidance = pStats["stats"]["avoidance"]
	-- Strength
	if(pClass == "Warrior" or pClass == "Shaman" or pClass == "Paladin" or pClass == "Druid") then
		pStats["stats"]["baseAp"] = 2 * pAttr["str"]
	else
		pStats["stats"]["baseAp"] = 1 * pAttr["str"]
	end
	
	-- Agility
		-- Melee Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Druid") then
		pStats["stats"]["baseAp"] = pStats["stats"]["baseAp"] + 1 * pAttr["agi"]
		
	end
		-- Range Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Hunter") then
		pStats["stats"]["baseRAp"] = 1 * pAttr["agi"]
		
	end
	local currentAp = pStats["stats"]["ap"]
	pStats["stats"]["ap"] = currentAp + pStats["stats"]["baseAp"]
	pStats["stats"]["rAp"] = currentAp + pStats["stats"]["baseRAp"]
		-- Crit
	if(pClass == "Warrior" or pClass == "Paladin" or pClass == "Shaman" or pClass == "Warlock") then
		pStats["stats"]["baseCrit"] = 1 * ( pAttr["agi"] / 20)
	elseif(pClass == "Rogue") then
		pStats["stats"]["baseCrit"] = 1 * ( pAttr["agi"] / 29)
	elseif(pClass == "Hunter") then
		pStats["stats"]["baseCrit"] = 1 * ( pAttr["agi"] / 53)
	end
	local currentCrit = pStats["stats"]["crit"]
	pStats["stats"]["crit"] = pStats["stats"]["baseCrit"] + currentCrit
		-- Dodge
	if(pClass == "Rogue") then
		pStats["stats"]["avoidance"]["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 14.5)
	elseif(pClass == "Hunter") then
		pStats["stats"]["avoidance"]["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 26)
	else
		pStats["stats"]["avoidance"]["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 20)
	end
		-- Armor
	pStats["stats"]["baseArmor"] = 2 * pAttr["agi"]
	local currentArmor = pStats["stats"]["armor"]
	pStats["stats"]["armor"] = pStats["stats"]["baseArmor"] + currentArmor

	-- Stamina
		-- HP
	if(pStats["stats"]["race"] == "Tauren") then
		pStats["stats"]["hpMax"] = pStats["stats"]["basehp"] + math.min(pAttr["sta"], 20) + 10.5 * math.max(0, (pAttr["sta"]-20))
	else
		pStats["stats"]["hpMax"] = pStats["stats"]["basehp"] + math.min(pAttr["sta"], 20) + 10 * math.max(0, (pAttr["sta"]-20))
	end

	-- Intelligence
		-- Mana
	if not(pClass == "Warrior" or pClass == "Rogue") then
		pStats["stats"]["resMax"] = pStats["stats"]["baseRes"] + 15 * pAttr["int"]
	end
		-- Spellcrit
	if (pClass == "Paladin") then
		pStats["stats"]["sCrit"] = pStats["stats"]["baseSCrit"] + 1 * (pAttr["int"] / 54)
	elseif (pClass == "Shaman") then
		pStats["stats"]["sCrit"] = pStats["stats"]["baseSCrit"] + 1 * (pAttr["int"] / 59.2)
	elseif (pClass == "Mage" or pClass == "Priest") then
		pStats["stats"]["sCrit"] = pStats["stats"]["baseSCrit"] + 1 * (pAttr["int"] / 59.5)
	elseif (pClass == "Druid") then
		pStats["stats"]["sCrit"] = pStats["stats"]["baseSCrit"] + 1 * (pAttr["int"] / 60)
	elseif (pClass == "Warlock") then
		pStats["stats"]["sCrit"] = pStats["stats"]["baseSCrit"] + 1 * (pAttr["int"] / 60.6)
	end

	-- Spirit
		-- HP & MP regeneration
	if(pClass == "Druid") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.09) + 6.5
		pStats["stats"]["mpRegen"] = (pAttr["spr"] / 4.5) + 15
	elseif(pClass == "Paladin" or pClass == "Hunter") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.25) + 6
		pStats["stats"]["mpRegen"] = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Warlock") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.07) + 6
		pStats["stats"]["mpRegen"] = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Shaman") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.11) + 7
		pStats["stats"]["mpRegen"] = (pAttr["spr"] / 5) + 17
	elseif(pClass == "Mage" or pClass == "Priest") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.1) + 5
		pStats["stats"]["mpRegen"] = (pAttr["spr"] / 4) + 12.5
	elseif(pClass == "Warrior") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.8) + 6
	elseif(pClass == "Rogue") then
		pStats["stats"]["hpRegen"] = (pAttr["spr"] * 0.5) + 2
	end
end

function calculateRacials(pStats)
	local pRace = pStats["stats"]["race"]
	local pAttr = pStats["stats"]["attr"]
	local pSkill = pStats["stats"]["skill"]
	local pResistance = pStats["stats"]["resist"]
	local pProfession = pStats["stats"]["profession"]
	if(pRace == "Human") then
		pStats["stats"]["attr"]["spr"] = math.floor(pAttr["spr"] + pAttr["spr"] * 0.05)
		pStats["stats"]["skill"]["OneHandedSword"] = pSkill["OneHandedSword"] + 5
		pStats["stats"]["skill"]["OneHandedMace"] = pSkill["OneHandedMace"] + 5
		pStats["stats"]["skill"]["TwoHandedSword"] = pSkill["TwoHandedSword"] + 5
		pStats["stats"]["skill"]["TwoHandedMace"] = pSkill["TwoHandedMace"] + 5
	elseif(pRace == "Dwarf") then
		pStats["stats"]["resist"]["frost"] = pResistance["frost"] + 10
		pStats["stats"]["skill"]["Gun"] = pSkill["Gun"] + 5
	elseif(pRace == "Gnome") then
		pStats["stats"]["resist"]["arcane"] = pResistance["arcane"] + 10
		pStats["stats"]["profession"]["engineering"] = pProfession["engineering"] + 15
		pStats["stats"]["attr"]["int"] = math.floor(pAttr["int"] + pAttr["int"] * 0.05)
	elseif(pRace == "Nightelf") then
		pStats["stats"]["resist"]["nature"] = pResistance["nature"] + 10
		pStats["stats"]["avoidance"]["dodge"] = pStats["stats"]["avoidance"]["dodge"] + 1
	elseif(pRace == "Orc") then
		pStats["stats"]["skill"]["OneHandedAxe"] = pSkill["OneHandedAxe"] + 5
		pStats["stats"]["skill"]["TwoHandedAxe"] = pSkill["TwoHandedAxe"] + 5
	elseif(pRace == "Tauren") then
		pStats["stats"]["resist"]["nature"] = pResistance["nature"] + 10
		pStats["stats"]["profession"]["herbalism"] = pProfession["herbalism"] + 15
	elseif(pRace == "Undead") then
		pStats["stats"]["resist"]["shadow"] = pResistance["shadow"] + 10
	elseif(pRace == "Troll") then
		pStats["stats"]["skill"]["Throwing"] = pSkill["Throwing"] + 5
		pStats["stats"]["skill"]["Bow"] = pSkill["Bow"] + 5
		pStats["stats"]["hpregen"] = pStats["stats"]["hpregen"] + pStats["stats"]["hpregen"] * 0.10
	end
end

function calculateHitChance(pWpnSkill, pHitBonus, eDefSkill, dualWield, special)
	local rHitChance = 100
	local baseMiss = 5
	if (special == false) then
		local baseMissP = math.max(0,baseMiss - (eDefSkill - pWpnSkill) * 0.04)
		local baseMissE = math.max(0,baseMiss + (pWpnSkill - eDefSkill) * 0.02)
		baseMiss = (baseMissP + baseMissE) / 2
	end
	if(dualWield == true and special == false) then
		baseMiss = baseMiss + 19
	end
	if(eDefSkill - pWpnSkill > 10) then
		rHitChance = math.max(0,100 - ((baseMiss + 2) + (eDefSkill - pWpnSkill - 10) * 0.4) + pHitBonus)
	else
		rHitChance = math.max(0,100 - (baseMiss + (eDefSkill - pWpnSkill) * 0.1) + pHitBonus)
	end
	return rHitChance
end

function calculateProcs(pStats, pAttackTable, pCrit, eDmgReduction, eAttr, eBlockValue, eDefSkill)
	local eqChance = {"weaponMH","weaponOH","weaponRanged","trinket1","trinket2"}
	local procDamage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local procs = {}
	local blockDamage = 0
	for i = 1, #eqChance do
		for k = 1, 3 do
			if not(pStats[eqChance[i]]["effectId"][k] == 0) then
				local eqEffect = effect[tostring(pStats[eqChance[i]]["effectId"][k])]
				local eqStat = tostring(eqEffect["stat"])
				if(eqEffect["type"] == "DirectDamage" and eqEffect["condition"] == "OnHit") then
					local procChance = math.random()*100
					if(procChance <= eqEffect["chance"]) then
						local critChance = math.random()*100
						local phyMult = 1
						local eleMult = 1
						if(critChance <= pCrit) then
							phyMult = 2
							eleMult = 1.5
						end
						table.insert(procs, #procs, {source=eqEffect["name"],id=tostring(pStats[eqChance[i]]["effectId"][k]),schools=eqEffect["schools"], phyMult=phyMult,eleMult=eleMult,blocked=0,ap=0})
						--procDamage["Physical"]["min"] = procDamage["Physical"]["min"] + eqEffect["schools"]["phy"]["min"] * phyMult
						--procDamage["Physical"]["max"] = procDamage["Physical"]["max"] + eqEffect["schools"]["phy"]["max"] * phyMult
						--procDamage["Fire"]["min"] = procDamage["Fire"]["min"] + eqEffect["schools"]["fire"]["min"] * eleMult
						--procDamage["Fire"]["max"] = procDamage["Fire"]["max"] + eqEffect["schools"]["fire"]["max"] * eleMult
						--procDamage["Frost"]["min"] = procDamage["Frost"]["min"] + eqEffect["schools"]["frost"]["min"] * eleMult
						--procDamage["Frost"]["max"] = procDamage["Frost"]["max"] + eqEffect["schools"]["frost"]["max"] * eleMult
						--procDamage["Nature"]["min"] = procDamage["Nature"]["min"] + eqEffect["schools"]["nature"]["min"] * eleMult
						--procDamage["Nature"]["max"] = procDamage["Nature"]["max"] + eqEffect["schools"]["nature"]["max"] * eleMult
						--procDamage["Arcane"]["min"] = procDamage["Arcane"]["min"] + eqEffect["schools"]["arcane"]["min"] * eleMult
						--procDamage["Arcane"]["max"] = procDamage["Arcane"]["max"] + eqEffect["schools"]["arcane"]["max"] * eleMult
						--procDamage["Holy"]["min"] = procDamage["Holy"]["min"] + eqEffect["schools"]["holy"]["min"] * eleMult
						--procDamage["Holy"]["max"] = procDamage["Holy"]["max"] + eqEffect["schools"]["holy"]["max"] * eleMult
						--procDamage["Shadow"]["min"] = procDamage["Shadow"]["min"] + eqEffect["schools"]["shadow"]["min"] * eleMult
						--procDamage["Shadow"]["max"] = procDamage["Shadow"]["max"] + eqEffect["schools"]["shadow"]["max"] * eleMult
					end
				elseif(eqEffect["type"] == "ExtraAttack" and eqEffect["condition"] == "OnHit") then
					local procChance = math.random()*100
					if(procChance <= eqEffect["chance"]) then
						for runs = 1, eqEffect["value"] do
							local pExtraHit = 0
							pExtraHit = getAttackResult(pAttackTable, false, pCrit)
							if not(pExtraHit == "miss" or pExtraHit == "dodge" or pExtraHit == "parry") then
								local pExtraHitDamage = {min=pStats["weaponMH"]["schools"]["phy"]["min"],max=pStats["weaponMH"]["schools"]["phy"]["max"],blocked=0}
								local pExtraHitMult = 1
								if(pExtraHit == "crit") then
									pExtraHitMult = 2
								elseif(pExtraHit == "glancingBlow") then
									pExtraHitMult = calculateGlancingBlowMult(pStats["stats"]["skill"][pStats["weaponMH"]["type"]], eDefSkill)
								elseif(pExtraHit == "block") then
									local blockDamageMin = calculateBlock(pExtraHitDamage["min"], eAttr["str"], eBlockValue)
									local blockDamageMax = calculateBlock(pExtraHitDamage["max"], eAttr["str"], eBlockValue)
									pExtraHitDamage["min"] = blockDamageMin["dmg"]
									pExtraHitDamage["max"] = blockDamageMax["dmg"]
									pExtraHitDamage["blocked"] = (blockDamageMin["blocked"] + blockDamageMax["blocked"]) / 2 
								end
								table.insert(procs, #procs, {source=eqEffect["name"],id=tostring(pStats[eqChance[i]]["effectId"][k]),ap=pStats["stats"]["ap"],schools={phy={min=pExtraHitDamage["min"],max=pExtraHitDamage["max"]},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},phyMult=pExtraHitMult,eleMult=1,blocked=pExtraHitDamage["blocked"]})
								--procDamage["Physical"]["min"] = procDamage["Physical"]["min"] + pExtraHitDamage["min"] * pExtraHitMult
								--procDamage["Physical"]["max"] = procDamage["Physical"]["max"] + pExtraHitDamage["max"] * pExtraHitMult
							end
						end
					end
				end
			end
		end
	end
	for k, v in pairs(procs) do
		local proc = getRandomDamage(procs[k])
		for j, l in pairs(proc) do
			if(j == "phy") then
				l = l * procs[k]["phyMult"]
			else
				l = l * procs[k]["eleMult"]
			end
		end
		local procDamageSchools = calculateDamage(proc, procs[k]["ap"], eDmgReduction)
		print(procs[k]["source"].."["..procs[k]["id"].."] proc with "..procDamageSchools["phy"].."phy ("..procs[k]["blocked"].." blocked) and +"..procs[k]["ap"].."ap")
		procDamage["phy"] = procDamage["phy"] + procDamageSchools["phy"]
		procDamage["fire"] = procDamage["fire"] + procDamageSchools["fire"]
		procDamage["frost"] = procDamage["frost"] + procDamageSchools["frost"]
		procDamage["arcane"] = procDamage["arcane"] + procDamageSchools["arcane"]
		procDamage["nature"] = procDamage["nature"] + procDamageSchools["nature"]
		procDamage["shadow"] = procDamage["shadow"] + procDamageSchools["shadow"]
		procDamage["holy"] = procDamage["holy"] + procDamageSchools["holy"]
		blockDamage = blockDamage + procs[k]["blocked"]
	end
	--procDamage = calculateDamage(procDamage, procAp, eDmgReduction)
	return {damage=procDamage,blocked=blockDamage}
end

function generateAttackTable(pLevel, pWpnSkill, pDefSkill, pHitChance, pCritChance, eLevel, eWpnSkill, eDefSkill, eAvoidance, special, ranged, attackFront, blockEnabled, isMob)
	local rollTable = {miss=0,dodge=0,parry=0,glancingBlow=0,block=0,crit=0,crushingBlow=0,hit=0}
	local pSkillDifference = math.min(eDefSkill - pWpnSkill,300)
	if(special == true) then
		rollTable = {miss=0,dodge=0,parry=0,block=0,hit=0}
	end
	local remainingRolls = math.max(0, pHitChance)
	local tempVar = 100
	rollTable["miss"] = math.max(0, tempVar - remainingRolls)
	tempVar = remainingRolls
	if(ranged == false) then
		local eDodge = eAvoidance["dodge"]
		eDodge = math.max(0, eAvoidance["dodge"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eDodge)
		rollTable["dodge"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(attackFront == true and ranged == false) then
		local eParry = eAvoidance["parry"]
		eParry = math.max(0, eAvoidance["parry"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eParry)
		rollTable["parry"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(isMob == false and special == false) then 
		if(ranged == false) then
			remainingRolls = math.max(0, remainingRolls - math.max(0, 10 + (eDefSkill - math.min(pWpnSkill, 300)) * 2))
		elseif(ranged == true) then
			if(pLevel > 30) then
				remainingRolls = math.max(0, remainingRolls - 60)
			else
				remainingRolls = math.max(0, remainingRolls - (pLevel - 10) * 3)
			end
		end
		rollTable["glancingBlow"] = (tempVar - remainingRolls)
		tempVar = remainingRolls
	end
	if(attackFront == true and blockEnabled == true) then
		local eBlock = eAvoidance["block"]
		eBlock = math.max(0, eAvoidance["block"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eBlock)
		rollTable["block"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(remainingRolls > 0) then
		if(special == false) then
			pCritChance = math.max(0, pCritChance - pSkillDifference * 0.04)
			remainingRolls = math.max(0, remainingRolls - ((pHitChance + rollTable["miss"]) * (pCritChance/100))) 
			rollTable["crit"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		if(isMob == true and (pLevel - eLevel >= 3)) then
			remainingRolls = math.max(0, remainingRolls - (((pWpnSkill - math.min(eDefSkill,300)) * 2) - 15))
			rollTable["crushingBlow"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		rollTable["hit"] = math.max(0, remainingRolls)
	end
	return rollTable
end

function getAttackResult(attackTable, special, pCrit)
	local rngRanges = math.random()*100
	local critRng = math.random()*100
	local weight = 0
	local critWeight = 0
	local result = "Evaded"
	local tableOrder = {"miss","dodge","parry","glancingBlow","block","crit","crushingBlow","hit"}
	if(special == true) then
		tableOrder = {"miss","dodge","parry","block","hit"}
	end
	for i = 1, #tableOrder do
		weight = weight + attackTable[tableOrder[i]]
		--print(rngRanges,weight,attackTable[tableOrder[i]], tableOrder[i])
		if(rngRanges <= weight) then
			result = tableOrder[i]
			if(tableOrder[i] == "block" and special == true) then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "critBlock"
				end
			elseif(tableOrder[i] == "hit" and special == true) then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "crit"
				end
			end
			return result
		end
	end
end

function calculateDamage(pDmgSchools, pAp, pDmgReduction)
	local pDmgDone = {phy=(pAp / 14),fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pDmgSchools["phy"] > 0) then
		pDmgDone["phy"] = (pDmgDone["phy"] + pDmgSchools["phy"]) * (1-pDmgReduction["phy"])
	else
		pDmgDone["phy"] = pDmgSchools["phy"] * (1-pDmgReduction["phy"])
	end
	pDmgDone["phy"] = math.floor(0.5 + pDmgDone["phy"] ) 
	
	local resistanceTable = {
		{["0"]=100,["25"]=0,["50"]=0,["75"]=0,["100"]=0},
		{["0"]=97,["25"]=2,["50"]=1,["75"]=0,["100"]=0},
		{["0"]=94,["25"]=4,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=90,["25"]=8,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=87,["25"]=10,["50"]=3,["75"]=0,["100"]=0},
		{["0"]=84,["25"]=12,["50"]=4,["75"]=0,["100"]=0}, --5%
		{["0"]=82,["25"]=13,["50"]=4,["75"]=1,["100"]=0},
		{["0"]=79,["25"]=15,["50"]=5,["75"]=1,["100"]=0},
		{["0"]=76,["25"]=17,["50"]=6,["75"]=1,["100"]=0},
		{["0"]=73,["25"]=19,["50"]=7,["75"]=1,["100"]=0},
		{["0"]=69,["25"]=23,["50"]=7,["75"]=1,["100"]=0}, --10%
		{["0"]=66,["25"]=25,["50"]=8,["75"]=1,["100"]=0},
		{["0"]=63,["25"]=27,["50"]=9,["75"]=1,["100"]=0},
		{["0"]=60,["25"]=29,["50"]=10,["75"]=1,["100"]=0},
		{["0"]=58,["25"]=30,["50"]=10,["75"]=2,["100"]=0},
		{["0"]=54,["25"]=33,["50"]=11,["75"]=2,["100"]=0}, --15%
		{["0"]=51,["25"]=36,["50"]=11,["75"]=2,["100"]=0},
		{["0"]=48,["25"]=38,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=44,["25"]=42,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=41,["25"]=44,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=37,["25"]=48,["50"]=13,["75"]=2,["100"]=0}, --20%
		{["0"]=34,["25"]=50,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=31,["25"]=52,["50"]=14,["75"]=2,["100"]=0},
		{["0"]=30,["25"]=52,["50"]=15,["75"]=2,["100"]=1},
		{["0"]=28,["25"]=53,["50"]=15,["75"]=3,["100"]=1},
		{["0"]=25,["25"]=55,["50"]=16,["75"]=3,["100"]=1}, --25%
		{["0"]=24,["25"]=54,["50"]=17,["75"]=4,["100"]=1},
		{["0"]=23,["25"]=53,["50"]=18,["75"]=5,["100"]=1},
		{["0"]=22,["25"]=51,["50"]=21,["75"]=5,["100"]=1},
		{["0"]=21,["25"]=50,["50"]=22,["75"]=6,["100"]=1},
		{["0"]=20,["25"]=49,["50"]=24,["75"]=6,["100"]=1}, --30%
		{["0"]=19,["25"]=47,["50"]=26,["75"]=7,["100"]=1},
		{["0"]=18,["25"]=46,["50"]=27,["75"]=8,["100"]=1},
		{["0"]=17,["25"]=44,["50"]=30,["75"]=8,["100"]=1},
		{["0"]=16,["25"]=43,["50"]=31,["75"]=9,["100"]=1},
		{["0"]=15,["25"]=42,["50"]=32,["75"]=10,["100"]=1}, --35%
		{["0"]=14,["25"]=41,["50"]=33,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=39,["50"]=36,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=36,["50"]=38,["75"]=12,["100"]=1},
		{["0"]=12,["25"]=35,["50"]=39,["75"]=13,["100"]=1},
		{["0"]=11,["25"]=34,["50"]=40,["75"]=14,["100"]=1}, --40%
		{["0"]=10,["25"]=33,["50"]=41,["75"]=15,["100"]=1},
		{["0"]=9,["25"]=31,["50"]=44,["75"]=15,["100"]=1},
		{["0"]=8,["25"]=30,["50"]=45,["75"]=16,["100"]=1},
		{["0"]=8,["25"]=27,["50"]=47,["75"]=17,["100"]=1},
		{["0"]=7,["25"]=26,["50"]=48,["75"]=18,["100"]=1}, --45%
		{["0"]=6,["25"]=25,["50"]=49,["75"]=19,["100"]=1},
		{["0"]=6,["25"]=23,["50"]=50,["75"]=19,["100"]=2},
		{["0"]=5,["25"]=22,["50"]=51,["75"]=20,["100"]=2},
		{["0"]=3,["25"]=22,["50"]=53,["75"]=20,["100"]=2},
		{["0"]=2,["25"]=21,["50"]=54,["75"]=21,["100"]=2}, -- 50%
		{["0"]=2,["25"]=20,["50"]=53,["75"]=22,["100"]=3},
		{["0"]=2,["25"]=20,["50"]=51,["75"]=22,["100"]=5},
		{["0"]=2,["25"]=19,["50"]=50,["75"]=23,["100"]=6},
		{["0"]=1,["25"]=19,["50"]=49,["75"]=25,["100"]=6},
		{["0"]=1,["25"]=18,["50"]=48,["75"]=26,["100"]=7}, -- 55%
		{["0"]=1,["25"]=17,["50"]=47,["75"]=27,["100"]=8},
		{["0"]=1,["25"]=16,["50"]=45,["75"]=30,["100"]=8},
		{["0"]=1,["25"]=15,["50"]=44,["75"]=31,["100"]=9},
		{["0"]=1,["25"]=15,["50"]=41,["75"]=33,["100"]=10},
		{["0"]=1,["25"]=14,["50"]=40,["75"]=34,["100"]=11}, --60%
		{["0"]=1,["25"]=13,["50"]=39,["75"]=35,["100"]=12},
		{["0"]=1,["25"]=12,["50"]=38,["75"]=36,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=36,["75"]=39,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=33,["75"]=41,["100"]=14},
		{["0"]=1,["25"]=10,["50"]=32,["75"]=42,["100"]=15}, --65%
		{["0"]=1,["25"]=9,["50"]=31,["75"]=43,["100"]=16},
		{["0"]=1,["25"]=8,["50"]=30,["75"]=44,["100"]=17},
		{["0"]=1,["25"]=8,["50"]=27,["75"]=46,["100"]=18},
		{["0"]=1,["25"]=7,["50"]=26,["75"]=47,["100"]=19},
		{["0"]=1,["25"]=6,["50"]=24,["75"]=49,["100"]=20}, --70%
		{["0"]=1,["25"]=6,["50"]=22,["75"]=50,["100"]=21},
		{["0"]=1,["25"]=5,["50"]=21,["75"]=51,["100"]=22},
		{["0"]=1,["25"]=5,["50"]=18,["75"]=53,["100"]=23},
		{["0"]=1,["25"]=4,["50"]=17,["75"]=54,["100"]=24},
		{["0"]=1,["25"]=3,["50"]=16,["75"]=55,["100"]=25}, --75%
		-- Normal cap 
		{["0"]=1,["25"]=3,["50"]=15,["75"]=53,["100"]=28},
		{["0"]=1,["25"]=2,["50"]=15,["75"]=52,["100"]=30},
		{["0"]=0,["25"]=2,["50"]=15,["75"]=52,["100"]=31},
		{["0"]=0,["25"]=2,["50"]=14,["75"]=50,["100"]=34},
		{["0"]=0,["25"]=2,["50"]=13,["75"]=48,["100"]=37}, --80%
		{["0"]=0,["25"]=2,["50"]=13,["75"]=44,["100"]=41},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=42,["100"]=44},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=38,["100"]=48},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=36,["100"]=51},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=33,["100"]=54}, --85%
		{["0"]=0,["25"]=2,["50"]=10,["75"]=30,["100"]=58},
		{["0"]=0,["25"]=1,["50"]=10,["75"]=29,["100"]=60},
		{["0"]=0,["25"]=1,["50"]=9,["75"]=27,["100"]=63},
		{["0"]=0,["25"]=1,["50"]=8,["75"]=25,["100"]=66},
		{["0"]=0,["25"]=1,["50"]=7,["75"]=23,["100"]=69}, --90%
		{["0"]=0,["25"]=1,["50"]=7,["75"]=19,["100"]=73},
		{["0"]=0,["25"]=1,["50"]=6,["75"]=17,["100"]=76},
		{["0"]=0,["25"]=1,["50"]=5,["75"]=15,["100"]=79},
		{["0"]=0,["25"]=1,["50"]=4,["75"]=13,["100"]=82},
		{["0"]=0,["25"]=0,["50"]=4,["75"]=12,["100"]=84}, --95%
		{["0"]=0,["25"]=0,["50"]=3,["75"]=10,["100"]=87},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=8,["100"]=90},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=4,["100"]=94},
		{["0"]=0,["25"]=0,["50"]=1,["75"]=2,["100"]=97},
		{["0"]=0,["25"]=0,["50"]=0,["75"]=0,["100"]=100} --100%
	}
		
	local elementalTable = {["0"]=100,["25"]=0,["50"]=0,["75"]=0,["100"]=0}
	local elementOrder = {"fire","frost","arcane","nature","shadow","holy"}
	local elemRange = math.random()*100
	local weight = 0
	for i = 1, #elementOrder do
		elemRange = math.random()*100
		weight = 0
		elemResist = math.floor(pDmgReduction[elementOrder[i]] * 100)
		--print(elemResist)
		resistOrder = {"0","25","50","75","100"}
		for k = 1, #resistOrder do
			weight = weight + resistanceTable[elemResist][resistOrder[k]]
			--print(weight, resistanceTable[elemResist][resistOrder[k]], resistOrder[k], elementOrder[i])
			if elemRange <= weight then
				pDmgDone[elementOrder[i]] = pDmgSchools[elementOrder[i]] - (pDmgSchools[elementOrder[i]] * (tonumber(resistOrder[k]) / 100))
				break
			end
		end
	end
	
	return pDmgDone
end

function calculateDamageReduction(pLevel, eArmor, eRes, eLevel)
	local reductionPercentage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pLevel < 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * eLevel), 0.75)
	elseif(pLevel >= 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * ( eLevel + 4.5 * ( eLevel - 60))) , 0.75)
	end
	reductionPercentage["fire"] = math.min(0.75,(eRes["fire"] / (pLevel * 5)) * 0.75)
	reductionPercentage["frost"] = math.min(0.75,(eRes["frost"] / (pLevel * 5)) * 0.75)
	reductionPercentage["arcane"] = math.min(0.75,(eRes["arcane"] / (pLevel * 5)) * 0.75) 
	reductionPercentage["nature"] = math.min(0.75,(eRes["nature"] / (pLevel * 5)) * 0.75)
	reductionPercentage["shadow"] = math.min(0.75,(eRes["shadow"] / (pLevel * 5)) * 0.75)
	reductionPercentage["holy"] = math.min(0.75,(eRes["holy"] / (pLevel * 5)) * 0.75)
	return reductionPercentage
end

function calculateBlock(pDmg, eAttr, eBlockValue)
	local blockedDmg = math.max(0, pDmg - (eBlockValue + eAttr / 2))
	return {dmg=blockedDmg, blocked=math.min(pDmg, eBlockValue + eAttr / 2)}
end


function getRandomDamage(weapon)
	local damage={phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local schools = {"phy","fire","frost","arcane","holy","shadow","nature"}
	for i = 1, #schools do
		damage[schools[i]] = math.random(weapon["schools"][schools[i]]["min"] , weapon["schools"][schools[i]]["max"])
		--if(schools[i] == "Physical") then
		--	physDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Fire") then
		--	fireDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Frost") then
		--	frostDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Arcane") then
		--	arcaneDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Nature") then
		--	natureDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Shadow") then
		--	shadowDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--elseif(schools[i] == "Holy") then
		--	holyDamage = math.random(tonumber(weapon[schools[i]]["min"]) , tonumber(weapon[schools[i]]["max"]))
		--end
	end
	return damage--{phy=physDamage, fire=fireDamage,frost=frostDamage,arcane=arcaneDamage,nature=natureDamage,shadow=shadowDamage,holy=holyDamage}
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end