function init(self)
	math.randomseed(os.time())
	currentTick = 0
	tickTime = 1
	tickTimer = 60 * tickTime
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if(testRuns >= 1) then
		tickTimer = tickTimer - 1
		if(tickTimer <= 0) then
			currentTick = currentTick + 1 * tickTime
			tickTimer = 60 * tickTime
			local cData = getCharacterData()
			if(currentTick % 2 == 0) then
				for k, v in pairs(cData) do
					calculateRegeneration(k, 2)
				end
			end
			if(currentTick % 5 == 0) then
				for k, v in pairs(cData) do
					calculateRegeneration(k, 5)
				end
			end
			for k, v in pairs(cData) do
				local pHitRecently = getCharacterBattleStatus(k, "hitRecently")
				setCharacterBattleStatus(k, "hitRecently", math.max(0, pHitRecently-1))
			end
			updateAuras()
			applyAuraEffects()
			print("Tick "..currentTick)
		end
	end
end

function on_message(self, message_id, message, sender)
	math.random()
	if(message_id == hash("getAttackResult")) then
		local eDefSkill = getEnemyLevel(message.e) * 5
		local eWpnSkill = eDefSkill
		local eAvoidance = getEnemyAvoidance(message.e)
		local eArmor = getEnemyArmor(message.e)
		local pLevel = getCharacterLevel(message.p)
		local eLevel = getEnemyLevel(message.e)
		local eResistance = getEnemyResistance(message.e)
		local eAttr = getEnemyAttribute(message.e)
		local eBlockValue = getEnemyBlock(message.e)
		local pCritChance = 0
		local pHitBonus = 0
		local pAp = 0
		local isRanged = false
		local pWpnSkill = 0
		local pWeapon = 0
		
		if(message.pSource == "Weapon") then
			pWeapons = getCharacterWeapons(message.p)
			local pWeaponType = getCharacterWeaponType(message.p, message.pId)
			pWpnSkill = getCharacterSkillValue(message.p ,pWeaponType)
			if(message.pId == "weaponRanged") then
				isRanged = true
			end
			pHitBonus = getCharacterHit(message.p)
			pCritChance = getCharacterCrit(message.p)
			pAp = getCharacterAttackpower(message.p)
		else
			pWeapon = ability[tostring(message.pId)]
			pWpnSkill = -1
			pHitBonus = getCharacterSpellHit(message.p)
			pCritChance = getCharacterSpellCrit(message.p)
			pAp = getCharacterSpellpower(message.p)
		end
		local pDefSkill = getCharacterSkillValue(message.p ,"Defense")
		local pAttr = getCharacterAttribute(message.p)
		local pBlockValue = 0
		if(getCharacterWeaponType(message.p, "weaponOH") == "Shield") then
			pBlockValue = getCharacterWeaponBlock(message.p)
		end
		local isMob = false
		if(message.attacker == "mob") then
			pWpnSkill = eWpnSkill
			pDefSkill = eDefSkill
			eDefSkill = getCharacterSkillValue(message.p ,"Defense")
			eWpnSkill = getCharacterSkillValue(message.p ,pWeaponType)
			eAvoidance = getCharacterAvoidance(message.p)
			pCritChance = getEnemyCrit(message.e)
			pLevel = eLevel
			eLevel = getCharacterLevel(message.p)
			pAttr = eAttr
			eAttr = getCharacterAttribute(message.p)
			pBlockValue = eBlockValue
			eBlockValue = 0
			eArmor = getCharacterArmor(message.p)
			eResistance = getCharacterResistance(message.p)
			if(getCharacterWeaponType(message.p, "weaponOH") == "Shield") then
				eBlockValue = getCharacterWeaponBlock(message.p)
			end
			isMob = true
		end

		local attackType = 0
		if(message.special == true) then
			attackType = 1
		elseif(message.pSource == "Ability") then
			attackType = 2
		end
		--print(eDefSkill, pWpnSkill)
		local pHitChance = calculateHitChance(pWpnSkill, pHitBonus, eDefSkill, pLevel, eLevel, message.dw, attackType)
		--print(pHitChance)
		local pAttackTable = generateAttackTable(pLevel,pWpnSkill, pDefSkill, pHitChance, pCritChance, eLevel, eWpnSkill, eDefSkill, eAvoidance, attackType, isRanged, message.front,message.block, isMob, characterData[message.p]["stats"]["class"])
		--tprint(pAttackTable)
		local pAttackResult = getAttackResult(pAttackTable, attackType, pCritChance)
		--print(pAttackResult)
		local pDmgDone = 0

		local damageMult = 1
		local damageRolls = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
		local enemySchools = getEnemySchool(message.e)
		if(isMob == true) then
			damageRolls = getRandomDamage(enemySchools)
		else
			damageRolls = getRandomDamage(pWeapons[message.pId])
		end
		if(pAttackResult == "glancingBlow") then
			damageMult =  calculateGlancingBlowMult(pWpnSkill, eDefSkill)
		elseif(pAttackResult == "crit") then
			if(attackType == 2) then
				damageMult = 1.5
			else
				damageMult = 2
			end
		elseif(pAttackResult == "crushingBlow") then
			damageMult = 1.5
		end
		
		if (pAttackResult == "miss" or pAttackResult == "dodge" or pAttackResult == "parry") then
			damageRolls = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
		end

		local pDmgReduction = calculateDamageReduction(pLevel, eArmor, eResistance, eLevel)
		pDmgDone = calculateDamage(damageRolls, pAp, pDmgReduction)

		local blockDamage = {dmg=pDmgDone["phy"],blocked=0}
		if (pAttackResult == "block") then
			blockDamage = calculateBlock(pDmgDone["phy"], eAttr["str"], eBlockValue)
			--print(blockDamage["dmg"], blockDamage["blocked"])
			pDmgDone["phy"] = blockDamage["dmg"]
		elseif (pAttackResult == "critBlock") then
			blockDamage = calculateBlock(pDmgDone["phy"] * damageMult, eAttr["str"], eBlockValue)
			--print(blockDamage["dmg"], blockDamage["blocked"])
			pDmgDone["phy"] = blockDamage["dmg"]
		end
		
		local pDmgResult = 0
		if(pAttackResult == "glancingBlow") then
			pDmgResult = pDmgResult + pDmgDone["phy"] * damageMult + pDmgDone["fire"] + pDmgDone["frost"] + pDmgDone["arcane"] + pDmgDone["nature"] + pDmgDone["shadow"] + pDmgDone["holy"]
		else
			for k, v in pairs(pDmgDone) do
				pDmgResult = pDmgResult + v * damageMult
			end
		end

		local pProcDamage = {phy=0}
		local pProcBlocked = {phy=0}
		if not(pAttackResult == "parry" or pAttackResult == "dodge" or pAttackResult == "miss") then
			local slot = "weaponMH"
			if( isRanged == true) then
				slot = "weaponRanged"
			elseif(attackType == 2) then
				slot = "spell"
			end
			pProcResult = calculateProcs(isMob,message.p, slot, pAttackTable, pCritChance, pDmgReduction, eAttr, eBlockValue, eDefSkill)
			pProcDamage = pProcResult["damage"]
			pProcBlocked["phy"] = pProcResult["blocked"]

			if(attackType == 2) then
				applySpellEffects(message.pId, message.p)
			end
		end

		
		
		msg.post(sender, hash("returnAttackResult"), {result=pAttackResult, damageTable=pDmgDone, damageResult= pDmgResult, blockedDamage = (blockDamage["blocked"]+pProcBlocked["phy"]), rawDamage= damageRolls, reducedDamage=pDmgReduction, procDamage=pProcDamage})
	elseif(message_id == hash("getCombatStats")) then
		--removeAura(message.p, 465)
		--applyAura(message.p, 6, "testEnemy")
		if not(message.skip == true) then
			equipItem(message.p, "weapon", "weaponMH", 12583)
			equipItem(message.p, "armor", "trinket1", 11815)
			equipItem(message.p, "armor", "shoulder", 16868)
			equipItem(message.p, "armor", "waist", 16864)
			equipItem(message.p, "armor", "hands", 16863)
			equipItem(message.p, "weapon", "weaponRanged", 9412)
			--applyAura(message.p, 19740)
			--applyAura(message.p, 6, "testEnemy")
			--applyAura(message.p, 465)
			
			calculateBaseStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateEquipmentStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateCombatStats(message.p)
			--tprint(characterData[message.p]["stats"])
			calculateRacials(message.p)

			--tprint(getCharacterData(message.p))
			--tprint(characterData[message.p])
		end
		msg.post(sender, hash("returnCombatStats"), {p=message.p})
	end
end

function calculateRegeneration(character, type)
	local pHp = getCharacterStat(character,"hpCurrent")
	local pHpMax = getCharacterStat(character,"hpMax")
	local pRes = getCharacterStat(character,"resCurrent")
	local pResMax = getCharacterStat(character,"resMax")
	local pHpRegen = getCharacterStat(character,"hpRegen")
	local pMpRegen = getCharacterStat(character,"mpRegen")

	local pClass = getCharacterStat(character, "class")
	local pRace = getCharacterStat(character, "race")

	local pBattle = getCharacterBattleStatus(character, "hitRecently")

	if(type == 2) then
		if(pBattle == 0) then
			applyHeal(character, math.min(pHpMax, pHp + pHpRegen))
			--characterData[character]["stats"]["hpCurrent"] = math.min(pHpMax, pHp + pHpRegen)
		elseif(pBattle >= 1 and pRace == "Troll") then
			applyHeal(character, math.min(pHpMax, pHp + (pHpRegen * 0.1)))
			--characterData[character]["stats"]["hpCurrent"] = math.min(pHpMax, pHp + (pHpRegen * 0.1))
		end
		if(pClass == "Rogue") then
			applyResource(character, math.min(pResMax, pRes + 20))
			--characterData[character]["stats"]["resCurrent"] = math.min(pResMax, pRes + 20)
		end
	elseif(type == 5) then
		if not(pClass == "Warrior" or pClass == "Rogue") then
			applyResource(character, math.min(pResMax, pRes + pMpRegen))
			--characterData[character]["stats"]["resCurrent"] = math.min(pResMax, pRes + pMpRegen)
		end
	end
end

function applyDamage(character, value)
	local pHp = getCharacterStat(character, "hpCurrent")

	setCharacterStas(character, "hpCurrent", math.max(0, pHp - value))
	setCharacterBattleStatus(character, "hitRecently", 5)
	
	print(character .. " was dealt "..value)
end

function applyHeal(character, value)
	--local pHp = getCharacterStat(character,"hpCurrent")
	local pHpMax = getCharacterStat(character,"hpMax")

	setCharacterStat(character, "hpCurrent", math.min(pHpMax, value))
end

function applyResource(character, value)
	local pResMax = getCharacterStat(character,"resMax")
	
	setCharacterStat(character, "resCurrent", math.min(pResMax, value))
end

function applyAuraEffects()
	for k, v in pairs(characterData) do
		--print(v["stats"]["hpCurrent"], v["stats"]["hpMax"])
		if not( v["buffs"] == nil) then
			for j,l in pairs(v["buffs"]) do
				aEffect = effect[tostring(l["id"])]
				if(characterData[k]["buffs"][j]["active"] == false) then
					if(aEffect["condition"] == "Buff") then
						characterData[k]["buffs"][j]["active"] = true
						if(aEffect["type"] == "IncreaseStat") then
							characterData[k]["stats"][aEffect["stat"]] = v["stats"][aEffect["stat"]] + aEffect["value"]
							print("Buff "..aEffect["name"].." on player "..k..": Increase "..aEffect["stat"].." by "..aEffect["value"])
						end
					elseif(aEffect["condition"] == "AuraBuff") then
						characterData[k]["buffs"][j]["active"] = true
						if(aEffect["type"] == "IncreaseStat") then
							characterData[k]["stats"][aEffect["stat"]] = v["stats"][aEffect["stat"]] + aEffect["value"]
							print("Aura "..aEffect["name"].." on player "..k..": Increase "..aEffect["stat"].." by "..aEffect["value"])
						end
					end
				else
					if not(aEffect["condition"] == "AuraBuff") then
						if(characterData[k]["buffs"][j]["duration"] <= 1) then
							if(aEffect["condition"] == "Buff") then
								if(aEffect["type"] == "IncreaseStat") then
									characterData[k]["stats"][aEffect["stat"]] = math.max(0,v["stats"][aEffect["stat"]] - aEffect["value"])
									print("Buff gone "..aEffect["name"].." on player "..k..": Removed "..aEffect["stat"].." by "..aEffect["value"])
									characterData[k]["buffs"][j]["active"] = 3
								end
							end
						end
					else
						if(characterData[k]["buffs"][j]["active"] == 2) then
							if(aEffect["type"] == "IncreaseStat") then
								characterData[k]["stats"][aEffect["stat"]] = math.max(0,v["stats"][aEffect["stat"]] - aEffect["value"])
								print("Aura gone "..aEffect["name"].." on player "..k..": Removed "..aEffect["stat"].." by "..aEffect["value"])
								characterData[k]["buffs"][j]["active"] = 3
							end
						end
					end
				end
			end
		end
		if not( v["debuffs"] == nil) then
			for j,l in pairs(v["debuffs"]) do
				aEffect = effect[tostring(l["id"])]
				if(characterData[k]["debuffs"][j]["active"] == false) then
					if(aEffect["condition"] == "Debuff") then
						characterData[k]["debuffs"][j]["active"] = true
						if(aEffect["type"] == "DoT") then
							print("Debuff "..aEffect["name"].." on player "..k..": "..aEffect["type"].." "..aEffect["stat"].." over "..aEffect["duration"].." for "..aEffect["tick"])
						end
					end
				elseif(characterData[k]["debuffs"][j]["active"] == true) then
					if not(aEffect["condition"] == "AuraDebuff") then
						if (characterData[k]["debuffs"][j]["duration"] >= (1 / characterData[k]["debuffs"][j]["tick"]))then
							print(characterData[k]["debuffs"][j]["duration"])
							if(aEffect["condition"] == "Debuff") then
								if(aEffect["type"] == "DoT") then
									if not(characterData[k]["debuffs"][j]["source"] == "None") then
										dDmgReduction = calculateDamageReduction(mobData[characterData[k]["debuffs"][j]["source"]]["level"], characterData[k]["stats"]["armor"], characterData[k]["stats"]["resist"], characterData[k]["stats"]["level"])
										dDmg = getRandomDamage(aEffect)
										dDmgRaw = calculateDamage(dDmg, 0, dDmgReduction)
										dDmgDone = (dDmgRaw["phy"] + dDmgRaw["fire"] + dDmgRaw["frost"] + dDmgRaw["arcane"] + dDmgRaw["nature"] + dDmgRaw["holy"] + dDmgRaw["shadow"]) / aEffect["duration"]
										applyDamage(k, dDmgDone)
									end
								end
							end
						else--(characterData[k]["debuffs"][j]["duration"] <= (1 / characterData[k]["debuffs"][j]["tick"])) then
							if(aEffect["condition"] == "Debuff") then
								if(aEffect["type"] == "DoT") then
									if not(characterData[k]["debuffs"][j]["source"] == "None") then
										dDmgReduction = calculateDamageReduction(mobData[characterData[k]["debuffs"][j]["source"]]["level"], characterData[k]["stats"]["armor"], characterData[k]["stats"]["resist"], characterData[k]["stats"]["level"])
										dDmg = getRandomDamage(aEffect)
										dDmgRaw = calculateDamage(dDmg, 0, dDmgReduction)
										dDmgDone = (dDmgRaw["phy"] + dDmgRaw["fire"] + dDmgRaw["frost"] + dDmgRaw["arcane"] + dDmgRaw["nature"] + dDmgRaw["holy"] + dDmgRaw["shadow"]) / aEffect["duration"]
										applyDamage(k, dDmgDone)
										print("Debuff gone "..aEffect["name"].." on player "..k..": "..aEffect["type"].." "..aEffect["stat"].." over "..aEffect["duration"].." every "..aEffect["tick"])
										characterData[k]["debuffs"][j]["active"] = 3
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

function applySpellEffects(spell, target)
	--pAbility = ability[tostring(spell)]
	for i = 1, 3 do
		local aEffect = getAbilityEffect(spell)
		if not(aEffect[i] == 0) then
			local eCondition = getEffectCondition(aEffect[i])
			local eChance = getEffectChance(aEffect[i])
			--pEffect = effect[tostring(pAbility["effectId"][i])]
			if(eCondition == "Debuff") then
				local procChance = math.random()*100
				if(procChance <= eChance) then
					applyAura(target, tostring(aEffect[i]))
				end
			end
		end
	end
end

function calculateBaseStats(character)
	local pRace = getCharacterStat(character, "race")
	local pClass = getCharacterStat(character, "class")
	local pLevel = getCharacterStat(character,"level")

	local pBaseValues = getLevelStats(pLevel, pRace, pClass)

	setCharacterStat(character, "attr", pBaseValues["levelStats"])
	setCharacterStat(character, "basehp", pBaseValues["baseStats"]["basehp"])
	setCharacterStat(character, "baseRes", pBaseValues["baseStats"]["baseRes"])

end

function calculateGlancingBlowMult(pWpnSkill, eDefSkill)
	return math.max(0.40,1 - math.abs(math.min(0,5 + pWpnSkill - eDefSkill) * 0.03))
end

function calculateEquipmentStats(character)
	local pEquipmentStats = {rap=0,ap=0, armor=0, attr={str=0,agi=0,sta=0,int=0,spr=0},crit=0,hit=0, dodge=0, block=0, blockValue=0,parry=0, resist={fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}, skill={Defense=0}}
	local pSetPieces = {}
	local equipmentSlots = {"weaponMH","weaponOH","weaponRanged","helmet","necklace","shoulder","cloak","chest","wrists","hands","waist","legs","feet","ring1","ring2","trinket1","trinket2"}
	for i = 1, #equipmentSlots do
		pCurrentEquipment = getCharacterEquipmentSlot(character, equipmentSlots[i])
		if not (pCurrentEquipment["type"] == "None") then
			pEquipmentStats["armor"] = pEquipmentStats["armor"] + pCurrentEquipment["armor"]
			
			pEquipmentStats["attr"]["str"] = pEquipmentStats["attr"]["str"] + pCurrentEquipment["attr"]["str"]
			pEquipmentStats["attr"]["agi"] = pEquipmentStats["attr"]["agi"] + pCurrentEquipment["attr"]["agi"]
			pEquipmentStats["attr"]["sta"] = pEquipmentStats["attr"]["sta"] + pCurrentEquipment["attr"]["sta"]
			pEquipmentStats["attr"]["int"] = pEquipmentStats["attr"]["int"] + pCurrentEquipment["attr"]["int"]
			pEquipmentStats["attr"]["spr"] = pEquipmentStats["attr"]["spr"] + pCurrentEquipment["attr"]["spr"]
			pEquipmentStats["resist"]["fire"] = pEquipmentStats["resist"]["fire"] + pCurrentEquipment["resist"]["fire"]
			pEquipmentStats["resist"]["shadow"] = pEquipmentStats["resist"]["shadow"] + pCurrentEquipment["resist"]["shadow"]
			pEquipmentStats["resist"]["frost"] = pEquipmentStats["resist"]["frost"] + pCurrentEquipment["resist"]["frost"]
			pEquipmentStats["resist"]["arcane"] = pEquipmentStats["resist"]["arcane"] + pCurrentEquipment["resist"]["arcane"]
			pEquipmentStats["resist"]["nature"] = pEquipmentStats["resist"]["nature"] + pCurrentEquipment["resist"]["nature"]
			pEquipmentStats["resist"]["holy"] = pEquipmentStats["resist"]["holy"] + pCurrentEquipment["resist"]["holy"]
			for k = 1, 3 do
				if not(pCurrentEquipment["effectId"][k] == 0) then
					local eqEffect = effect[tostring(pCurrentEquipment["effectId"][k])]
					local eqStat = tostring(eqEffect["stat"])
					if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
						pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
					elseif(eqEffect["type"] == "IncreaseSkill" and eqEffect["condition"] == "Equip") then
						pEquipmentStats["skill"][eqStat] = pEquipmentStats["skill"][eqStat] + eqEffect["value"]
					end	
				end
			end
			if not(pCurrentEquipment["setid"] == 0 or pCurrentEquipment["setid"] == nil) then
				local eqSet = set[tostring(pCurrentEquipment["setid"])]
				if(pSetPieces[pCurrentEquipment["setid"]] == nil) then
					table.insert(pSetPieces, pCurrentEquipment["setid"], 1)
				end
				pSetPieces[pCurrentEquipment["setid"]] = pSetPieces[pCurrentEquipment["setid"]] + 1
				for k, v in pairs(eqSet["bonus"]) do
					if(pSetPieces[pCurrentEquipment["setid"]] == tonumber(k)) then
						local eqEffect = effect[tostring(v)]
						local eqStat = tostring(eqEffect["stat"])
						if(eqEffect["type"] == "IncreaseStat" and eqEffect["condition"] == "Equip") then
							pEquipmentStats[eqStat] = pEquipmentStats[eqStat] + eqEffect["value"]
						end
					end
				end
			end
		end
	end
	
	local pAttr = getCharacterStat(character, "attr")
	pAttr["str"] = pAttr["str"] + pEquipmentStats["attr"]["str"]
	pAttr["agi"] = pAttr["agi"] + pEquipmentStats["attr"]["agi"]
	pAttr["sta"] = pAttr["sta"] + pEquipmentStats["attr"]["sta"]
	pAttr["int"] = pAttr["int"] + pEquipmentStats["attr"]["int"]
	pAttr["spr"] = pAttr["spr"] + pEquipmentStats["attr"]["spr"]
	setCharacterStat(character, "attr", pAttr)

	local pCrit = getCharacterStat(character, "crit")
	pCrit = pCrit + pEquipmentStats["crit"]
	setCharacterStat(character, "crit", pCrit)

	local pHit = getCharacterStat(character, "hit")
	pHit = pHit + pEquipmentStats["hit"]
	setCharacterStat(character, "hit", pHit)

	local pAp = getCharacterStat(character, "ap")
	local pRap = getCharacterStat(character, "rAp")
	pAp = pAp + pEquipmentStats["ap"]
	pRap = pRap + pEquipmentStats["ap"] + pEquipmentStats["rap"]
	setCharacterStat(character, "ap", pAp)
	setCharacterStat(character, "rAp", pRap)

	local pResist = getCharacterStat(character, "resist")
	pResist["fire"] = pResist["fire"] + pEquipmentStats["resist"]["fire"]
	pResist["frost"] = pResist["frost"] + pEquipmentStats["resist"]["frost"]
	pResist["nature"] = pResist["nature"] + pEquipmentStats["resist"]["nature"]
	pResist["arcane"] = pResist["arcane"] + pEquipmentStats["resist"]["arcane"]
	pResist["holy"] = pResist["holy"] + pEquipmentStats["resist"]["holy"]
	pResist["shadow"] = pResist["shadow"] + pEquipmentStats["resist"]["shadow"]
	setCharacterStat(character, "resist", pResist)

	local pSkill = getCharacterStat(character, "skill")
	pSkill["Defense"] = pSkill["Defense"] + pEquipmentStats["skill"]["Defense"]
	setCharacterStat(character, "skill", pSkill)

	local pArmor = getCharacterStat(character, "armor")
	pArmor = pArmor + pEquipmentStats["armor"]
	setCharacterStat(character, "armor", pArmor)

	local pAvoidance = getCharacterStat(character, "avoidance")
	pAvoidance["block"] = pAvoidance["block"] + pEquipmentStats["block"]
	pAvoidance["dodge"] = pAvoidance["dodge"] + pEquipmentStats["dodge"]
	pAvoidance["parry"] = pAvoidance["parry"] + pEquipmentStats["parry"]
	setCharacterStat(character, "avoidance", pAvoidance)
	
	--tprint(pEquipmentStats)
	local pBlockValue = getCharacterEquipmentValue(character, "weaponOH", "blockValue")
	pBlockValue = pBlockValue + pEquipmentStats["blockValue"]
	setCharacterEquipmentValue(character, "weaponOH", "blockValue", pBlockValue)
end

function calculateCombatStats(character)
	local pClass = getCharacterStat(character, "class")
	local pAttr = getCharacterStat(character, "attr")
	local pAvoidance = getCharacterStat(character, "avoidance")
	local pBaseAp = getCharacterStat(character, "baseAp")
	local pBaseRAp = getCharacterStat(character, "baseRAp")
	
	-- Strength
	if(pClass == "Warrior" or pClass == "Shaman" or pClass == "Paladin" or pClass == "Druid") then
		pBaseAp = 2 * pAttr["str"]
	else
		pBaseAp = 1 * pAttr["str"]
	end
	-- Agility
		-- Melee Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Druid") then
		pBaseAp = pBaseAp + 1 * pAttr["agi"]
		
	end
		-- Range Ap
	if(pClass == "Warrior" or pClass == "Rogue" or pClass == "Hunter") then
		pBaseRAp = pBaseRAp + 1 * pAttr["agi"]
	end
	setCharacterStat(character, "baseAp", pBaseAp)
	setCharacterStat(character, "baseRAp", pBaseRAp)
	local pAp = getCharacterStat(character, "ap")
	setCharacterStat(character, "ap", (pAp + pBaseAp))
	setCharacterStat(character, "rAp", (pAp + pBaseRAp))

	local pBaseCrit = getCharacterStat(character, "baseCrit")
		-- Crit
	if(pClass == "Warrior" or pClass == "Paladin" or pClass == "Shaman" or pClass == "Warlock") then
		pBaseCrit = 1 * ( pAttr["agi"] / 20)
	elseif(pClass == "Rogue") then
		pBaseCrit = 1 * ( pAttr["agi"] / 29)
	elseif(pClass == "Hunter") then
		pBaseCrit = 1 * ( pAttr["agi"] / 53)
	end
	setCharacterStat(character, "baseCrit", pBaseCrit)
	local pCrit = getCharacterStat(character, "crit")
	setCharacterStat(character, "crit", (pBaseCrit + pCrit))
	
		-- Dodge
	if(pClass == "Rogue") then
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 14.5)
	elseif(pClass == "Hunter") then
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 26)
	else
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1 * ( pAttr["agi"] / 20)
	end
	setCharacterStat(character, "avoidance", pAvoidance)

	local pBaseArmor = getCharacterStat(character, "baseArmor")
		-- Armor
	pBaseArmor = 2 * pAttr["agi"]
	local pArmor = getCharacterStat(character, "armor")
	setCharacterStat(character, "armor", (pBaseArmor + pArmor))

	-- Stamina
		-- HP
	local pRace = getCharacterStat(character, "race")
	local pMaxHp = getCharacterStat(character, "hpMax")
	local pBaseHp = getCharacterStat(character, "basehp")
	if(pRace == "Tauren") then
		pMaxHp = pBaseHp + math.min(pAttr["sta"], 20) + 10.5 * math.max(0, (pAttr["sta"]-20))
	else
		pMaxHp = pBaseHp + math.min(pAttr["sta"], 20) + 10 * math.max(0, (pAttr["sta"]-20))
	end
	setCharacterStat(character, "hpMax", pMaxHp)

	-- Intelligence
		-- Mana
	local pMaxRes = getCharacterStat(character, "resMax")
	local pBaseRes = getCharacterStat(character, "baseRes")
	if not(pClass == "Warrior" or pClass == "Rogue") then
		pMaxRes = pBaseRes + 15 * pAttr["int"]
	end
	setCharacterStat(character, "resMax", pMaxRes)
		-- Spellcrit
	local pBaseSCrit = getCharacterStat(character, "baseSCrit")
	local pSCrit = getCharacterStat(character, "sCrit")
	if (pClass == "Paladin") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 54)
	elseif (pClass == "Shaman") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 59.2)
	elseif (pClass == "Mage" or pClass == "Priest") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 59.5)
	elseif (pClass == "Druid") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 60)
	elseif (pClass == "Warlock") then
		pSCrit = pBaseSCrit + 1 * (pAttr["int"] / 60.6)
	end
	setCharacterStat(character, "sCrit", pSCrit)

	-- Spirit
		-- HP & MP regeneration
	local pHpRegen = getCharacterStat(character, "hpRegen")
	local pMpRegen = getCharacterStat(character, "mpRegen")
	if(pClass == "Druid") then
		pHpRegen = (pAttr["spr"] * 0.09) + 6.5
		pMpRegen = (pAttr["spr"] / 4.5) + 15
	elseif(pClass == "Paladin" or pClass == "Hunter") then
		pHpRegen = (pAttr["spr"] * 0.25) + 6
		pMpRegen = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Warlock") then
		pHpRegen = (pAttr["spr"] * 0.07) + 6
		pMpRegen = (pAttr["spr"] / 5) + 15
	elseif(pClass == "Shaman") then
		pHpRegen = (pAttr["spr"] * 0.11) + 7
		pMpRegen = (pAttr["spr"] / 5) + 17
	elseif(pClass == "Mage" or pClass == "Priest") then
		pHpRegen = (pAttr["spr"] * 0.1) + 5
		pMpRegen = (pAttr["spr"] / 4) + 12.5
	elseif(pClass == "Warrior") then
		pHpRegen = (pAttr["spr"] * 0.8) + 6
	elseif(pClass == "Rogue") then
		pHpRegen = (pAttr["spr"] * 0.5) + 2
	end
	setCharacterStat(character, "hpRegen", pHpRegen)
	setCharacterStat(character, "mpRegen", pMpRegen)
end

function calculateRacials(character)
	local pRace = getCharacterStat(character, "race")
	local pAttr = getCharacterStat(character, "attr")
	local pSkill = getCharacterStat(character, "skill")
	local pResistance = getCharacterStat(character, "resist")
	local pProfession = getCharacterStat(character, "profession")
	local pAvoidance = getCharacterStat(character, "avoidance")
	local pHpRegen = getCharacterStat(character, "hpRegen")
	if(pRace == "Human") then
		pAttr["spr"] = math.floor(pAttr["spr"] + pAttr["spr"] * 0.05)
		pSkill["OneHandedSword"] = pSkill["OneHandedSword"] + 5
		pSkill["OneHandedMace"] = pSkill["OneHandedMace"] + 5
		pSkill["TwoHandedSword"] = pSkill["TwoHandedSword"] + 5
		pSkill["TwoHandedMace"] = pSkill["TwoHandedMace"] + 5
	elseif(pRace == "Dwarf") then
		pResistance["frost"] = pResistance["frost"] + 10
		pSkill["Gun"]["Gun"] = pSkill["Gun"] + 5
	elseif(pRace == "Gnome") then
		pResistance["arcane"] = pResistance["arcane"] + 10
		pProfession["engineering"] = pProfession["engineering"] + 15
		pAttr["int"] = math.floor(pAttr["int"] + pAttr["int"] * 0.05)
	elseif(pRace == "Nightelf") then
		pResistance["nature"] = pResistance["nature"] + 10
		pAvoidance["dodge"] = pAvoidance["dodge"] + 1
	elseif(pRace == "Orc") then
		pSkill["OneHandedAxe"] = pSkill["OneHandedAxe"] + 5
		pSkill["TwoHandedAxe"] = pSkill["TwoHandedAxe"] + 5
	elseif(pRace == "Tauren") then
		pResistance["nature"] = pResistance["nature"] + 10
		pProfession["herbalism"] = pProfession["herbalism"] + 15
	elseif(pRace == "Undead") then
		pResistance["shadow"] = pResistance["shadow"] + 10
	elseif(pRace == "Troll") then
		pSkill["Throwing"] = pSkill["Throwing"] + 5
		pSkill["Bow"] = pSkill["Bow"] + 5
		pHpRegen = pHpRegen + pHpRegen * 0.10
	end
	setCharacterStat(character, "attr", pAttr)
	setCharacterStat(character, "skill", pSkill)
	setCharacterStat(character, "resist", pResistance)
	setCharacterStat(character, "profession", pProfession)
	setCharacterStat(character, "avoidance", pAvoidance)
	setCharacterStat(character, "hpRegen", pHpRegen)
end

function calculateHitChance(pWpnSkill, pHitBonus, eDefSkill, pLevel, eLevel, dualWield, special)
	local rHitChance = 100
	local baseMiss = 5
	if not(special == 2) then
		if (special == 0) then
			local baseMissP = math.max(0,baseMiss - (eDefSkill - pWpnSkill) * 0.04)
			local baseMissE = math.max(0,baseMiss + (pWpnSkill - eDefSkill) * 0.02)
			baseMiss = (baseMissP + baseMissE) / 2
		end
		if(dualWield == true and special == 0) then
			baseMiss = baseMiss + 19
		end
		if(eDefSkill - pWpnSkill > 10) then
			rHitChance = math.max(0,100 - ((baseMiss + 2) + (eDefSkill - pWpnSkill - 10) * 0.4) + pHitBonus)
		else
			rHitChance = math.max(0,100 - (baseMiss + (eDefSkill - pWpnSkill) * 0.1) + pHitBonus)
		end
	else
		rHitChance = 99
		baseMiss = 1
		if(pLevel == eLevel) then
			baseMiss = baseMiss + 3
		elseif(pLevel == (eLevel - 1)) then
			baseMiss = baseMiss + 4
		elseif(pLevel == (eLevel - 2)) then
			baseMiss = baseMiss + 5
		elseif(pLevel <= (eLevel - 3)) then
			baseMiss = baseMiss + 5 + 11 * (eLevel - pLevel - 2)
		end
		rHitChance = math.max(1, math.min(99,rHitChance - baseMiss + pHitBonus))
	end
	--print(rHitChance)
	return rHitChance
end

function calculateProcs(pAttacked,character, pWeapon, pAttackTable, pCrit, eDmgReduction, eAttr, eBlockValue, eDefSkill)
	local eqChance = {"weaponMH","weaponOH","weaponRanged","trinket1","trinket2"}
	local procDamage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local procs = {}
	local blockDamage = 0
	if not (pAttacked == true) then
		for i = 1, #eqChance do
			for k = 1, 3 do
				local pEquipmentStats = getCharacterEquipmentValue(character, eqChance[i], "effectId")
				if not(pEquipmentStats[k] == 0) then
					local eType = getEffectType(pEquipmentStats[k])
					local eChance = getEffectChance(pEquipmentStats[k])
					local eCondition = getEffectCondition(pEquipmentStats[k])
					local eSchools = getEffectSchool(pEquipmentStats[k])
					local eStat = getEffectStat(pEquipmentStats[k])
					local eValue = getEffectValue(pEquipmentStats[k])
					local eName = getEffectName(pEquipmentStats[k])
					
					if((eqChance[i] == "trinket1" or eqChance[i] == "trinket2") or eqChance[i] == pWeapon) then
						--print(eqChance[i],eqEffect["stat"],eqEffect["condition"])
						if(eType == "DirectDamage" and eCondition == "OnHit") then
							local procChance = math.random()*100
							if(procChance <= eChance) then
								local critChance = math.random()*100
								local phyMult = 1
								local eleMult = 1
								if(critChance <= pCrit) then
									phyMult = 2
									eleMult = 1.5
								end
								table.insert(procs, #procs, {source=eName,id=tostring(pEquipmentStats[k]),schools=eSchools, phyMult=phyMult,eleMult=eleMult,blocked=0,ap=0})
							end
						elseif(eType == "ExtraAttack" and eCondition == "OnHit") then
							if(eStat == "Melee" and not (pWeapon == "weaponRanged") and not (pWeapon == "spell")) then 
								local procChance = math.random()*100
								if(procChance <= eChance) then
									for runs = 1, eValue do
										local pExtraHit = 0
										pExtraHit = getAttackResult(pAttackTable, false, pCrit)
										if not(pExtraHit == "miss" or pExtraHit == "dodge" or pExtraHit == "parry") then
											local pWeaponSchools = getCharacterEquipmentValue(character, pWeapon, "schools")
											local pWeaponType = getCharacterEquipmentValue(character, pWeapon, "type")
											local pSkill = getCharacterStat(character, "skill")
											local pAp = getCharacterStat(character, "ap")
											local pExtraHitDamage = {min=pWeaponSchools["phy"]["min"],max=pWeaponSchools["phy"]["max"],blocked=0}
											local pExtraHitMult = 1
											if(pExtraHit == "crit") then
												pExtraHitMult = 2
											elseif(pExtraHit == "glancingBlow") then
												pExtraHitMult = calculateGlancingBlowMult(pSkill[pWeaponType], eDefSkill)
											elseif(pExtraHit == "block") then
												local blockDamageMin = calculateBlock(pExtraHitDamage["min"], eAttr["str"], eBlockValue)
												local blockDamageMax = calculateBlock(pExtraHitDamage["max"], eAttr["str"], eBlockValue)
												pExtraHitDamage["min"] = blockDamageMin["dmg"]
												pExtraHitDamage["max"] = blockDamageMax["dmg"]
												pExtraHitDamage["blocked"] = (blockDamageMin["blocked"] + blockDamageMax["blocked"]) / 2 
											end
											table.insert(procs, #procs, {source=eName,id=tostring(pEquipmentStats[k]),ap=pAp,schools={phy={min=pExtraHitDamage["min"],max=pExtraHitDamage["max"]},fire={min=0,max=0},frost={min=0,max=0},arcane={min=0,max=0},nature={min=0,max=0},shadow={min=0,max=0},holy={min=0,max=0}},phyMult=pExtraHitMult,eleMult=1,blocked=pExtraHitDamage["blocked"]})
										end
									end
								end
							end
						end
					end
				end
			end
		end
		for k, v in pairs(procs) do
			local proc = getRandomDamage(procs[k])
			for j, l in pairs(proc) do
				if(j == "phy") then
					l = l * procs[k]["phyMult"]
				else
					l = l * procs[k]["eleMult"]
				end
			end
			local procDamageSchools = calculateDamage(proc, procs[k]["ap"], eDmgReduction)
			--tprint(proc)
			print(procs[k]["source"].."["..procs[k]["id"].."] proc with "..procDamageSchools["phy"].."["..procDamage["phy"].."] phy ("..procs[k]["blocked"].." blocked) and +"..procs[k]["ap"].."ap")
			procDamage["phy"] = procDamage["phy"] + procDamageSchools["phy"]
			procDamage["fire"] = procDamage["fire"] + procDamageSchools["fire"]
			procDamage["frost"] = procDamage["frost"] + procDamageSchools["frost"]
			procDamage["arcane"] = procDamage["arcane"] + procDamageSchools["arcane"]
			procDamage["nature"] = procDamage["nature"] + procDamageSchools["nature"]
			procDamage["shadow"] = procDamage["shadow"] + procDamageSchools["shadow"]
			procDamage["holy"] = procDamage["holy"] + procDamageSchools["holy"]
			blockDamage = blockDamage + procs[k]["blocked"]
		end
	end
	return {damage=procDamage,blocked=blockDamage}
end

function generateAttackTable(pLevel, pWpnSkill, pDefSkill, pHitChance, pCritChance, eLevel, eWpnSkill, eDefSkill, eAvoidance, special, ranged, attackFront, blockEnabled, isMob, pClass)
	local rollTable = {miss=0,dodge=0,parry=0,glancingBlow=0,block=0,crit=0,crushingBlow=0,hit=0}
	local pSkillDifference = 0
	local spell = false
	if(special == 2) then
		spell = true
	else
		pSkillDifference = math.min(eDefSkill - pWpnSkill,300)
	end
	if(special == 1) then
		rollTable = {miss=0,dodge=0,parry=0,block=0,hit=0}
	elseif(spell == true) then
		rollTable = {miss=0,crit=0,hit=0}
	end
	local remainingRolls = math.max(0, pHitChance)
	local tempVar = 100
	rollTable["miss"] = math.max(0, tempVar - remainingRolls)
	tempVar = remainingRolls
	if(ranged == false and spell == false) then
		local eDodge = eAvoidance["dodge"]
		eDodge = math.max(0, eAvoidance["dodge"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eDodge)
		rollTable["dodge"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(attackFront == true and ranged == false and spell == false) then
		local eParry = eAvoidance["parry"]
		eParry = math.max(0, eAvoidance["parry"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eParry)
		rollTable["parry"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(isMob == false and special == 0 and spell == false and ranged == false) then 
		if(pClass == "Mage" or pClass == "Priest" or pClass == "Warlock") then
			if(pLevel > 30) then
				remainingRolls = math.max(0, remainingRolls - 60)
			else
				remainingRolls = math.max(0, remainingRolls - (pLevel - 10) * 3)
			end
		else
			remainingRolls = math.max(0, remainingRolls - math.max(0, 10 + (eDefSkill - math.min(pWpnSkill, 300)) * 2))
		end
		rollTable["glancingBlow"] = (tempVar - remainingRolls)
		tempVar = remainingRolls
	end
	if(attackFront == true and blockEnabled == true and spell == false and ranged == false) then
		local eBlock = eAvoidance["block"]
		eBlock = math.max(0, eAvoidance["block"] + pSkillDifference * 0.04)
		remainingRolls = math.max(0, remainingRolls - eBlock)
		rollTable["block"] = tempVar - remainingRolls
		tempVar = remainingRolls
	end
	if(remainingRolls > 0) then
		if(special == 0) then
			pCritChance = math.max(0, pCritChance - pSkillDifference * 0.04)
			remainingRolls = math.max(0, remainingRolls - ((pHitChance + rollTable["miss"]) * (pCritChance/100))) 
			rollTable["crit"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		if(isMob == true and (pLevel - eLevel >= 3)) then
			remainingRolls = math.max(0, remainingRolls - (((pWpnSkill - math.min(eDefSkill,300)) * 2) - 15))
			rollTable["crushingBlow"] = math.max(0, tempVar - remainingRolls) 
			tempVar = remainingRolls
		end
		rollTable["hit"] = math.max(0, remainingRolls)
	end
	return rollTable
end

function getAttackResult(attackTable, special, pCrit)
	local rngRanges = math.random()*100
	local critRng = math.random()*100
	local weight = 0
	local critWeight = 0
	local result = "Evaded"
	local tableOrder = {"miss","dodge","parry","glancingBlow","block","crit","crushingBlow","hit"}
	if(special == 1) then
		tableOrder = {"miss","dodge","parry","block","hit"}
	elseif(special == 2) then
		tableOrder = {"miss","crit","hit"}
	end
	for i = 1, #tableOrder do
		weight = weight + attackTable[tableOrder[i]]
		if(rngRanges <= weight) then
			result = tableOrder[i]
			if(tableOrder[i] == "block" and special == 1) then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "critBlock"
				end
			elseif(tableOrder[i] == "hit" and special == 1) then
				critWeight = critWeight + pCrit
				if(critRng <= critWeight) then
					result = "crit"
				end
			end
			return result
		end
	end
end

function calculateDamage(pDmgSchools, pAp, pDmgReduction)
	local pDmgDone = {phy=(pAp / 14),fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pDmgSchools["phy"] > 0) then
		pDmgDone["phy"] = (pDmgDone["phy"] + pDmgSchools["phy"]) * (1-pDmgReduction["phy"])
	else
		pDmgDone["phy"] = pDmgSchools["phy"] * (1-pDmgReduction["phy"])
	end
	pDmgDone["phy"] = math.floor(0.5 + pDmgDone["phy"] ) 
	
	local resistanceTable = {
		{["0"]=100,["25"]=0,["50"]=0,["75"]=0,["100"]=0},
		{["0"]=97,["25"]=2,["50"]=1,["75"]=0,["100"]=0},
		{["0"]=94,["25"]=4,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=90,["25"]=8,["50"]=2,["75"]=0,["100"]=0},
		{["0"]=87,["25"]=10,["50"]=3,["75"]=0,["100"]=0},
		{["0"]=84,["25"]=12,["50"]=4,["75"]=0,["100"]=0}, --5%
		{["0"]=82,["25"]=13,["50"]=4,["75"]=1,["100"]=0},
		{["0"]=79,["25"]=15,["50"]=5,["75"]=1,["100"]=0},
		{["0"]=76,["25"]=17,["50"]=6,["75"]=1,["100"]=0},
		{["0"]=73,["25"]=19,["50"]=7,["75"]=1,["100"]=0},
		{["0"]=69,["25"]=23,["50"]=7,["75"]=1,["100"]=0}, --10%
		{["0"]=66,["25"]=25,["50"]=8,["75"]=1,["100"]=0},
		{["0"]=63,["25"]=27,["50"]=9,["75"]=1,["100"]=0},
		{["0"]=60,["25"]=29,["50"]=10,["75"]=1,["100"]=0},
		{["0"]=58,["25"]=30,["50"]=10,["75"]=2,["100"]=0},
		{["0"]=54,["25"]=33,["50"]=11,["75"]=2,["100"]=0}, --15%
		{["0"]=51,["25"]=36,["50"]=11,["75"]=2,["100"]=0},
		{["0"]=48,["25"]=38,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=44,["25"]=42,["50"]=12,["75"]=2,["100"]=0},
		{["0"]=41,["25"]=44,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=37,["25"]=48,["50"]=13,["75"]=2,["100"]=0}, --20%
		{["0"]=34,["25"]=50,["50"]=13,["75"]=2,["100"]=0},
		{["0"]=31,["25"]=52,["50"]=14,["75"]=2,["100"]=0},
		{["0"]=30,["25"]=52,["50"]=15,["75"]=2,["100"]=1},
		{["0"]=28,["25"]=53,["50"]=15,["75"]=3,["100"]=1},
		{["0"]=25,["25"]=55,["50"]=16,["75"]=3,["100"]=1}, --25%
		{["0"]=24,["25"]=54,["50"]=17,["75"]=4,["100"]=1},
		{["0"]=23,["25"]=53,["50"]=18,["75"]=5,["100"]=1},
		{["0"]=22,["25"]=51,["50"]=21,["75"]=5,["100"]=1},
		{["0"]=21,["25"]=50,["50"]=22,["75"]=6,["100"]=1},
		{["0"]=20,["25"]=49,["50"]=24,["75"]=6,["100"]=1}, --30%
		{["0"]=19,["25"]=47,["50"]=26,["75"]=7,["100"]=1},
		{["0"]=18,["25"]=46,["50"]=27,["75"]=8,["100"]=1},
		{["0"]=17,["25"]=44,["50"]=30,["75"]=8,["100"]=1},
		{["0"]=16,["25"]=43,["50"]=31,["75"]=9,["100"]=1},
		{["0"]=15,["25"]=42,["50"]=32,["75"]=10,["100"]=1}, --35%
		{["0"]=14,["25"]=41,["50"]=33,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=39,["50"]=36,["75"]=11,["100"]=1},
		{["0"]=13,["25"]=36,["50"]=38,["75"]=12,["100"]=1},
		{["0"]=12,["25"]=35,["50"]=39,["75"]=13,["100"]=1},
		{["0"]=11,["25"]=34,["50"]=40,["75"]=14,["100"]=1}, --40%
		{["0"]=10,["25"]=33,["50"]=41,["75"]=15,["100"]=1},
		{["0"]=9,["25"]=31,["50"]=44,["75"]=15,["100"]=1},
		{["0"]=8,["25"]=30,["50"]=45,["75"]=16,["100"]=1},
		{["0"]=8,["25"]=27,["50"]=47,["75"]=17,["100"]=1},
		{["0"]=7,["25"]=26,["50"]=48,["75"]=18,["100"]=1}, --45%
		{["0"]=6,["25"]=25,["50"]=49,["75"]=19,["100"]=1},
		{["0"]=6,["25"]=23,["50"]=50,["75"]=19,["100"]=2},
		{["0"]=5,["25"]=22,["50"]=51,["75"]=20,["100"]=2},
		{["0"]=3,["25"]=22,["50"]=53,["75"]=20,["100"]=2},
		{["0"]=2,["25"]=21,["50"]=54,["75"]=21,["100"]=2}, -- 50%
		{["0"]=2,["25"]=20,["50"]=53,["75"]=22,["100"]=3},
		{["0"]=2,["25"]=20,["50"]=51,["75"]=22,["100"]=5},
		{["0"]=2,["25"]=19,["50"]=50,["75"]=23,["100"]=6},
		{["0"]=1,["25"]=19,["50"]=49,["75"]=25,["100"]=6},
		{["0"]=1,["25"]=18,["50"]=48,["75"]=26,["100"]=7}, -- 55%
		{["0"]=1,["25"]=17,["50"]=47,["75"]=27,["100"]=8},
		{["0"]=1,["25"]=16,["50"]=45,["75"]=30,["100"]=8},
		{["0"]=1,["25"]=15,["50"]=44,["75"]=31,["100"]=9},
		{["0"]=1,["25"]=15,["50"]=41,["75"]=33,["100"]=10},
		{["0"]=1,["25"]=14,["50"]=40,["75"]=34,["100"]=11}, --60%
		{["0"]=1,["25"]=13,["50"]=39,["75"]=35,["100"]=12},
		{["0"]=1,["25"]=12,["50"]=38,["75"]=36,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=36,["75"]=39,["100"]=13},
		{["0"]=1,["25"]=11,["50"]=33,["75"]=41,["100"]=14},
		{["0"]=1,["25"]=10,["50"]=32,["75"]=42,["100"]=15}, --65%
		{["0"]=1,["25"]=9,["50"]=31,["75"]=43,["100"]=16},
		{["0"]=1,["25"]=8,["50"]=30,["75"]=44,["100"]=17},
		{["0"]=1,["25"]=8,["50"]=27,["75"]=46,["100"]=18},
		{["0"]=1,["25"]=7,["50"]=26,["75"]=47,["100"]=19},
		{["0"]=1,["25"]=6,["50"]=24,["75"]=49,["100"]=20}, --70%
		{["0"]=1,["25"]=6,["50"]=22,["75"]=50,["100"]=21},
		{["0"]=1,["25"]=5,["50"]=21,["75"]=51,["100"]=22},
		{["0"]=1,["25"]=5,["50"]=18,["75"]=53,["100"]=23},
		{["0"]=1,["25"]=4,["50"]=17,["75"]=54,["100"]=24},
		{["0"]=1,["25"]=3,["50"]=16,["75"]=55,["100"]=25}, --75%
		-- Normal cap 
		{["0"]=1,["25"]=3,["50"]=15,["75"]=53,["100"]=28},
		{["0"]=1,["25"]=2,["50"]=15,["75"]=52,["100"]=30},
		{["0"]=0,["25"]=2,["50"]=15,["75"]=52,["100"]=31},
		{["0"]=0,["25"]=2,["50"]=14,["75"]=50,["100"]=34},
		{["0"]=0,["25"]=2,["50"]=13,["75"]=48,["100"]=37}, --80%
		{["0"]=0,["25"]=2,["50"]=13,["75"]=44,["100"]=41},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=42,["100"]=44},
		{["0"]=0,["25"]=2,["50"]=12,["75"]=38,["100"]=48},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=36,["100"]=51},
		{["0"]=0,["25"]=2,["50"]=11,["75"]=33,["100"]=54}, --85%
		{["0"]=0,["25"]=2,["50"]=10,["75"]=30,["100"]=58},
		{["0"]=0,["25"]=1,["50"]=10,["75"]=29,["100"]=60},
		{["0"]=0,["25"]=1,["50"]=9,["75"]=27,["100"]=63},
		{["0"]=0,["25"]=1,["50"]=8,["75"]=25,["100"]=66},
		{["0"]=0,["25"]=1,["50"]=7,["75"]=23,["100"]=69}, --90%
		{["0"]=0,["25"]=1,["50"]=7,["75"]=19,["100"]=73},
		{["0"]=0,["25"]=1,["50"]=6,["75"]=17,["100"]=76},
		{["0"]=0,["25"]=1,["50"]=5,["75"]=15,["100"]=79},
		{["0"]=0,["25"]=1,["50"]=4,["75"]=13,["100"]=82},
		{["0"]=0,["25"]=0,["50"]=4,["75"]=12,["100"]=84}, --95%
		{["0"]=0,["25"]=0,["50"]=3,["75"]=10,["100"]=87},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=8,["100"]=90},
		{["0"]=0,["25"]=0,["50"]=2,["75"]=4,["100"]=94},
		{["0"]=0,["25"]=0,["50"]=1,["75"]=2,["100"]=97},
		{["0"]=0,["25"]=0,["50"]=0,["75"]=0,["100"]=100} --100%
	}
		
	local elementOrder = {"fire","frost","arcane","nature","shadow","holy"}
	local elemRange = 0
	local elemAbsorb = 1
	local weight = 0
	for i = 1, #elementOrder do
		elemRange = math.random()*100
		weight = 0
		if(pDmgReduction[elementOrder[i]] == 1) then
			goto continue
		end
		if(pDmgReduction[elementOrder[i]] > 1) then
			elemAbsorb = -pDmgReduction[elementOrder[i]]
			pDmgReduction[elementOrder[i]] = 0
		end
		elemResist = math.floor(pDmgReduction[elementOrder[i]] * 100) + 1
		resistOrder = {"0","25","50","75","100"}
		for k = 1, #resistOrder do
			weight = weight + resistanceTable[elemResist][resistOrder[k]]
			if elemRange <= weight then
				pDmgDone[elementOrder[i]] = (pDmgSchools[elementOrder[i]] - (pDmgSchools[elementOrder[i]] * (tonumber(resistOrder[k]) / 100))) * elemAbsorb
				break
			end
		end
		::continue::
	end
	
	return pDmgDone
end

function calculateDamageReduction(pLevel, eArmor, eRes, eLevel)
	local reductionPercentage = {phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	if(pLevel < 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * eLevel), 0.75)
	elseif(pLevel >= 60) then
		reductionPercentage["phy"] = math.min( eArmor / ( eArmor + 400 + 85 * ( eLevel + 4.5 * ( eLevel - 60))) , 0.75)
	end
	local schools = {"fire","frost","arcane","holy","shadow","nature"}
	for i = 1, (#schools)-1 do
		if(eRes[schools[i]] >= 9999) then
			reductionPercentage[schools[i]] = 1
		elseif(eRes[schools[i]] >= 1000 and eRes[schools[i]] < 9999) then
			reductionPercentage[schools[i]] = eRes[schools[i]] / 1000
		else
			reductionPercentage[schools[i]] = math.min(0.75,(eRes[schools[i]] / (pLevel * 5)) * 0.75)
		end
	end
	return reductionPercentage
end

function calculateBlock(pDmg, eAttr, eBlockValue)
	local blockedDmg = math.max(0, pDmg - (eBlockValue + eAttr / 2))
	return {dmg=blockedDmg, blocked=math.min(pDmg, eBlockValue + eAttr / 2)}
end


function getRandomDamage(source)
	local damage={phy=0,fire=0,frost=0,arcane=0,nature=0,shadow=0,holy=0}
	local schools = {"phy","fire","frost","arcane","holy","shadow","nature"}
	for i = 1, #schools do
		damage[schools[i]] = math.random(source["schools"][schools[i]]["min"] , source["schools"][schools[i]]["max"])
	end
	return damage
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end