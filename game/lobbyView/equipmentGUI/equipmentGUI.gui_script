function init(self)
	msg.post(".", hash("acquire_input_focus"))
	self.playerEquipmenmt = {}
	self.equipmentStats = {}
	self.effectTooltips = {}
	self.isShowing = false
	self.LoadingDone = false
end

function final(self)
	msg.post(".", hash("release_input_focus"))
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("generateIcons")) then
		self.playerEquipmenmt = message.icons
		for i = 1, 20 do
			if(i == message.icons["shirt"]["slot"]) then
				gui.set_texture(gui.get_node("slot_shirt"), "armor")
				gui.play_flipbook(gui.get_node("slot_shirt"), message.icons["shirt"]["icon"])
			elseif(i == message.icons["legs"]["slot"]) then
				gui.set_texture(gui.get_node("slot_legs"), "armor")
				gui.play_flipbook(gui.get_node("slot_legs"), message.icons["legs"]["icon"])
			elseif(i == message.icons["feet"]["slot"]) then
				gui.set_texture(gui.get_node("slot_feet"), "armor")
				gui.play_flipbook(gui.get_node("slot_feet"), message.icons["feet"]["icon"])
			elseif(i == message.icons["mainhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpmh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpmh"), message.icons["mainhand"]["icon"])
			elseif(i == message.icons["offhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpoh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpoh"), message.icons["offhand"]["icon"])
			end
		end
	elseif(message_id == hash("equipmentStats")) then
		self.equipmentStats[message.slot] = message.stats
		self.effectTooltips[message.slot] = {e1="",e2="",e3=""}
		for i = 1, 3 do
			if(self.equipmentStats[message.slot]["eids"]["eid"..i]["func"] == "Cast") then
				msg.post("main:/game#main", hash("getProperties"), {type="Ability", id=self.equipmentStats[message.slot]["eids"]["eid"..i]["val"],slot=message.slot,player=i})
			end
		end
	elseif(message_id == hash("getProperties")) then
		self.effectTooltips[message.slot]["e"..message.player]=message.values["tooltip"]
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("exitButton"), action.x, action.y)) then
			print("clicked exit")
			msg.post("GUI#lobbyViewGUI", hash("exitEquipGUI"))
			msg.post(".", hash("disable"))
		end
	end
	if not(self.isShowing) or self.LoadingDone then
		if(gui.pick_node(gui.get_node("slot_legs"), action.x, action.y)) then
			updateTooltip(self,"legs","armor", action.x, action.y)
		elseif(gui.pick_node(gui.get_node("slot_wpmh"), action.x, action.y)) then
			updateTooltip(self,"mainhand","weapons", action.x, action.y)
		elseif(gui.pick_node(gui.get_node("slot_wpoh"), action.x, action.y)) then
			updateTooltip(self,"offhand","weapons", action.x, action.y)
		elseif(gui.pick_node(gui.get_node("slot_feet"), action.x, action.y)) then
			updateTooltip(self,"feet","armor", action.x, action.y)
		elseif(gui.pick_node(gui.get_node("slot_shirt"), action.x, action.y)) then
			updateTooltip(self,"shirt","armor", action.x, action.y)
		else
			gui.set_enabled(gui.get_node("tooltipGUI/tooltip"), false)
			self.isShowing = false
			self.LoadingDone = false
		end
	end
	
end

function updateTooltip(self,slot,type,x,y)
	local tooltip = gui.get_node("tooltipGUI/tooltip")
	if not (self.LoadingDone) then
		gui.set_enabled(tooltip, false)
	end
	self.isShowing = true
	local ticon = gui.get_node("tooltipGUI/tticon")
	local tbg = gui.get_node("tooltipGUI/ttblBG")
	local tbgsize = gui.get_size(tbg)
	local tooltipEquip = gui.get_node("tooltipGUI/tooltipEffects")
	
	local tooltipText = gui.get_node("tooltipGUI/tooltiptext")
	local tooltipLeft = gui.get_node("tooltipGUI/tooltipLeft")
	local tooltipName = gui.get_node("tooltipGUI/tooltipName")
	
	

	local colorPoor = vmath.vector3(0.62,0.62,0.62)
	local colorCommon = vmath.vector3(1,1,1)
	local colorUncommon = vmath.vector3(0.12,1,00,0.00)
	local colorRare = vmath.vector3(0.00,0.44,0.87)
	local colorEpic = vmath.vector3(0.64,0.21,0.93)
	local colorLegendary = vmath.vector3(1.00,0.50,0.00)



	local itemName = gui.get_node("tooltipGUI/itemname")
	gui.set_text(itemName, self.equipmentStats[slot]["name"])
	

	local nameTextHeight = gui.get_text_metrics_from_node(itemName)["height"]
	local nameTextWidth = gui.get_text_metrics_from_node(itemName)["width"]

	if(self.equipmentStats[slot]["quality"] == "0") then
		gui.set_color(itemName, colorPoor)
	elseif(self.equipmentStats[slot]["quality"] == "1") then
		gui.set_color(itemName, colorCommon)
	elseif(self.equipmentStats[slot]["quality"] == "2") then
		gui.set_color(itemName, colorUncommon)
	elseif(self.equipmentStats[slot]["quality"] == "3") then
		gui.set_color(itemName, colorRare)
	elseif(self.equipmentStats[slot]["quality"] == "4") then
		gui.set_color(itemName, colorEpic)
	elseif(self.equipmentStats[slot]["quality"] == "5") then
		gui.set_color(itemName, colorLegendary)
	else
		gui.set_color(itemName, colorPoor)
	end
	local leftString = ""
	local equipString = ""
	if(self.equipmentStats[slot]["unique"] == "1") then
		leftString = leftString .. "Unique\n"
	end
	if(self.equipmentStats[slot]["bind"] == "1") then
		leftString = leftString .. "Bind on Equip\n"
	end
	if(type == "weapons") then
		if(self.equipmentStats[slot]["wtype"] == "9") then
			leftString = leftString .. "Off hand"
			for i = 1, tonumber(nameTextWidth)/14 do
				leftString = leftString .. "  "
			end
			leftString = leftString .. "Shield\n"
		else
			if(self.equipmentStats[slot]["slotid"] == "16") then
				leftString = leftString .. "Main hand"
				if(self.equipmentStats[slot]["wtype"] == "7") then
					for i = 1, tonumber(nameTextWidth)/5 do
						leftString = leftString .. " "
					end
					leftString = leftString .. "     Sword\n"
				end
			elseif(self.equipmentStats[slot]["slotid"] == "17") then
				leftString = leftString .. "Off hand\n"
			end
			local damage = 0
			local aspeedDone = false
			local schools = {"Physical","Fire","Frost","Arcane","Holy","Shadow","Nature"}
			for i = 1, #schools do
				if(tonumber(self.equipmentStats[slot]["damage"][schools[i]]["min"]) > 0) then
					damage = damage + (self.equipmentStats[slot]["damage"][schools[i]]["min"] + self.equipmentStats[slot]["damage"][schools[i]]["max"])/2
					if(schools[i] == "Physical") then
						leftString = leftString .. self.equipmentStats[slot]["damage"][schools[i]]["min"] .. " - " .. self.equipmentStats[slot]["damage"][schools[i]]["max"] .. " Damage"
					else
						leftString = leftString .. "+" ..self.equipmentStats[slot]["damage"][schools[i]]["min"] .. " - " .. self.equipmentStats[slot]["damage"][schools[i]]["max"] .. schools[i].. " Damage\n"
					end
					if(not aspeedDone) then
						aspeedDone = true
						leftString = leftString .. "              Speed " .. self.equipmentStats[slot]["aspeed"] .. "0\n"
					end
				end
			end
			damage = math.floor((damage/self.equipmentStats[slot]["aspeed"])*100+5)/100
			leftString = leftString .. "("..damage.." damage per second)\n"
		end
	elseif(type == "armor") then
		if(self.equipmentStats[slot]["slotid"] == "4") then
			leftString = leftString .. "Shirt"
		elseif(self.equipmentStats[slot]["slotid"] == "7") then
			leftString = leftString .. "Legs"
		elseif(self.equipmentStats[slot]["slotid"] == "8") then
			leftString = leftString .. "Feet"
		end
		if(self.equipmentStats[slot]["atype"] == "1") then
			for i = 1, tonumber(nameTextWidth)/8 do
				leftString = leftString .. " "
			end
			leftString = leftString .. "   Cloth\n"
		elseif(self.equipmentStats[slot]["atype"] == "2") then
			for i = 1, tonumber(nameTextWidth)/8 do
				leftString = leftString .. " "
			end
			leftString = leftString .. "   Leather\n"
		elseif(self.equipmentStats[slot]["atype"] == "3") then
			for i = 1, tonumber(nameTextWidth)/8 do
				leftString = leftString .. " "
			end
			leftString = leftString .. "   Mail\n"
		elseif(self.equipmentStats[slot]["atype"] == "4") then
			for i = 1, tonumber(nameTextWidth)/8 do
				leftString = leftString .. " "
			end
			leftString = leftString .. "   Plate\n"
		end
	end
	if(tonumber(self.equipmentStats[slot]["armor"]) > 0) then
		leftString = leftString ..self.equipmentStats[slot]["armor"] .. " Armor\n"
	end
	if(type == "weapons") then
		if(tonumber(self.equipmentStats[slot]["block"]) > 0) then
			leftString = leftString ..self.equipmentStats[slot]["block"] .. " Block\n"
		end
	end
	if(tonumber(self.equipmentStats[slot]["stats"]["agi"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["stats"]["agi"] .. " Agility\n"
	end
	if(tonumber(self.equipmentStats[slot]["stats"]["str"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["stats"]["str"] .. " Strength\n"
	end
	if(tonumber(self.equipmentStats[slot]["stats"]["int"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["stats"]["int"] .. " Intelligence\n"
	end
	if(tonumber(self.equipmentStats[slot]["stats"]["spr"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["stats"]["spr"] .. " Spirit\n"
	end
	if(tonumber(self.equipmentStats[slot]["stats"]["sta"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["stats"]["sta"] .. " Stamina\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["fire"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["fire"] .. " Fire Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["frost"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["frost"] .. " Frost Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["shadow"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["shadow"] .. " Shadow Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["holy"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["holy"] .. " Holy Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["nature"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["nature"] .. " Nature Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["res"]["arcane"]) > 0) then
		leftString = leftString .. "+" ..self.equipmentStats[slot]["res"]["arnace"] .. " Arcane Resistance\n"
	end
	if(tonumber(self.equipmentStats[slot]["durability"]["max"]) > -1) then
		leftString = leftString .. "Durability " .. self.equipmentStats[slot]["durability"]["min"] .. " / " .. self.equipmentStats[slot]["durability"]["max"] .. "\n"
	end
	if(tonumber(self.equipmentStats[slot]["rlvl"]) > 1) then
		leftString = leftString .. "Requires Level " .. self.equipmentStats[slot]["rlvl"] .. "\n"
	end
	for i = 1, 3 do
		if(self.equipmentStats[slot]["eids"]["eid"..i]["func"] == "Cast") then
			equipString = equipString .. "Equip: " .. self.effectTooltips[slot]["e"..i] .. "\n"
		end
	end
	leftString = leftString .. "\n"

	local leftText = gui.get_node("tooltipGUI/leftSideText")
	gui.set_text(leftText, leftString)

	local tooltipEquipText = gui.get_node("tooltipGUI/effectText")
	gui.set_text(tooltipEquipText, equipString)
	gui.set_color(tooltipEquipText, colorUncommon)

	

	local tooltipTextPos = gui.get_position(tooltipText)
	local leftTextWidth = gui.get_text_metrics_from_node(leftText)["width"]
	local leftTextHeight = gui.get_text_metrics_from_node(leftText)["height"]
	local equipTextWidth = gui.get_text_metrics_from_node(tooltipEquipText)["width"]
	local equipTextHeight = gui.get_text_metrics_from_node(tooltipEquipText)["height"]

	gui.set_size(tooltipEquip, vmath.vector3(equipTextWidth,equipTextHeight,0))
	gui.set_size(tooltipName, vmath.vector3(nameTextWidth,nameTextHeight,0))

	local bodyWidth,bodyHeight = equipTextWidth + leftTextWidth, equipTextHeight + leftTextHeight
	local maxX = 0
	if((bodyWidth-50) > nameTextWidth) then maxX = bodyWidth - 75 else maxX = nameTextWidth end
	local minX,minY = maxX, nameTextHeight + 10
	local newX,newY = 0,0
	if(bodyWidth < minX) then newX = minX + 25 else newX = bodyWidth end
	if(bodyHeight < minY) then newY = minY+25 else newY = (bodyHeight-bodyHeight/2.5) + nameTextHeight + 16 + bodyHeight/8 end
	gui.set_size(tooltipLeft, vmath.vector3(newX,newY,0))
	gui.set_position(tooltipName, vmath.vector3(tooltipTextPos.x+45,tooltipTextPos.y+nameTextHeight/2-5,1))
	gui.set_position(tooltipLeft, vmath.vector3(tooltipTextPos.x+45,tooltipTextPos.y+nameTextHeight/2-40,1))
	gui.set_position(tooltipEquip, vmath.vector3(tooltipTextPos.x+45,tooltipTextPos.y+nameTextHeight/2-75,1))


	local tooltipWidth = (newX + maxX)/2
	local tooltipHeight = newY + nameTextHeight - 30
	

	gui.set_position(tooltip, vmath.vector3(x, y, 0))
	gui.set_size(tbg, vmath.vector3(tooltipWidth,tooltipHeight, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(tooltipWidth, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(tooltipWidth, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(5, tooltipHeight, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(5, tooltipHeight, 0))
	gui.set_position(tbg, vmath.vector3((tooltipTextPos.x+tooltipWidth)/2-28,(tooltipTextPos.y-tooltipHeight)/2-29,0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(tooltipWidth-tbgsize.x, tooltipHeight-(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(tooltipWidth-tbgsize.x, -tooltipHeight+(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(-tooltipWidth+(tbgsize.x)/2, tooltipHeight-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(tooltipWidth-(tbgsize.x)/2, tooltipHeight-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTL"), vmath.vector3(-tooltipWidth+(tbgsize.x)/2+1, tooltipHeight-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTR"), vmath.vector3(tooltipWidth-(tbgsize.x)/2-1, tooltipHeight-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBL"), vmath.vector3(-tooltipWidth+(tbgsize.x)/2+1, -tooltipHeight+(tbgsize.y)/2+1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBR"), vmath.vector3(tooltipWidth-(tbgsize.x)/2-1, -tooltipHeight+(tbgsize.y)/2+1, 0))
	gui.set_texture(ticon, type)
	gui.play_flipbook(ticon, self.playerEquipmenmt[slot]["icon"])

	if not(self.LoadingDone) then
		self.LoadingDone = true
		delay.seconds(0.25, function(self, id)
			gui.set_enabled(tooltip, true)
		end)
	end
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end