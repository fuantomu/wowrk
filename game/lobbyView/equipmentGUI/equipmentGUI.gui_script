function init(self)
	msg.post(".", hash("acquire_input_focus"))
	self.playerEquipmenmt = {}
	self.equipmentStats = {}
end

function final(self)
	msg.post(".", hash("release_input_focus"))
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("generateIcons")) then
		self.playerEquipmenmt = message.icons
		for i = 1, 20 do
			if(i == message.icons["shirt"]["slot"]) then
				gui.set_texture(gui.get_node("slot_shirt"), "armor")
				gui.play_flipbook(gui.get_node("slot_shirt"), message.icons["shirt"]["icon"])
			elseif(i == message.icons["legs"]["slot"]) then
				gui.set_texture(gui.get_node("slot_legs"), "armor")
				gui.play_flipbook(gui.get_node("slot_legs"), message.icons["legs"]["icon"])
			elseif(i == message.icons["feet"]["slot"]) then
				gui.set_texture(gui.get_node("slot_feet"), "armor")
				gui.play_flipbook(gui.get_node("slot_feet"), message.icons["feet"]["icon"])
			elseif(i == message.icons["mainhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpmh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpmh"), message.icons["mainhand"]["icon"])
			elseif(i == message.icons["offhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpoh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpoh"), message.icons["offhand"]["icon"])
			end
		end
	elseif(message_id == hash("equipmentStats")) then
		self.equipmentStats[message.slot] = message.stats
		tprint(self.equipmentStats)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("exitButton"), action.x, action.y)) then
			print("clicked exit")
			msg.post("GUI#lobbyViewGUI", hash("exitEquipGUI"))
			msg.post(".", hash("disable"))
		end
	elseif(gui.pick_node(gui.get_node("slot_legs"), action.x, action.y)) then
		updateTooltip(self,"legs","armor", action.x, action.y)
	elseif(gui.pick_node(gui.get_node("slot_wpmh"), action.x, action.y)) then
		updateTooltip(self,"mainhand","weapons", action.x, action.y)
	else
		--gui.set_enabled(gui.get_node("tooltipGUI/tooltip"), false)
	end
end

function updateTooltip(self,slot,type,x,y)
	local tooltip = gui.get_node("tooltipGUI/tooltip")
	gui.set_enabled(tooltip, true)
	local ticon = gui.get_node("tooltipGUI/tticon")
	local tbg = gui.get_node("tooltipGUI/ttblBG")
	local tsize = gui.get_size(tooltip)
	local tisize = gui.get_size(ticon)
	local tbgsize = gui.get_size(tbg)

	local itemName = gui.get_node("tooltipGUI/itemname")
	local leftText = gui.get_node("tooltipGUI/leftSideText")
	local rightText = gui.get_node("tooltipGUI/rightSideText")

	gui.set_text(rightText, self.equipmentStats[slot]["name"])

	local rightBound = gui.get_text_metrics_from_node(gui.get_node("tooltipGUI/rightSideText"))["width"]
	local lowerBound = gui.get_text_metrics_from_node(gui.get_node("tooltipGUI/leftSideText"))["height"]
	local itemNamePos = gui.get_text_metrics_from_node(itemName)["width"]
	local Xmax,Ymax = 0,0
	print(rightBound,itemNamePos,lowerBound,tbgsize.y)
	if(rightBound > itemNamePos) then Xmax = 10+ rightBound else Xmax = 10+ itemNamePos end
	if(lowerBound > tbgsize.y) then Ymax = lowerBound else Ymax = tbgsize.y end
	print(Xmax,Ymax)

	gui.set_position(tooltip, vmath.vector3(x+tsize.x, y+tsize.y, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(Xmax, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(Xmax, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(5, Ymax, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(5, Ymax, 0))
	gui.set_size(tbg, vmath.vector3(Xmax, Ymax, 0))
	gui.set_position(tbg, vmath.vector3((Xmax/2), (Ymax/2)+5, 1))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(Xmax-tbgsize.x, Ymax-(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(Xmax-tbgsize.x, -Ymax+(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(-Xmax+(tbgsize.x)/2, Ymax-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(Xmax-(tbgsize.x)/2, Ymax-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTL"), vmath.vector3(-Xmax+(tbgsize.x)/2+1, Ymax-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTR"), vmath.vector3(Xmax-(tbgsize.x)/2-1, Ymax-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBL"), vmath.vector3(-Xmax+(tbgsize.x)/2+1, -Ymax+(tbgsize.y)/2+1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBR"), vmath.vector3(Xmax-(tbgsize.x)/2-1, -Ymax+(tbgsize.y)/2+1, 0))

	gui.set_texture(ticon, type)
	gui.play_flipbook(ticon, self.playerEquipmenmt[slot]["icon"])
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
