function init(self)
	msg.post(".", hash("acquire_input_focus"))
	self.playerEquipmenmt = {}
	self.equipmentStats = {}
end

function final(self)
	msg.post(".", hash("release_input_focus"))
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("generateIcons")) then
		self.playerEquipmenmt = message.icons
		for i = 1, 20 do
			if(i == message.icons["shirt"]["slot"]) then
				gui.set_texture(gui.get_node("slot_shirt"), "armor")
				gui.play_flipbook(gui.get_node("slot_shirt"), message.icons["shirt"]["icon"])
			elseif(i == message.icons["legs"]["slot"]) then
				gui.set_texture(gui.get_node("slot_legs"), "armor")
				gui.play_flipbook(gui.get_node("slot_legs"), message.icons["legs"]["icon"])
			elseif(i == message.icons["feet"]["slot"]) then
				gui.set_texture(gui.get_node("slot_feet"), "armor")
				gui.play_flipbook(gui.get_node("slot_feet"), message.icons["feet"]["icon"])
			elseif(i == message.icons["mainhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpmh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpmh"), message.icons["mainhand"]["icon"])
			elseif(i == message.icons["offhand"]["slot"]) then
				gui.set_texture(gui.get_node("slot_wpoh"), "weapons")
				gui.play_flipbook(gui.get_node("slot_wpoh"), message.icons["offhand"]["icon"])
			end
		end
	elseif(message_id == hash("equipmentStats")) then
		self.equipmentStats[message.slot] = message.stats
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("exitButton"), action.x, action.y)) then
			print("clicked exit")
			msg.post("GUI#lobbyViewGUI", hash("exitEquipGUI"))
			msg.post(".", hash("disable"))
		end
	elseif(gui.pick_node(gui.get_node("slot_legs"), action.x, action.y)) then
		updateTooltip(self,"legs","armor", action.x, action.y)
	elseif(gui.pick_node(gui.get_node("slot_wpmh"), action.x, action.y)) then
		updateTooltip(self,"mainhand","weapons", action.x, action.y)
	elseif(gui.pick_node(gui.get_node("slot_wpoh"), action.x, action.y)) then
		updateTooltip(self,"offhand","weapons", action.x, action.y)
	elseif(gui.pick_node(gui.get_node("slot_feet"), action.x, action.y)) then
		updateTooltip(self,"feet","armor", action.x, action.y)
	elseif(gui.pick_node(gui.get_node("slot_shirt"), action.x, action.y)) then
		updateTooltip(self,"shirt","armor", action.x, action.y)
	else
		gui.set_enabled(gui.get_node("tooltipGUI/tooltip"), false)
	end
end

function updateTooltip(self,slot,type,x,y)
	local tooltip = gui.get_node("tooltipGUI/tooltip")
	gui.set_enabled(tooltip, true)
	local ticon = gui.get_node("tooltipGUI/tticon")
	local tbg = gui.get_node("tooltipGUI/ttblBG")
	local tsize = gui.get_size(tooltip)
	local tisize = gui.get_size(ticon)
	local tbgsize = gui.get_size(tbg)
	local tooltipLeft = gui.get_node("tooltipGUI/tooltipLeft")
	local tooltipName = gui.get_node("tooltipGUI/tooltipName")
	
	

	local colorPoor = vmath.vector3(0.62,0.62,0.62)
	local colorCommon = vmath.vector3(1,1,1)
	local colorUncommon = vmath.vector3(0.12,1,00,0.00)
	local colorRare = vmath.vector3(0.00,0.44,0.87)
	local colorEpic = vmath.vector3(0.64,0.21,0.93)
	local colorLegendary = vmath.vector3(1.00,0.50,0.00)



	local itemName = gui.get_node("tooltipGUI/itemname")
	local leftText = gui.get_node("tooltipGUI/leftSideText")
	gui.set_text(itemName, self.equipmentStats[slot]["name"])

	local nameTextHeight = gui.get_text_metrics_from_node(itemName)["height"]
	local nameTextWidth = gui.get_text_metrics_from_node(itemName)["width"]

	if(self.equipmentStats[slot]["quality"] == "0") then
		gui.set_color(itemName, colorPoor)
	elseif(self.equipmentStats[slot]["quality"] == "1") then
		gui.set_color(itemName, colorUncommon)
	elseif(self.equipmentStats[slot]["quality"] == "2") then
		gui.set_color(itemName, colorCommon)
	elseif(self.equipmentStats[slot]["quality"] == "3") then
		gui.set_color(itemName, colorRare)
	elseif(self.equipmentStats[slot]["quality"] == "4") then
		gui.set_color(itemName, colorEpic)
	elseif(self.equipmentStats[slot]["quality"] == "5") then
		gui.set_color(itemName, colorLegendary)
	end
	local leftString = ""
	if(self.equipmentStats[slot]["unique"] == "1") then
		leftString = leftString .. "Unique\n"
	end
	if(self.equipmentStats[slot]["bind"] == "1") then
		leftString = leftString .. "Bind on Equip\n"
	end
	if(type == "weapons") then
		if(self.equipmentStats[slot]["wtype"] == "9") then
			leftString = leftString .. "Offhand"
			for i = 1, (nameTextWidth/string.len(self.equipmentStats[slot]["name"])*2.5) do
				leftString = leftString .. " "
			end
			leftString = leftString .. "Shield\n"
		else
			if(self.equipmentStats[slot]["slotid"] == "16") then
				leftString = leftString .. "Main hand"
				if(self.equipmentStats[slot]["wtype"] == "7") then
					for i = 1, (nameTextWidth/string.len(self.equipmentStats[slot]["name"])*2.5) do
						leftString = leftString .. " "
					end
					leftString = leftString .. "Sword\n"
				end
			elseif(self.equipmentStats[slot]["slotid"] == "17") then
				leftString = leftString .. "Offhand\n"
			end
			local damage = 0
			local aspeedDone = false
			for i = 1, #self.equipmentStats[slot]["damage"] do
				if(tonumber(self.equipmentStats[slot]["damage"][i]["min"]) > 0) then
					damage = damage + (self.equipmentStats[slot]["damage"][i]["min"] + self.equipmentStats[slot]["damage"][i]["max"])/2
					if(self.equipmentStats[slot]["damage"][i]["school"] == "0") then
						leftString = leftString .. self.equipmentStats[slot]["damage"][i]["min"] .. " - " .. self.equipmentStats[slot]["damage"][i]["max"] .. " Damage"
					elseif(self.equipmentStats[slot]["damage"][i]["school"] == "1") then
						leftString = leftString .. "+" ..self.equipmentStats[slot]["damage"][i]["min"] .. " - " .. self.equipmentStats[slot]["damage"][i]["max"] .. "Fire Damage\n"
					end
					if(not aspeedDone) then
						aspeedDone = true
						leftString = leftString .. "          Speed " .. self.equipmentStats[slot]["aspeed"] .. "0\n"
					end
				end
			end
			damage = math.floor((damage/self.equipmentStats[slot]["aspeed"])*100+5)/100
			leftString = leftString .. "("..damage.." damage per second)\n"
		end
	elseif(type == "armor") then
		if(self.equipmentStats[slot]["slotid"] == "4") then
			leftString = leftString .. "Shirt\n"
		elseif(self.equipmentStats[slot]["slotid"] == "7") then
			leftString = leftString .. "Legs\n"
		elseif(self.equipmentStats[slot]["slotid"] == "8") then
			leftString = leftString .. "Feet\n"
		end
	end
	if(tonumber(self.equipmentStats[slot]["durability"]["max"]) > -1) then
		leftString = leftString .. "Durability " .. self.equipmentStats[slot]["durability"]["min"] .. " / " .. self.equipmentStats[slot]["durability"]["max"]
	end


	local leftText = gui.get_node("tooltipGUI/leftSideText")
	gui.set_text(leftText, leftString)

	local tooltipLeftPos = gui.get_position(tooltipLeft)
	local tooltipNamePos = gui.get_position(tooltipName)
	local tooltipLeftScale = gui.get_scale(tooltipLeft)
	local tooltipNameScale = gui.get_scale(tooltipName)

	local leftTextHeight = gui.get_text_metrics_from_node(leftText)["height"]
	local leftTextWidth = gui.get_text_metrics_from_node(leftText)["width"]

	local leftBound = gui.get_text_metrics_from_node(gui.get_node("tooltipGUI/leftSideText"))["width"] 
	local lowerBound = gui.get_text_metrics_from_node(gui.get_node("tooltipGUI/leftSideText"))["height"] + gui.get_text_metrics_from_node(gui.get_node("tooltipGUI/itemname"))["height"]
	--local namewidth = gui.get_text_metrics_from_node(itemName)["width"]
	--gui.set_size(itemName, vmath.vector3(namewidth,gui.get_text_metrics_from_node(itemName)["height"],0))

	local itemNamePos = gui.get_text_metrics_from_node(itemName)["width"]
	local Xmax,Ymax = 0,lowerBound
	if(leftBound > itemNamePos) then Xmax = leftBound/2 else Xmax = itemNamePos/2 end

	gui.set_position(tooltip, vmath.vector3(x, y, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(Xmax, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(Xmax, 5, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(5, Ymax, 0))
	gui.set_size(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(5, Ymax, 0))
	gui.set_size(tbg, vmath.vector3(Xmax,Ymax, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderTop"), vmath.vector3(Xmax-tbgsize.x, Ymax-(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderBot"), vmath.vector3(Xmax-tbgsize.x, -Ymax+(tbgsize.y)/2, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderLeft"), vmath.vector3(-Xmax+(tbgsize.x)/2, Ymax-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderRight"), vmath.vector3(Xmax-(tbgsize.x)/2, Ymax-(tbgsize.y), 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTL"), vmath.vector3(-Xmax+(tbgsize.x)/2+1, Ymax-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerTR"), vmath.vector3(Xmax-(tbgsize.x)/2-1, Ymax-(tbgsize.y)/2-1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBL"), vmath.vector3(-Xmax+(tbgsize.x)/2+1, -Ymax+(tbgsize.y)/2+1, 0))
	gui.set_position(gui.get_node("tooltipGUI/ttblBorderCornerBR"), vmath.vector3(Xmax-(tbgsize.x)/2-1, -Ymax+(tbgsize.y)/2+1, 0))

	gui.set_texture(ticon, type)
	gui.play_flipbook(ticon, self.playerEquipmenmt[slot]["icon"])
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
