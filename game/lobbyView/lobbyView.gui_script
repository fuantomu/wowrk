local dirtylarry = require "dirtylarry/dirtylarry"
function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("textbox"), false)
	msg.post("/GUI#equipmentGUI", hash("disable"))
	self.currentStat = "None"
	self.currentPlayer = -1
	self.playerStats = {}
	self.maxPlayers = 5
	msg.post(".", hash("updateUI"), {players=self.maxPlayers})
	for x = 1,self.maxPlayers  do
		msg.post("main:/game#savegame", hash("loadGame"), {player=x})
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("loadDone")) then
		table.insert(self.playerStats,message.data)
		local x = message.player
		gui.set_text(gui.get_node("partyP"..x.."/class"), tostring(self.playerStats[x]["class"]) )
		gui.set_text(gui.get_node("partyP"..x.."/level"), tostring(self.playerStats[x]["level"]))
		gui.set_text(gui.get_node("partyP"..x.."/hpmax"), tostring(self.playerStats[x]["hpmax"]))
		gui.set_text(gui.get_node("partyP"..x.."/hpcurr"), tostring(self.playerStats[x]["hpcurr"]))
		gui.set_text(gui.get_node("partyP"..x.."/resmax"), tostring(self.playerStats[x]["resmax"]))
		gui.set_text(gui.get_node("partyP"..x.."/rescurr"), tostring(self.playerStats[x]["rescurr"]))
		gui.set_text(gui.get_node("partyP"..x.."/str"), "STR: "..tostring(self.playerStats[x]["str"]))
		gui.set_text(gui.get_node("partyP"..x.."/agi"), "AGI: "..tostring(self.playerStats[x]["agi"]))
		gui.set_text(gui.get_node("partyP"..x.."/sta"), "STA: "..tostring(self.playerStats[x]["sta"]))
		gui.set_text(gui.get_node("partyP"..x.."/int"), "INT: "..tostring(self.playerStats[x]["int"]))
		gui.set_text(gui.get_node("partyP"..x.."/spr"), "SPR: "..tostring(self.playerStats[x]["spr"]))
		gui.set_text(gui.get_node("partyP"..x.."/mhid"), "MH: "..tostring(self.playerStats[x]["mhid"]))
		gui.set_text(gui.get_node("partyP"..x.."/ohid"), "OH: "..tostring(self.playerStats[x]["ohid"]))
		gui.set_text(gui.get_node("partyP"..x.."/rid"), "R: "..tostring(self.playerStats[x]["rid"]))
		gui.set_text(gui.get_node("partyP"..x.."/sp1"), "R: "..tostring(self.playerStats[x]["sp1id"]))
		gui.set_text(gui.get_node("partyP"..x.."/sp2"), "R: "..tostring(self.playerStats[x]["sp2id"]))
		msg.post("main:/game#main", hash("getIcon"), {type="Ability", id=self.playerStats[x]["sp1id"], player=x,slot=1})
		msg.post("main:/game#main", hash("getIcon"), {type="Ability", id=self.playerStats[x]["sp2id"], player=x,slot=2})
		msg.post("main:/game#main", hash("getIcon"), {type="Weapon", id=self.playerStats[x]["mhid"], player=x})
	elseif(message_id == hash("updateUI")) then
		for i = 1, 5 do
			if(i>message.players) then
				gui.set_enabled(gui.get_node("p"..i), false)
				msg.post("/party#spriteP"..i, hash("disable"))
			end
		end
	elseif(message_id == hash("getIcon")) then
		if(message.type == "Ability") then
			gui.set_texture(gui.get_node("partyP"..message.player.."/sp"..message.slot.."icon"), "abilities")
			gui.play_flipbook(gui.get_node("partyP"..message.player.."/sp"..message.slot.."icon"),message.values)
		elseif(message.type == "Weapon") then
			gui.set_texture(gui.get_node("partyP"..message.player.."/mhicon"), "weapons")
			gui.play_flipbook(gui.get_node("partyP"..message.player.."/mhicon"), message.values)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("startButton"), action.x, action.y)) then
			print("clicked start")
			msg.post("lobbyView", hash("start"), {players=self.maxPlayers})
		elseif(gui.pick_node(gui.get_node("endButton"), action.x, action.y)) then
			print("clicked end")
			msg.post("lobbyView", hash("end"))
		
		end
		for x = 1, self.maxPlayers do
			if(gui.pick_node(gui.get_node("partyP"..x.."/hpcurr"), action.x, action.y)) then
				print("clicked hpcurr "..x)
				gui.set_enabled(gui.get_node("textbox"), true)
				dirtylarry:set_input("txtbox", self.playerStats[x]["hpcurr"])
				self.currentStat = "hpcurr"
				self.currentPlayer = x
			elseif(gui.pick_node(gui.get_node("partyP"..x.."/hpmax"), action.x, action.y)) then
				print("clicked hpmax "..x)
				gui.set_enabled(gui.get_node("textbox"), true)
				dirtylarry:set_input("txtbox", self.playerStats[x]["hpmax"])
				self.currentStat = "hpmax"
				self.currentPlayer = x
			elseif(gui.pick_node(gui.get_node("party"), action.x, action.y)) then
				print("clicked "..x)
			end
		end
	end
	local input = dirtylarry:input("txtbox", action_id, action, gui.KEYBOARD_TYPE_DEFAULT, "100")
	dirtylarry:button("txtboxEnter", action_id, action, function ()
		if(gui.is_enabled(gui.get_node("textbox"))) then
			print("button was pressed with " .. tostring(input))
			self.playerStats[self.currentPlayer][self.currentStat] = tonumber(input)
			gui.set_text(gui.get_node("partyP"..self.currentPlayer.."/"..self.currentStat), tostring(input))
			gui.set_enabled(gui.get_node("textbox"), false)
			msg.post("main:/game#savegame", hash("saveGame"))
		end
	end)
end
--[[
function dirtylarry.set_input(self, node, txt)
	local node_content = gui.get_node(node .. "/content")
	local url = msg.url()
	local key = tostring(url.socket) .. hash_to_hex(url.path) .. hash_to_hex(url.fragment or hash("")) .. node
	dirtylarry.input_nodes[key].data = txt
	gui.set_text(node_content, txt)
end
]]--

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
