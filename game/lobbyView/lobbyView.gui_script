local playerStats = {}
local party = {}
local partySize = 0
local equipGUIOpen = false



function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/equipGUI#equipmentGUI", hash("disable"))
	msg.post("main:/game#savegame", hash("loadGame"))
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("loadDone")) then
		tprint(message)
		for k, v in pairs(message.characters) do
			if(v ~= "None") then
				partySize = partySize + 1
				playerStats[v] = getCharacterData()[v]
				table.insert(party, v)
				table.insert(currentParty, v)
			else
				table.insert(currentParty, "None")
			end
		end
		for i = 1, 5 do
			if(i>partySize) then
				gui.set_enabled(gui.get_node("p"..i), false)
				msg.post("/party#spriteP"..i, hash("disable"))
			end
		end

		for x, v in pairs(party) do
			equipItem(v, "weapon", "weaponMH", 10837)
			equipItem(v, "weapon", "weaponOH", 12774)
			equipItem(v, "armor", "trinket1", 11815)
			equipItem(v, "armor", "shoulder", 16868)
			equipItem(v, "armor", "waist", 16864)
			equipItem(v, "armor", "hands", 16863)
			equipItem(v, "weapon", "weaponRanged", 9412)
			gui.set_text(gui.get_node("partyP"..x.."/class"), tostring(playerStats[v]["stats"]["class"]) )
			gui.set_text(gui.get_node("partyP"..x.."/level"), tostring(playerStats[v]["stats"]["level"]))
			gui.set_text(gui.get_node("partyP"..x.."/hpmax"), tostring(playerStats[v]["stats"]["hpMax"]))
			gui.set_text(gui.get_node("partyP"..x.."/hpcurr"), tostring(playerStats[v]["stats"]["hpCurrent"]))
			gui.set_text(gui.get_node("partyP"..x.."/resmax"), tostring(playerStats[v]["stats"]["resMax"]))
			gui.set_text(gui.get_node("partyP"..x.."/rescurr"), tostring(playerStats[v]["stats"]["resCurrent"]))
			gui.set_text(gui.get_node("partyP"..x.."/str"), "STR: "..tostring(playerStats[v]["stats"]["attr"]["str"]))
			gui.set_text(gui.get_node("partyP"..x.."/agi"), "AGI: "..tostring(playerStats[v]["stats"]["attr"]["agi"]))
			gui.set_text(gui.get_node("partyP"..x.."/sta"), "STA: "..tostring(playerStats[v]["stats"]["attr"]["sta"]))
			gui.set_text(gui.get_node("partyP"..x.."/int"), "INT: "..tostring(playerStats[v]["stats"]["attr"]["int"]))
			gui.set_text(gui.get_node("partyP"..x.."/spr"), "SPR: "..tostring(playerStats[v]["stats"]["attr"]["spr"]))
			
			
			if(playerStats[v]["loadout"]["spell1"] ~= 0) then
				gui.set_text(gui.get_node("partyP"..x.."/sp1"), "A: "..tostring(playerStats[v]["loadout"]["spell1"]))
				gui.set_texture(gui.get_node("partyP"..x.."/sp1icon"), "abilities")
				gui.play_flipbook(gui.get_node("partyP"..x.."/sp1icon"),getAbilityIcon(playerStats[v]["loadout"]["spell1"]))
			end
			if(playerStats[v]["loadout"]["spell2"] ~= 0) then
				gui.set_text(gui.get_node("partyP"..x.."/sp2"), "A: "..tostring(playerStats[v]["loadout"]["spell2"]))
				gui.set_texture(gui.get_node("partyP"..x.."/sp2icon"), "abilities")
				gui.play_flipbook(gui.get_node("partyP"..x.."/sp2icon"),getAbilityIcon(playerStats[v]["loadout"]["spell2"]))
			end
			
			loadEquipment(x,v)
		end
		
		--msg.post("main:/game#main", hash("getProperties"), {type="Armor" id=self.playerEquipment[x][ player=x})
	elseif(message_id == hash("exitEquipGUI")) then
		equipGUIOpen = false
		gui.set_enabled(gui.get_node("partyP2/values"), true)
		gui.set_enabled(gui.get_node("partyP3/values"), true)
		gui.set_enabled(gui.get_node("partyP4/values"), true)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if(gui.pick_node(gui.get_node("startButton"), action.x, action.y)) then
			
			msg.post("lobbyView", hash("start"), {party=party,partySize=partySize})
		elseif(gui.pick_node(gui.get_node("endButton"), action.x, action.y)) then
			print("clicked end")
			msg.post("lobbyView", hash("end"))
		
		end
		if(not equipGUIOpen) then
			for x = 1, partySize do
				if(gui.pick_node(gui.get_node("spriteP"..x), action.x, action.y)) then
					print("clicked "..x)
					gui.set_enabled(gui.get_node("partyP2/values"), false)
					gui.set_enabled(gui.get_node("partyP3/values"), false)
					gui.set_enabled(gui.get_node("partyP4/values"), false)
					equipGUIOpen = true
					msg.post("/equipGUI#equipmentGUI", hash("enable"))
					--tprint(self.playerEquipProperties[x])
					--for k, v in pairs(self.playerEquipProperties[x]) do
					--	msg.post("/equipGUI#equipmentGUI", hash("equipmentStats"), {stats=self.playerEquipProperties[x][tostring(k)],slot=tostring(k)})
					--end
					msg.post("/equipGUI#equipmentGUI", hash("generateIcons"), {character=party[x]})
					break
				end
			end
		end
	end
end
--[[
function dirtylarry.set_input(self, node, txt)
	local node_content = gui.get_node(node .. "/content")
	local url = msg.url()
	local key = tostring(url.socket) .. hash_to_hex(url.path) .. hash_to_hex(url.fragment or hash("")) .. node
	dirtylarry.input_nodes[key].data = txt
	gui.set_text(node_content, txt)
end
]]--

function loadEquipment(id, character)
	local pWeaponIds = {weaponMH=0,weaponOH=0,weaponRanged=0}
	pWeaponIds["weaponMH"] = getCharacterEquipmentValue(character, "weaponMH", "id")
	pWeaponIds["weaponOH"] = getCharacterEquipmentValue(character, "weaponOH", "id")
	pWeaponIds["weaponRanged"] = getCharacterEquipmentValue(character, "weaponRanged", "id")
	if(pWeaponIds["weaponMH"] ~= 0) then
		gui.set_text(gui.get_node("partyP"..id.."/mhid"), "MH: "..tostring(pWeaponIds["weaponMH"]))
		gui.set_texture(gui.get_node("partyP"..id.."/mhicon"), "weapons")
		gui.play_flipbook(gui.get_node("partyP"..id.."/mhicon"), getWeaponIcon(pWeaponIds["weaponMH"]))
	end
	if(pWeaponIds["weaponOH"] ~= 0) then
		gui.set_text(gui.get_node("partyP"..id.."/ohid"), "OH: "..tostring(pWeaponIds["weaponOH"]))
		gui.set_texture(gui.get_node("partyP"..id.."/ohicon"), "weapons")
		gui.play_flipbook(gui.get_node("partyP"..id.."/ohicon"), getWeaponIcon(pWeaponIds["weaponOH"]))
	end
	if(pWeaponIds["weaponRanged"] ~= 0) then
		gui.set_text(gui.get_node("partyP"..id.."/rid"), "R: "..tostring(pWeaponIds["weaponRanged"]))
		gui.set_texture(gui.get_node("partyP"..id.."/ricon"), "weapons")
		gui.play_flipbook(gui.get_node("partyP"..id.."/ricon"), getWeaponIcon(pWeaponIds["weaponRanged"]))
	end
	
end


function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end