local currentView = "main"
local loaded = ""
local tempData = {}

function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if(message_id == hash("gotoLobby")) then
		print("load lobby")
		if(currentView == "mainMenu") then
			msg.post("/screens#proxy_mainMenu", hash("unload"))
		elseif(currentView == "gameView") then
			msg.post("/screens#proxy_gameView", hash("unload"))
		end
		msg.post("/screens#proxy_lobbyView", hash("load"))
		currentView = "lobbyView"
	elseif(message_id == hash("gotoMainMenu")) then
		print("load main")
		if(currentView == "lobbyView") then
			msg.post("/screens#proxy_lobbyView", hash("unload"))
		end
		msg.post("/screens#proxy_mainMenu", hash("load"))
		currentView = "mainMenu"
	elseif(message_id == hash("gotoGame")) then
		print("load game")
		if(currentView == "lobbyView") then
			tempData= {party=message.party,partySize=message.partySize}
			msg.post("/screens#proxy_lobbyView", hash("unload"))
		end
		msg.post("/screens#proxy_gameView", hash("load"))
		currentView = "gameView"
	elseif message_id == hash("proxy_loaded") then
		print(tostring(sender), " loaded")
		if(currentView == "gameView") then
			msg.post("gameView:/game#gameView", hash("sendGameData"), {party=tempData["party"],partySize=tempData["partySize"]})
			tempData = {}
		end
		msg.post(sender, "acquire_input_focus")
		msg.post(sender, hash("init"))
		msg.post(sender, hash("enable"))
		loaded = tostring(sender)
	elseif(message_id == hash("getCurrentView")) then
		msg.post(sender, hash("returnCurrentView"), {view=currentView})
	end
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end