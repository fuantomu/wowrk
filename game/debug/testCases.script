function init(self)
	testResults = {hit=0,dodge=0,block=0,crit=0,parry=0,critBlock=0,glancingBlow=0,crushingBlow=0,miss=0}
	testAmount = 10
	testDamageResult = 0
	testRuns = 0
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if(message_id == hash("startDebug")) then
		--testCharacter["stats"]["level"] = math.random(0, 60)
		--testCharacter["stats"]["attr"] = {str=math.random(1, 100), agi=math.random(1, 100), sta=math.random(1, 100), int=math.random(1, 100), spr=math.random(1, 100)}
		--testCharacter["stats"]["skill"] = {OneHandedSword=testCharacter["stats"]["level"]*5, defense=testCharacter["stats"]["level"]*5}
		--testCharacter["stats"]["crit"] = math.random(1,50)
		--testCharacter["stats"]["avoidance"] = {dodge=math.random(0,40),parry=math.random(0,40),block=math.random(0,40)}
		--testEnemy["level"] = math.random(0,63)
		--testEnemy["armor"] = math.random(0,16536)
		--testEnemy["avoidance"] = {dodge=math.random(0,40),parry=math.random(0,40),block=math.random(0,40)}
		--testEnemy["attr"]["sta"] = math.random(1,500)
		testRuns = testRuns + 1
		if( testRuns > 1) then
			msg.post("game#calculationMain", hash("getCombatStats"), {p="testCharacter", skip=true})
		else
			msg.post("game#calculationMain", hash("getCombatStats"), {p="testCharacter"})
		end
	elseif(message_id == hash("returnCombatStats")) then
		--tprint(message.p)
		testResults = {hit=0,dodge=0,block=0,crit=0,parry=0,critBlock=0,glancingBlow=0,crushingBlow=0,miss=0}
		for i = 1, testAmount do
			msg.post("game#calculationMain", hash("getAttackResult"), {attacker="player", e="testEnemy", p="testCharacter", pSource="Weapon", pId="weaponRanged", special=false , dw=false, front=true, block=true})
		end
		--tprint(characterData["testCharacter"])
		msg.post("game#testCases", hash("testDone"))
		--msg.post("game#calculationMain", hash("getAttackResult"), {e=message.e, p=message.p, special=true, ranged=false, dw=false, front=true, block=true, mob=false})
		--msg.post("game#calculationMain", hash("getAttackResult"), {e=message.e, p=message.p, special=false, ranged=false, dw=true, front=true, block=false, mob=false})
	elseif(message_id == hash("returnAttackResult")) then
		testResults[message.result] = testResults[message.result] + 1
		testDamageResult = testDamageResult + message.damageResult
		print("Result: "..(message.rawDamage["phy"]+message.procDamage["phy"]).." raw; "..math.floor(message.reducedDamage["phy"]*100).."% reduction: "..message.result.." with "..message.damageResult.." ("..message.blockedDamage.." blocked), Proc: "..message.procDamage["phy"])
		--tprint(message.damageTable)
	elseif(message_id == hash("testDone")) then
		print("Test results for "..testAmount.." runs:")
		timer.delay(1, false, function (self, id)
			for k, v in pairs(testResults) do
				testResults[k] = v / ( testAmount / 100)
			end
			--tprint(testResults)
		end)
	end
end

function tprint (t, s)
	for k, v in pairs(t) do
		local kfmt = '["' .. tostring(k) ..'"]'
		if type(k) ~= 'string' then
			kfmt = '[' .. k .. ']'
		end
		local vfmt = '"'.. tostring(v) ..'"'
		if type(v) == 'table' then
			tprint(v, (s or '')..kfmt)
		else
			if type(v) ~= 'string' then
				vfmt = tostring(v)
			end
			print(type(t)..(s or '')..kfmt..' = '..vfmt)
		end
	end
end